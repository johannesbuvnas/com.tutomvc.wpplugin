<link rel="stylesheet" href="http://local.tutomvc.com/_wp/wp-content/plugins/tutomvc/style.css"><div class="Debugger">
	<div class="Inner">
		<h1>Tuto MVC</h1>
		<p>
			<span class="title">NOTICE: Undefined offset: 0</span>
		</p>
		<div class="Backtrace ">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-includes/meta.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Metadata API
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  * Functions for retrieving and manipulating metadata of various WordPress object types. Metadata
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  * for an object is a represented by a simple key-value pair. Objects may contain multiple
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  * metadata entries that share the same key and differ only in their value.
</code></pre><pre class=''><code><span class='LineNumber'>8</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>9</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * @subpackage Meta
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>12</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  * Add metadata for the specified object.
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>18</span>  * @uses $wpdb WordPress database object for queries.
</code></pre><pre class=''><code><span class='LineNumber'>19</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>20</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>21</span>  * @param int $object_id ID of the object metadata is for
</code></pre><pre class=''><code><span class='LineNumber'>22</span>  * @param string $meta_key Metadata key
</code></pre><pre class=''><code><span class='LineNumber'>23</span>  * @param mixed $meta_value Metadata value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>24</span>  * @param bool $unique Optional, default is false. Whether the specified metadata key should be
</code></pre><pre class=''><code><span class='LineNumber'>25</span>  * 		unique for the object. If true, and the object already has a value for the specified
</code></pre><pre class=''><code><span class='LineNumber'>26</span>  * 		metadata key, no change will be made
</code></pre><pre class=''><code><span class='LineNumber'>27</span>  * @return int|bool The meta ID on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>28</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>29</span> function add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 	$object_id = absint( $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 	if ( ! $object_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 	$column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 	// expected_slashed ($meta_key)
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 	$meta_key = wp_unslash($meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 	$meta_value = wp_unslash($meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 	$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 	 * Filter whether to add metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 	 * object type (comment, post, or user). Returning a non-null value
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 	 * will effectively short-circuit the function.
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 	 * @param null|bool $check      Whether to allow adding metadata for the given type.
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 	 * @param int       $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 	 * @param string    $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 	 * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 	 * @param bool      $unique     Whether the specified meta key should be unique
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 	 *                              for the object. Optional. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 	$check = apply_filters( &quot;add_{$meta_type}_metadata&quot;, null, $object_id, $meta_key, $meta_value, $unique );
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 	if ( null !== $check )
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 		return $check;
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 	if ( $unique &amp;&amp; $wpdb-&gt;get_var( $wpdb-&gt;prepare(
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 		&quot;SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d&quot;,
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 		$meta_key, $object_id ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 	$_meta_value = $meta_value;
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 	$meta_value = maybe_serialize( $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 	 * Fires immediately before meta of a specific type is added.
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 	do_action( &quot;add_{$meta_type}_meta&quot;, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 	$result = $wpdb-&gt;insert( $table, array(
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 		$column =&gt; $object_id,
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 		'meta_key' =&gt; $meta_key,
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 		'meta_value' =&gt; $meta_value
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 	if ( ! $result )
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 	$mid = (int) $wpdb-&gt;insert_id;
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 	wp_cache_delete($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 	 * Fires immediately after meta of a specific type is added.
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 	 * @param int    $mid        The meta ID after successful update.
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 	do_action( &quot;added_{$meta_type}_meta&quot;, $mid, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 	return $mid;
</code></pre><pre class=''><code><span class='LineNumber'>124</span> }
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 
</code></pre><pre class=''><code><span class='LineNumber'>126</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>127</span>  * Update metadata for the specified object. If no value already exists for the specified object
</code></pre><pre class=''><code><span class='LineNumber'>128</span>  * ID and metadata key, the metadata will be added.
</code></pre><pre class=''><code><span class='LineNumber'>129</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>130</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>131</span>  * @uses $wpdb WordPress database object for queries.
</code></pre><pre class=''><code><span class='LineNumber'>132</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>133</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>134</span>  * @param int $object_id ID of the object metadata is for
</code></pre><pre class=''><code><span class='LineNumber'>135</span>  * @param string $meta_key Metadata key
</code></pre><pre class=''><code><span class='LineNumber'>136</span>  * @param mixed $meta_value Metadata value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>137</span>  * @param mixed $prev_value Optional. If specified, only update existing metadata entries with
</code></pre><pre class=''><code><span class='LineNumber'>138</span>  * 		the specified value. Otherwise, update all entries.
</code></pre><pre class=''><code><span class='LineNumber'>139</span>  * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>140</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>141</span> function update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 	$object_id = absint( $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 	if ( ! $object_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 	$column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 	// expected_slashed ($meta_key)
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 	$meta_key = wp_unslash($meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 	$passed_value = $meta_value;
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 	$meta_value = wp_unslash($meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 	$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>166</span> 
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 	 * Filter whether to update metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>170</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>171</span> 	 * object type (comment, post, or user). Returning a non-null value
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 	 * will effectively short-circuit the function.
</code></pre><pre class=''><code><span class='LineNumber'>173</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>174</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>176</span> 	 * @param null|bool $check      Whether to allow updating metadata for the given type.
</code></pre><pre class=''><code><span class='LineNumber'>177</span> 	 * @param int       $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 	 * @param string    $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 	 * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 	 * @param mixed     $prev_value Optional. If specified, only update existing
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 	 *                              metadata entries with the specified value.
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 	 *                              Otherwise, update all entries.
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 	$check = apply_filters( &quot;update_{$meta_type}_metadata&quot;, null, $object_id, $meta_key, $meta_value, $prev_value );
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 	if ( null !== $check )
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 		return (bool) $check;
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 	// Compare existing value to new value if no prev value given and the key exists only once.
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 	if ( empty($prev_value) ) {
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 		$old_value = get_metadata($meta_type, $object_id, $meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 		if ( count($old_value) == 1 ) {
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 			if ( $old_value[0] === $meta_value )
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 				return false;
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 	if ( ! $meta_id = $wpdb-&gt;get_var( $wpdb-&gt;prepare( &quot;SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d&quot;, $meta_key, $object_id ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 		return add_metadata($meta_type, $object_id, $meta_key, $passed_value);
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 	$_meta_value = $meta_value;
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 	$meta_value = maybe_serialize( $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 	$data  = compact( 'meta_value' );
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 	$where = array( $column =&gt; $object_id, 'meta_key' =&gt; $meta_key );
</code></pre><pre class=''><code><span class='LineNumber'>205</span> 
</code></pre><pre class=''><code><span class='LineNumber'>206</span> 	if ( !empty( $prev_value ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 		$prev_value = maybe_serialize($prev_value);
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 		$where['meta_value'] = $prev_value;
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 	 * Fires immediately before updating metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 	 * @param int    $meta_id    ID of the metadata entry to update.
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 	do_action( &quot;update_{$meta_type}_meta&quot;, $meta_id, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 	if ( 'post' == $meta_type )
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 		 * Fires immediately before updating a post's metadata.
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 		 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 		 * @param int    $meta_id    ID of metadata entry to update.
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 		 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 		 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 		 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>236</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 		do_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 
</code></pre><pre class=''><code><span class='LineNumber'>239</span> 	$result = $wpdb-&gt;update( $table, $data, $where );
</code></pre><pre class=''><code><span class='LineNumber'>240</span> 	if ( ! $result )
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 	wp_cache_delete($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 	 * Fires immediately after updating metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>252</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>253</span> 	 * @param int    $meta_id    ID of updated metadata entry.
</code></pre><pre class=''><code><span class='LineNumber'>254</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>255</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>256</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>257</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>258</span> 	do_action( &quot;updated_{$meta_type}_meta&quot;, $meta_id, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>259</span> 
</code></pre><pre class=''><code><span class='LineNumber'>260</span> 	if ( 'post' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>261</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>262</span> 		 * Fires immediately after updating a post's metadata.
</code></pre><pre class=''><code><span class='LineNumber'>263</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>264</span> 		 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>265</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>266</span> 		 * @param int    $meta_id    ID of updated metadata entry.
</code></pre><pre class=''><code><span class='LineNumber'>267</span> 		 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>268</span> 		 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>269</span> 		 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>270</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>271</span> 		do_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>272</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>273</span> 
</code></pre><pre class=''><code><span class='LineNumber'>274</span> 	return true;
</code></pre><pre class=''><code><span class='LineNumber'>275</span> }
</code></pre><pre class=''><code><span class='LineNumber'>276</span> 
</code></pre><pre class=''><code><span class='LineNumber'>277</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>278</span>  * Delete metadata for the specified object.
</code></pre><pre class=''><code><span class='LineNumber'>279</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>280</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>281</span>  * @uses $wpdb WordPress database object for queries.
</code></pre><pre class=''><code><span class='LineNumber'>282</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>283</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>284</span>  * @param int $object_id ID of the object metadata is for
</code></pre><pre class=''><code><span class='LineNumber'>285</span>  * @param string $meta_key Metadata key
</code></pre><pre class=''><code><span class='LineNumber'>286</span>  * @param mixed $meta_value Optional. Metadata value. Must be serializable if non-scalar. If specified, only delete metadata entries
</code></pre><pre class=''><code><span class='LineNumber'>287</span>  * 		with this value. Otherwise, delete all entries with the specified meta_key.
</code></pre><pre class=''><code><span class='LineNumber'>288</span>  * @param bool $delete_all Optional, default is false. If true, delete matching metadata entries
</code></pre><pre class=''><code><span class='LineNumber'>289</span>  * 		for all objects, ignoring the specified object_id. Otherwise, only delete matching
</code></pre><pre class=''><code><span class='LineNumber'>290</span>  * 		metadata entries for the specified object_id.
</code></pre><pre class=''><code><span class='LineNumber'>291</span>  * @return bool True on successful delete, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>292</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>293</span> function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {
</code></pre><pre class=''><code><span class='LineNumber'>294</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>295</span> 
</code></pre><pre class=''><code><span class='LineNumber'>296</span> 	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) &amp;&amp; ! $delete_all ) {
</code></pre><pre class=''><code><span class='LineNumber'>297</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>298</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>299</span> 
</code></pre><pre class=''><code><span class='LineNumber'>300</span> 	$object_id = absint( $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>301</span> 	if ( ! $object_id &amp;&amp; ! $delete_all ) {
</code></pre><pre class=''><code><span class='LineNumber'>302</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>303</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>304</span> 
</code></pre><pre class=''><code><span class='LineNumber'>305</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>306</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>307</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>308</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>309</span> 
</code></pre><pre class=''><code><span class='LineNumber'>310</span> 	$type_column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>311</span> 	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>312</span> 	// expected_slashed ($meta_key)
</code></pre><pre class=''><code><span class='LineNumber'>313</span> 	$meta_key = wp_unslash($meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>314</span> 	$meta_value = wp_unslash($meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>315</span> 
</code></pre><pre class=''><code><span class='LineNumber'>316</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>317</span> 	 * Filter whether to delete metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>318</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>319</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>320</span> 	 * object type (comment, post, or user). Returning a non-null value
</code></pre><pre class=''><code><span class='LineNumber'>321</span> 	 * will effectively short-circuit the function.
</code></pre><pre class=''><code><span class='LineNumber'>322</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>323</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>324</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>325</span> 	 * @param null|bool $delete     Whether to allow metadata deletion of the given type.
</code></pre><pre class=''><code><span class='LineNumber'>326</span> 	 * @param int       $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>327</span> 	 * @param string    $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>328</span> 	 * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>329</span> 	 * @param bool      $delete_all Whether to delete the matching metadata entries
</code></pre><pre class=''><code><span class='LineNumber'>330</span> 	 *                              for all objects, ignoring the specified $object_id.
</code></pre><pre class=''><code><span class='LineNumber'>331</span> 	 *                              Default false.
</code></pre><pre class=''><code><span class='LineNumber'>332</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>333</span> 	$check = apply_filters( &quot;delete_{$meta_type}_metadata&quot;, null, $object_id, $meta_key, $meta_value, $delete_all );
</code></pre><pre class=''><code><span class='LineNumber'>334</span> 	if ( null !== $check )
</code></pre><pre class=''><code><span class='LineNumber'>335</span> 		return (bool) $check;
</code></pre><pre class=''><code><span class='LineNumber'>336</span> 
</code></pre><pre class=''><code><span class='LineNumber'>337</span> 	$_meta_value = $meta_value;
</code></pre><pre class=''><code><span class='LineNumber'>338</span> 	$meta_value = maybe_serialize( $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>339</span> 
</code></pre><pre class=''><code><span class='LineNumber'>340</span> 	$query = $wpdb-&gt;prepare( &quot;SELECT $id_column FROM $table WHERE meta_key = %s&quot;, $meta_key );
</code></pre><pre class=''><code><span class='LineNumber'>341</span> 
</code></pre><pre class=''><code><span class='LineNumber'>342</span> 	if ( !$delete_all )
</code></pre><pre class=''><code><span class='LineNumber'>343</span> 		$query .= $wpdb-&gt;prepare(&quot; AND $type_column = %d&quot;, $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>344</span> 
</code></pre><pre class=''><code><span class='LineNumber'>345</span> 	if ( $meta_value )
</code></pre><pre class=''><code><span class='LineNumber'>346</span> 		$query .= $wpdb-&gt;prepare(&quot; AND meta_value = %s&quot;, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>347</span> 
</code></pre><pre class=''><code><span class='LineNumber'>348</span> 	$meta_ids = $wpdb-&gt;get_col( $query );
</code></pre><pre class=''><code><span class='LineNumber'>349</span> 	if ( !count( $meta_ids ) )
</code></pre><pre class=''><code><span class='LineNumber'>350</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>351</span> 
</code></pre><pre class=''><code><span class='LineNumber'>352</span> 	if ( $delete_all )
</code></pre><pre class=''><code><span class='LineNumber'>353</span> 		$object_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT $type_column FROM $table WHERE meta_key = %s&quot;, $meta_key ) );
</code></pre><pre class=''><code><span class='LineNumber'>354</span> 
</code></pre><pre class=''><code><span class='LineNumber'>355</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>356</span> 	 * Fires immediately before deleting metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>357</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>358</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>359</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>360</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>361</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>362</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>363</span> 	 * @param array  $meta_ids   An array of metadata entry IDs to delete.
</code></pre><pre class=''><code><span class='LineNumber'>364</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>365</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>366</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>367</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>368</span> 	do_action( &quot;delete_{$meta_type}_meta&quot;, $meta_ids, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>369</span> 
</code></pre><pre class=''><code><span class='LineNumber'>370</span> 	// Old-style action.
</code></pre><pre class=''><code><span class='LineNumber'>371</span> 	if ( 'post' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>372</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>373</span> 		 * Fires immediately before deleting metadata for a post.
</code></pre><pre class=''><code><span class='LineNumber'>374</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>375</span> 		 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>376</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>377</span> 		 * @param array $meta_ids An array of post metadata entry IDs to delete.
</code></pre><pre class=''><code><span class='LineNumber'>378</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>379</span> 		do_action( 'delete_postmeta', $meta_ids );
</code></pre><pre class=''><code><span class='LineNumber'>380</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>381</span> 
</code></pre><pre class=''><code><span class='LineNumber'>382</span> 	$query = &quot;DELETE FROM $table WHERE $id_column IN( &quot; . implode( ',', $meta_ids ) . &quot; )&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>383</span> 
</code></pre><pre class=''><code><span class='LineNumber'>384</span> 	$count = $wpdb-&gt;query($query);
</code></pre><pre class=''><code><span class='LineNumber'>385</span> 
</code></pre><pre class=''><code><span class='LineNumber'>386</span> 	if ( !$count )
</code></pre><pre class=''><code><span class='LineNumber'>387</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>388</span> 
</code></pre><pre class=''><code><span class='LineNumber'>389</span> 	if ( $delete_all ) {
</code></pre><pre class=''><code><span class='LineNumber'>390</span> 		foreach ( (array) $object_ids as $o_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>391</span> 			wp_cache_delete($o_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>392</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>393</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>394</span> 		wp_cache_delete($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>395</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>396</span> 
</code></pre><pre class=''><code><span class='LineNumber'>397</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>398</span> 	 * Fires immediately after deleting metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>399</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>400</span> 	 * The dynamic portion of the hook name, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>401</span> 	 * object type (comment, post, or user).
</code></pre><pre class=''><code><span class='LineNumber'>402</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>403</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>404</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>405</span> 	 * @param array  $meta_ids   An array of deleted metadata entry IDs.
</code></pre><pre class=''><code><span class='LineNumber'>406</span> 	 * @param int    $object_id  Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>407</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>408</span> 	 * @param mixed  $meta_value Meta value.
</code></pre><pre class=''><code><span class='LineNumber'>409</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>410</span> 	do_action( &quot;deleted_{$meta_type}_meta&quot;, $meta_ids, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>411</span> 
</code></pre><pre class=''><code><span class='LineNumber'>412</span> 	// Old-style action.
</code></pre><pre class=''><code><span class='LineNumber'>413</span> 	if ( 'post' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>414</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>415</span> 		 * Fires immediately after deleting metadata for a post.
</code></pre><pre class=''><code><span class='LineNumber'>416</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>417</span> 		 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>418</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>419</span> 		 * @param array $meta_ids An array of deleted post metadata entry IDs.
</code></pre><pre class=''><code><span class='LineNumber'>420</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>421</span> 		do_action( 'deleted_postmeta', $meta_ids );
</code></pre><pre class=''><code><span class='LineNumber'>422</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>423</span> 
</code></pre><pre class=''><code><span class='LineNumber'>424</span> 	return true;
</code></pre><pre class=''><code><span class='LineNumber'>425</span> }
</code></pre><pre class=''><code><span class='LineNumber'>426</span> 
</code></pre><pre class=''><code><span class='LineNumber'>427</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>428</span>  * Retrieve metadata for the specified object.
</code></pre><pre class=''><code><span class='LineNumber'>429</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>430</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>431</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>432</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>433</span>  * @param int $object_id ID of the object metadata is for
</code></pre><pre class=''><code><span class='LineNumber'>434</span>  * @param string $meta_key Optional. Metadata key. If not specified, retrieve all metadata for
</code></pre><pre class=''><code><span class='LineNumber'>435</span>  * 		the specified object.
</code></pre><pre class=''><code><span class='LineNumber'>436</span>  * @param bool $single Optional, default is false. If true, return only the first value of the
</code></pre><pre class=''><code><span class='LineNumber'>437</span>  * 		specified meta_key. This parameter has no effect if meta_key is not specified.
</code></pre><pre class=''><code><span class='LineNumber'>438</span>  * @return string|array Single metadata value, or array of values
</code></pre><pre class=''><code><span class='LineNumber'>439</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>440</span> function get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {
</code></pre><pre class=''><code><span class='LineNumber'>441</span> 	if ( ! $meta_type || ! is_numeric( $object_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>442</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>443</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>444</span> 
</code></pre><pre class=''><code><span class='LineNumber'>445</span> 	$object_id = absint( $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>446</span> 	if ( ! $object_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>447</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>448</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>449</span> 
</code></pre><pre class=''><code><span class='LineNumber'>450</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>451</span> 	 * Filter whether to retrieve metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>452</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>453</span> 	 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>454</span> 	 * object type (comment, post, or user). Returning a non-null value
</code></pre><pre class=''><code><span class='LineNumber'>455</span> 	 * will effectively short-circuit the function.
</code></pre><pre class=''><code><span class='LineNumber'>456</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>457</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>458</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>459</span> 	 * @param null|array|string $value     The value get_metadata() should
</code></pre><pre class=''><code><span class='LineNumber'>460</span> 	 *                                     return - a single metadata value,
</code></pre><pre class=''><code><span class='LineNumber'>461</span> 	 *                                     or an array of values.
</code></pre><pre class=''><code><span class='LineNumber'>462</span> 	 * @param int               $object_id Object ID.
</code></pre><pre class=''><code><span class='LineNumber'>463</span> 	 * @param string            $meta_key  Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>464</span> 	 * @param string|array      $single    Meta value, or an array of values.
</code></pre><pre class=''><code><span class='LineNumber'>465</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>466</span> 	$check = apply_filters( &quot;get_{$meta_type}_metadata&quot;, null, $object_id, $meta_key, $single );
</code></pre><pre class=''><code><span class='LineNumber'>467</span> 	if ( null !== $check ) {
</code></pre><pre class=''><code><span class='LineNumber'>468</span> 		if ( $single &amp;&amp; is_array( $check ) )
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>469</span> 			return $check[0];
</code></pre><pre class=''><code><span class='LineNumber'>470</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>471</span> 			return $check;
</code></pre><pre class=''><code><span class='LineNumber'>472</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>473</span> 
</code></pre><pre class=''><code><span class='LineNumber'>474</span> 	$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>475</span> 
</code></pre><pre class=''><code><span class='LineNumber'>476</span> 	if ( !$meta_cache ) {
</code></pre><pre class=''><code><span class='LineNumber'>477</span> 		$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>478</span> 		$meta_cache = $meta_cache[$object_id];
</code></pre><pre class=''><code><span class='LineNumber'>479</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>480</span> 
</code></pre><pre class=''><code><span class='LineNumber'>481</span> 	if ( !$meta_key )
</code></pre><pre class=''><code><span class='LineNumber'>482</span> 		return $meta_cache;
</code></pre><pre class=''><code><span class='LineNumber'>483</span> 
</code></pre><pre class=''><code><span class='LineNumber'>484</span> 	if ( isset($meta_cache[$meta_key]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>485</span> 		if ( $single )
</code></pre><pre class=''><code><span class='LineNumber'>486</span> 			return maybe_unserialize( $meta_cache[$meta_key][0] );
</code></pre><pre class=''><code><span class='LineNumber'>487</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>488</span> 			return array_map('maybe_unserialize', $meta_cache[$meta_key]);
</code></pre><pre class=''><code><span class='LineNumber'>489</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>490</span> 
</code></pre><pre class=''><code><span class='LineNumber'>491</span> 	if ($single)
</code></pre><pre class=''><code><span class='LineNumber'>492</span> 		return '';
</code></pre><pre class=''><code><span class='LineNumber'>493</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>494</span> 		return array();
</code></pre><pre class=''><code><span class='LineNumber'>495</span> }
</code></pre><pre class=''><code><span class='LineNumber'>496</span> 
</code></pre><pre class=''><code><span class='LineNumber'>497</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>498</span>  * Determine if a meta key is set for a given object
</code></pre><pre class=''><code><span class='LineNumber'>499</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>500</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>501</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>502</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>503</span>  * @param int $object_id ID of the object metadata is for
</code></pre><pre class=''><code><span class='LineNumber'>504</span>  * @param string $meta_key Metadata key.
</code></pre><pre class=''><code><span class='LineNumber'>505</span>  * @return boolean true of the key is set, false if not.
</code></pre><pre class=''><code><span class='LineNumber'>506</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>507</span> function metadata_exists( $meta_type, $object_id, $meta_key ) {
</code></pre><pre class=''><code><span class='LineNumber'>508</span> 	if ( ! $meta_type || ! is_numeric( $object_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>509</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>510</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>511</span> 
</code></pre><pre class=''><code><span class='LineNumber'>512</span> 	$object_id = absint( $object_id );
</code></pre><pre class=''><code><span class='LineNumber'>513</span> 	if ( ! $object_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>514</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>515</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>516</span> 
</code></pre><pre class=''><code><span class='LineNumber'>517</span> 	/** This filter is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>518</span> 	$check = apply_filters( &quot;get_{$meta_type}_metadata&quot;, null, $object_id, $meta_key, true );
</code></pre><pre class=''><code><span class='LineNumber'>519</span> 	if ( null !== $check )
</code></pre><pre class=''><code><span class='LineNumber'>520</span> 		return (bool) $check;
</code></pre><pre class=''><code><span class='LineNumber'>521</span> 
</code></pre><pre class=''><code><span class='LineNumber'>522</span> 	$meta_cache = wp_cache_get( $object_id, $meta_type . '_meta' );
</code></pre><pre class=''><code><span class='LineNumber'>523</span> 
</code></pre><pre class=''><code><span class='LineNumber'>524</span> 	if ( !$meta_cache ) {
</code></pre><pre class=''><code><span class='LineNumber'>525</span> 		$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>526</span> 		$meta_cache = $meta_cache[$object_id];
</code></pre><pre class=''><code><span class='LineNumber'>527</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>528</span> 
</code></pre><pre class=''><code><span class='LineNumber'>529</span> 	if ( isset( $meta_cache[ $meta_key ] ) )
</code></pre><pre class=''><code><span class='LineNumber'>530</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>531</span> 
</code></pre><pre class=''><code><span class='LineNumber'>532</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>533</span> }
</code></pre><pre class=''><code><span class='LineNumber'>534</span> 
</code></pre><pre class=''><code><span class='LineNumber'>535</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>536</span>  * Get meta data by meta ID
</code></pre><pre class=''><code><span class='LineNumber'>537</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>538</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>539</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>540</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>541</span>  * @param int $meta_id ID for a specific meta row
</code></pre><pre class=''><code><span class='LineNumber'>542</span>  * @return object Meta object or false.
</code></pre><pre class=''><code><span class='LineNumber'>543</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>544</span> function get_metadata_by_mid( $meta_type, $meta_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>545</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>546</span> 
</code></pre><pre class=''><code><span class='LineNumber'>547</span> 	if ( ! $meta_type || ! is_numeric( $meta_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>548</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>549</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>550</span> 
</code></pre><pre class=''><code><span class='LineNumber'>551</span> 	$meta_id = absint( $meta_id );
</code></pre><pre class=''><code><span class='LineNumber'>552</span> 	if ( ! $meta_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>553</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>554</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>555</span> 
</code></pre><pre class=''><code><span class='LineNumber'>556</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>557</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>558</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>559</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>560</span> 
</code></pre><pre class=''><code><span class='LineNumber'>561</span> 	$id_column = ( 'user' == $meta_type ) ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>562</span> 
</code></pre><pre class=''><code><span class='LineNumber'>563</span> 	$meta = $wpdb-&gt;get_row( $wpdb-&gt;prepare( &quot;SELECT * FROM $table WHERE $id_column = %d&quot;, $meta_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>564</span> 
</code></pre><pre class=''><code><span class='LineNumber'>565</span> 	if ( empty( $meta ) )
</code></pre><pre class=''><code><span class='LineNumber'>566</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>567</span> 
</code></pre><pre class=''><code><span class='LineNumber'>568</span> 	if ( isset( $meta-&gt;meta_value ) )
</code></pre><pre class=''><code><span class='LineNumber'>569</span> 		$meta-&gt;meta_value = maybe_unserialize( $meta-&gt;meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>570</span> 
</code></pre><pre class=''><code><span class='LineNumber'>571</span> 	return $meta;
</code></pre><pre class=''><code><span class='LineNumber'>572</span> }
</code></pre><pre class=''><code><span class='LineNumber'>573</span> 
</code></pre><pre class=''><code><span class='LineNumber'>574</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>575</span>  * Update meta data by meta ID
</code></pre><pre class=''><code><span class='LineNumber'>576</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>577</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>578</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>579</span>  * @uses get_metadata_by_mid() Calls get_metadata_by_mid() to fetch the meta key, value
</code></pre><pre class=''><code><span class='LineNumber'>580</span>  *		and object_id of the given meta_id.
</code></pre><pre class=''><code><span class='LineNumber'>581</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>582</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>583</span>  * @param int $meta_id ID for a specific meta row
</code></pre><pre class=''><code><span class='LineNumber'>584</span>  * @param string $meta_value Metadata value
</code></pre><pre class=''><code><span class='LineNumber'>585</span>  * @param string $meta_key Optional, you can provide a meta key to update it
</code></pre><pre class=''><code><span class='LineNumber'>586</span>  * @return bool True on successful update, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>587</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>588</span> function update_metadata_by_mid( $meta_type, $meta_id, $meta_value, $meta_key = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>589</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>590</span> 
</code></pre><pre class=''><code><span class='LineNumber'>591</span> 	// Make sure everything is valid.
</code></pre><pre class=''><code><span class='LineNumber'>592</span> 	if ( ! $meta_type || ! is_numeric( $meta_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>593</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>594</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>595</span> 
</code></pre><pre class=''><code><span class='LineNumber'>596</span> 	$meta_id = absint( $meta_id );
</code></pre><pre class=''><code><span class='LineNumber'>597</span> 	if ( ! $meta_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>598</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>599</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>600</span> 
</code></pre><pre class=''><code><span class='LineNumber'>601</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>602</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>603</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>604</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>605</span> 
</code></pre><pre class=''><code><span class='LineNumber'>606</span> 	$column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>607</span> 	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>608</span> 
</code></pre><pre class=''><code><span class='LineNumber'>609</span> 	// Fetch the meta and go on if it's found.
</code></pre><pre class=''><code><span class='LineNumber'>610</span> 	if ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>611</span> 		$original_key = $meta-&gt;meta_key;
</code></pre><pre class=''><code><span class='LineNumber'>612</span> 		$object_id = $meta-&gt;{$column};
</code></pre><pre class=''><code><span class='LineNumber'>613</span> 
</code></pre><pre class=''><code><span class='LineNumber'>614</span> 		// If a new meta_key (last parameter) was specified, change the meta key,
</code></pre><pre class=''><code><span class='LineNumber'>615</span> 		// otherwise use the original key in the update statement.
</code></pre><pre class=''><code><span class='LineNumber'>616</span> 		if ( false === $meta_key ) {
</code></pre><pre class=''><code><span class='LineNumber'>617</span> 			$meta_key = $original_key;
</code></pre><pre class=''><code><span class='LineNumber'>618</span> 		} elseif ( ! is_string( $meta_key ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>619</span> 			return false;
</code></pre><pre class=''><code><span class='LineNumber'>620</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>621</span> 
</code></pre><pre class=''><code><span class='LineNumber'>622</span> 		// Sanitize the meta
</code></pre><pre class=''><code><span class='LineNumber'>623</span> 		$_meta_value = $meta_value;
</code></pre><pre class=''><code><span class='LineNumber'>624</span> 		$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>625</span> 		$meta_value = maybe_serialize( $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>626</span> 
</code></pre><pre class=''><code><span class='LineNumber'>627</span> 		// Format the data query arguments.
</code></pre><pre class=''><code><span class='LineNumber'>628</span> 		$data = array(
</code></pre><pre class=''><code><span class='LineNumber'>629</span> 			'meta_key' =&gt; $meta_key,
</code></pre><pre class=''><code><span class='LineNumber'>630</span> 			'meta_value' =&gt; $meta_value
</code></pre><pre class=''><code><span class='LineNumber'>631</span> 		);
</code></pre><pre class=''><code><span class='LineNumber'>632</span> 
</code></pre><pre class=''><code><span class='LineNumber'>633</span> 		// Format the where query arguments.
</code></pre><pre class=''><code><span class='LineNumber'>634</span> 		$where = array();
</code></pre><pre class=''><code><span class='LineNumber'>635</span> 		$where[$id_column] = $meta_id;
</code></pre><pre class=''><code><span class='LineNumber'>636</span> 
</code></pre><pre class=''><code><span class='LineNumber'>637</span> 		/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>638</span> 		do_action( &quot;update_{$meta_type}_meta&quot;, $meta_id, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>639</span> 
</code></pre><pre class=''><code><span class='LineNumber'>640</span> 		if ( 'post' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>641</span> 			/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>642</span> 			do_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>643</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>644</span> 
</code></pre><pre class=''><code><span class='LineNumber'>645</span> 		// Run the update query, all fields in $data are %s, $where is a %d.
</code></pre><pre class=''><code><span class='LineNumber'>646</span> 		$result = $wpdb-&gt;update( $table, $data, $where, '%s', '%d' );
</code></pre><pre class=''><code><span class='LineNumber'>647</span> 		if ( ! $result )
</code></pre><pre class=''><code><span class='LineNumber'>648</span> 			return false;
</code></pre><pre class=''><code><span class='LineNumber'>649</span> 
</code></pre><pre class=''><code><span class='LineNumber'>650</span> 		// Clear the caches.
</code></pre><pre class=''><code><span class='LineNumber'>651</span> 		wp_cache_delete($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>652</span> 
</code></pre><pre class=''><code><span class='LineNumber'>653</span> 		/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>654</span> 		do_action( &quot;updated_{$meta_type}_meta&quot;, $meta_id, $object_id, $meta_key, $_meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>655</span> 
</code></pre><pre class=''><code><span class='LineNumber'>656</span> 		if ( 'post' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>657</span> 			/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>658</span> 			do_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>659</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>660</span> 
</code></pre><pre class=''><code><span class='LineNumber'>661</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>662</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>663</span> 
</code></pre><pre class=''><code><span class='LineNumber'>664</span> 	// And if the meta was not found.
</code></pre><pre class=''><code><span class='LineNumber'>665</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>666</span> }
</code></pre><pre class=''><code><span class='LineNumber'>667</span> 
</code></pre><pre class=''><code><span class='LineNumber'>668</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>669</span>  * Delete meta data by meta ID
</code></pre><pre class=''><code><span class='LineNumber'>670</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>671</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>672</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>673</span>  * @uses get_metadata_by_mid() Calls get_metadata_by_mid() to fetch the meta key, value
</code></pre><pre class=''><code><span class='LineNumber'>674</span>  *		and object_id of the given meta_id.
</code></pre><pre class=''><code><span class='LineNumber'>675</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>676</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>677</span>  * @param int $meta_id ID for a specific meta row
</code></pre><pre class=''><code><span class='LineNumber'>678</span>  * @return bool True on successful delete, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>679</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>680</span> function delete_metadata_by_mid( $meta_type, $meta_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>681</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>682</span> 
</code></pre><pre class=''><code><span class='LineNumber'>683</span> 	// Make sure everything is valid.
</code></pre><pre class=''><code><span class='LineNumber'>684</span> 	if ( ! $meta_type || ! is_numeric( $meta_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>685</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>686</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>687</span> 
</code></pre><pre class=''><code><span class='LineNumber'>688</span> 	$meta_id = absint( $meta_id );
</code></pre><pre class=''><code><span class='LineNumber'>689</span> 	if ( ! $meta_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>690</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>691</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>692</span> 
</code></pre><pre class=''><code><span class='LineNumber'>693</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>694</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>695</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>696</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>697</span> 
</code></pre><pre class=''><code><span class='LineNumber'>698</span> 	// object and id columns
</code></pre><pre class=''><code><span class='LineNumber'>699</span> 	$column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>700</span> 	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>701</span> 
</code></pre><pre class=''><code><span class='LineNumber'>702</span> 	// Fetch the meta and go on if it's found.
</code></pre><pre class=''><code><span class='LineNumber'>703</span> 	if ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>704</span> 		$object_id = $meta-&gt;{$column};
</code></pre><pre class=''><code><span class='LineNumber'>705</span> 
</code></pre><pre class=''><code><span class='LineNumber'>706</span> 		/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>707</span> 		do_action( &quot;delete_{$meta_type}_meta&quot;, (array) $meta_id, $object_id, $meta-&gt;meta_key, $meta-&gt;meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>708</span> 
</code></pre><pre class=''><code><span class='LineNumber'>709</span> 		// Old-style action.
</code></pre><pre class=''><code><span class='LineNumber'>710</span> 		if ( 'post' == $meta_type || 'comment' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>711</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>712</span> 			 * Fires immediately before deleting post or comment metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>713</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>714</span> 			 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>715</span> 			 * object type (post or comment).
</code></pre><pre class=''><code><span class='LineNumber'>716</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>717</span> 			 * @since 3.4.0
</code></pre><pre class=''><code><span class='LineNumber'>718</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>719</span> 			 * @param int $meta_id ID of the metadata entry to delete.
</code></pre><pre class=''><code><span class='LineNumber'>720</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>721</span> 			do_action( &quot;delete_{$meta_type}meta&quot;, $meta_id );
</code></pre><pre class=''><code><span class='LineNumber'>722</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>723</span> 
</code></pre><pre class=''><code><span class='LineNumber'>724</span> 		// Run the query, will return true if deleted, false otherwise
</code></pre><pre class=''><code><span class='LineNumber'>725</span> 		$result = (bool) $wpdb-&gt;delete( $table, array( $id_column =&gt; $meta_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>726</span> 
</code></pre><pre class=''><code><span class='LineNumber'>727</span> 		// Clear the caches.
</code></pre><pre class=''><code><span class='LineNumber'>728</span> 		wp_cache_delete($object_id, $meta_type . '_meta');
</code></pre><pre class=''><code><span class='LineNumber'>729</span> 
</code></pre><pre class=''><code><span class='LineNumber'>730</span> 		/** This action is documented in wp-includes/meta.php */
</code></pre><pre class=''><code><span class='LineNumber'>731</span> 		do_action( &quot;deleted_{$meta_type}_meta&quot;, (array) $meta_id, $object_id, $meta-&gt;meta_key, $meta-&gt;meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>732</span> 
</code></pre><pre class=''><code><span class='LineNumber'>733</span> 		// Old-style action.
</code></pre><pre class=''><code><span class='LineNumber'>734</span> 		if ( 'post' == $meta_type || 'comment' == $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>735</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>736</span> 			 * Fires immediately after deleting post or comment metadata of a specific type.
</code></pre><pre class=''><code><span class='LineNumber'>737</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>738</span> 			 * The dynamic portion of the hook, $meta_type, refers to the meta
</code></pre><pre class=''><code><span class='LineNumber'>739</span> 			 * object type (post or comment).
</code></pre><pre class=''><code><span class='LineNumber'>740</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>741</span> 			 * @since 3.4.0
</code></pre><pre class=''><code><span class='LineNumber'>742</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>743</span> 			 * @param int $meta_ids Deleted metadata entry ID.
</code></pre><pre class=''><code><span class='LineNumber'>744</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>745</span> 			do_action( &quot;deleted_{$meta_type}meta&quot;, $meta_id );
</code></pre><pre class=''><code><span class='LineNumber'>746</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>747</span> 
</code></pre><pre class=''><code><span class='LineNumber'>748</span> 		return $result;
</code></pre><pre class=''><code><span class='LineNumber'>749</span> 
</code></pre><pre class=''><code><span class='LineNumber'>750</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>751</span> 
</code></pre><pre class=''><code><span class='LineNumber'>752</span> 	// Meta id was not found.
</code></pre><pre class=''><code><span class='LineNumber'>753</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>754</span> }
</code></pre><pre class=''><code><span class='LineNumber'>755</span> 
</code></pre><pre class=''><code><span class='LineNumber'>756</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>757</span>  * Update the metadata cache for the specified objects.
</code></pre><pre class=''><code><span class='LineNumber'>758</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>759</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>760</span>  * @uses $wpdb WordPress database object for queries.
</code></pre><pre class=''><code><span class='LineNumber'>761</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>762</span>  * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>763</span>  * @param int|array $object_ids array or comma delimited list of object IDs to update cache for
</code></pre><pre class=''><code><span class='LineNumber'>764</span>  * @return mixed Metadata cache for the specified objects, or false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>765</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>766</span> function update_meta_cache($meta_type, $object_ids) {
</code></pre><pre class=''><code><span class='LineNumber'>767</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>768</span> 
</code></pre><pre class=''><code><span class='LineNumber'>769</span> 	if ( ! $meta_type || ! $object_ids ) {
</code></pre><pre class=''><code><span class='LineNumber'>770</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>771</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>772</span> 
</code></pre><pre class=''><code><span class='LineNumber'>773</span> 	$table = _get_meta_table( $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>774</span> 	if ( ! $table ) {
</code></pre><pre class=''><code><span class='LineNumber'>775</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>776</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>777</span> 
</code></pre><pre class=''><code><span class='LineNumber'>778</span> 	$column = sanitize_key($meta_type . '_id');
</code></pre><pre class=''><code><span class='LineNumber'>779</span> 
</code></pre><pre class=''><code><span class='LineNumber'>780</span> 	if ( !is_array($object_ids) ) {
</code></pre><pre class=''><code><span class='LineNumber'>781</span> 		$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);
</code></pre><pre class=''><code><span class='LineNumber'>782</span> 		$object_ids = explode(',', $object_ids);
</code></pre><pre class=''><code><span class='LineNumber'>783</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>784</span> 
</code></pre><pre class=''><code><span class='LineNumber'>785</span> 	$object_ids = array_map('intval', $object_ids);
</code></pre><pre class=''><code><span class='LineNumber'>786</span> 
</code></pre><pre class=''><code><span class='LineNumber'>787</span> 	$cache_key = $meta_type . '_meta';
</code></pre><pre class=''><code><span class='LineNumber'>788</span> 	$ids = array();
</code></pre><pre class=''><code><span class='LineNumber'>789</span> 	$cache = array();
</code></pre><pre class=''><code><span class='LineNumber'>790</span> 	foreach ( $object_ids as $id ) {
</code></pre><pre class=''><code><span class='LineNumber'>791</span> 		$cached_object = wp_cache_get( $id, $cache_key );
</code></pre><pre class=''><code><span class='LineNumber'>792</span> 		if ( false === $cached_object )
</code></pre><pre class=''><code><span class='LineNumber'>793</span> 			$ids[] = $id;
</code></pre><pre class=''><code><span class='LineNumber'>794</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>795</span> 			$cache[$id] = $cached_object;
</code></pre><pre class=''><code><span class='LineNumber'>796</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>797</span> 
</code></pre><pre class=''><code><span class='LineNumber'>798</span> 	if ( empty( $ids ) )
</code></pre><pre class=''><code><span class='LineNumber'>799</span> 		return $cache;
</code></pre><pre class=''><code><span class='LineNumber'>800</span> 
</code></pre><pre class=''><code><span class='LineNumber'>801</span> 	// Get meta info
</code></pre><pre class=''><code><span class='LineNumber'>802</span> 	$id_list = join( ',', $ids );
</code></pre><pre class=''><code><span class='LineNumber'>803</span> 	$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';
</code></pre><pre class=''><code><span class='LineNumber'>804</span> 	$meta_list = $wpdb-&gt;get_results( &quot;SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list) ORDER BY $id_column ASC&quot;, ARRAY_A );
</code></pre><pre class=''><code><span class='LineNumber'>805</span> 
</code></pre><pre class=''><code><span class='LineNumber'>806</span> 	if ( !empty($meta_list) ) {
</code></pre><pre class=''><code><span class='LineNumber'>807</span> 		foreach ( $meta_list as $metarow) {
</code></pre><pre class=''><code><span class='LineNumber'>808</span> 			$mpid = intval($metarow[$column]);
</code></pre><pre class=''><code><span class='LineNumber'>809</span> 			$mkey = $metarow['meta_key'];
</code></pre><pre class=''><code><span class='LineNumber'>810</span> 			$mval = $metarow['meta_value'];
</code></pre><pre class=''><code><span class='LineNumber'>811</span> 
</code></pre><pre class=''><code><span class='LineNumber'>812</span> 			// Force subkeys to be array type:
</code></pre><pre class=''><code><span class='LineNumber'>813</span> 			if ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )
</code></pre><pre class=''><code><span class='LineNumber'>814</span> 				$cache[$mpid] = array();
</code></pre><pre class=''><code><span class='LineNumber'>815</span> 			if ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )
</code></pre><pre class=''><code><span class='LineNumber'>816</span> 				$cache[$mpid][$mkey] = array();
</code></pre><pre class=''><code><span class='LineNumber'>817</span> 
</code></pre><pre class=''><code><span class='LineNumber'>818</span> 			// Add a value to the current pid/key:
</code></pre><pre class=''><code><span class='LineNumber'>819</span> 			$cache[$mpid][$mkey][] = $mval;
</code></pre><pre class=''><code><span class='LineNumber'>820</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>821</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>822</span> 
</code></pre><pre class=''><code><span class='LineNumber'>823</span> 	foreach ( $ids as $id ) {
</code></pre><pre class=''><code><span class='LineNumber'>824</span> 		if ( ! isset($cache[$id]) )
</code></pre><pre class=''><code><span class='LineNumber'>825</span> 			$cache[$id] = array();
</code></pre><pre class=''><code><span class='LineNumber'>826</span> 		wp_cache_add( $id, $cache[$id], $cache_key );
</code></pre><pre class=''><code><span class='LineNumber'>827</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>828</span> 
</code></pre><pre class=''><code><span class='LineNumber'>829</span> 	return $cache;
</code></pre><pre class=''><code><span class='LineNumber'>830</span> }
</code></pre><pre class=''><code><span class='LineNumber'>831</span> 
</code></pre><pre class=''><code><span class='LineNumber'>832</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>833</span>  * Given a meta query, generates SQL clauses to be appended to a main query
</code></pre><pre class=''><code><span class='LineNumber'>834</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>835</span>  * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>836</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>837</span>  * @see WP_Meta_Query
</code></pre><pre class=''><code><span class='LineNumber'>838</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>839</span>  * @param array $meta_query A meta query
</code></pre><pre class=''><code><span class='LineNumber'>840</span>  * @param string $type Type of meta
</code></pre><pre class=''><code><span class='LineNumber'>841</span>  * @param string $primary_table
</code></pre><pre class=''><code><span class='LineNumber'>842</span>  * @param string $primary_id_column
</code></pre><pre class=''><code><span class='LineNumber'>843</span>  * @param object $context (optional) The main query object
</code></pre><pre class=''><code><span class='LineNumber'>844</span>  * @return array( 'join' =&gt; $join_sql, 'where' =&gt; $where_sql )
</code></pre><pre class=''><code><span class='LineNumber'>845</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>846</span> function get_meta_sql( $meta_query, $type, $primary_table, $primary_id_column, $context = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>847</span> 	$meta_query_obj = new WP_Meta_Query( $meta_query );
</code></pre><pre class=''><code><span class='LineNumber'>848</span> 	return $meta_query_obj-&gt;get_sql( $type, $primary_table, $primary_id_column, $context );
</code></pre><pre class=''><code><span class='LineNumber'>849</span> }
</code></pre><pre class=''><code><span class='LineNumber'>850</span> 
</code></pre><pre class=''><code><span class='LineNumber'>851</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>852</span>  * Container class for a multiple metadata query
</code></pre><pre class=''><code><span class='LineNumber'>853</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>854</span>  * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>855</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>856</span> class WP_Meta_Query {
</code></pre><pre class=''><code><span class='LineNumber'>857</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>858</span> 	* List of metadata queries. A single query is an associative array:
</code></pre><pre class=''><code><span class='LineNumber'>859</span> 	* - 'key' string The meta key
</code></pre><pre class=''><code><span class='LineNumber'>860</span> 	* - 'value' string|array The meta value
</code></pre><pre class=''><code><span class='LineNumber'>861</span> 	* - 'compare' (optional) string How to compare the key to the value.
</code></pre><pre class=''><code><span class='LineNumber'>862</span> 	*              Possible values: '=', '!=', '&gt;', '&gt;=', '&lt;', '&lt;=', 'LIKE', 'NOT LIKE', 'IN', 'NOT IN',
</code></pre><pre class=''><code><span class='LineNumber'>863</span> 	*              'BETWEEN', 'NOT BETWEEN', 'REGEXP', 'NOT REGEXP', 'RLIKE'.
</code></pre><pre class=''><code><span class='LineNumber'>864</span> 	*              Default: '='
</code></pre><pre class=''><code><span class='LineNumber'>865</span> 	* - 'type' string (optional) The type of the value.
</code></pre><pre class=''><code><span class='LineNumber'>866</span> 	*              Possible values: 'NUMERIC', 'BINARY', 'CHAR', 'DATE', 'DATETIME', 'DECIMAL', 'SIGNED', 'TIME', 'UNSIGNED'.
</code></pre><pre class=''><code><span class='LineNumber'>867</span> 	*              Default: 'CHAR'
</code></pre><pre class=''><code><span class='LineNumber'>868</span> 	*
</code></pre><pre class=''><code><span class='LineNumber'>869</span> 	* @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>870</span> 	* @access public
</code></pre><pre class=''><code><span class='LineNumber'>871</span> 	* @var array
</code></pre><pre class=''><code><span class='LineNumber'>872</span> 	*/
</code></pre><pre class=''><code><span class='LineNumber'>873</span> 	public $queries = array();
</code></pre><pre class=''><code><span class='LineNumber'>874</span> 
</code></pre><pre class=''><code><span class='LineNumber'>875</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>876</span> 	 * The relation between the queries. Can be one of 'AND' or 'OR'.
</code></pre><pre class=''><code><span class='LineNumber'>877</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>878</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>879</span> 	 * @access public
</code></pre><pre class=''><code><span class='LineNumber'>880</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>881</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>882</span> 	public $relation;
</code></pre><pre class=''><code><span class='LineNumber'>883</span> 
</code></pre><pre class=''><code><span class='LineNumber'>884</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>885</span> 	 * Constructor
</code></pre><pre class=''><code><span class='LineNumber'>886</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>887</span> 	 * @param array $meta_query (optional) A meta query
</code></pre><pre class=''><code><span class='LineNumber'>888</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>889</span> 	public function __construct( $meta_query = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>890</span> 		if ( !$meta_query )
</code></pre><pre class=''><code><span class='LineNumber'>891</span> 			return;
</code></pre><pre class=''><code><span class='LineNumber'>892</span> 
</code></pre><pre class=''><code><span class='LineNumber'>893</span> 		if ( isset( $meta_query['relation'] ) &amp;&amp; strtoupper( $meta_query['relation'] ) == 'OR' ) {
</code></pre><pre class=''><code><span class='LineNumber'>894</span> 			$this-&gt;relation = 'OR';
</code></pre><pre class=''><code><span class='LineNumber'>895</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>896</span> 			$this-&gt;relation = 'AND';
</code></pre><pre class=''><code><span class='LineNumber'>897</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>898</span> 
</code></pre><pre class=''><code><span class='LineNumber'>899</span> 		$this-&gt;queries = array();
</code></pre><pre class=''><code><span class='LineNumber'>900</span> 
</code></pre><pre class=''><code><span class='LineNumber'>901</span> 		foreach ( $meta_query as $key =&gt; $query ) {
</code></pre><pre class=''><code><span class='LineNumber'>902</span> 			if ( ! is_array( $query ) )
</code></pre><pre class=''><code><span class='LineNumber'>903</span> 				continue;
</code></pre><pre class=''><code><span class='LineNumber'>904</span> 
</code></pre><pre class=''><code><span class='LineNumber'>905</span> 			$this-&gt;queries[] = $query;
</code></pre><pre class=''><code><span class='LineNumber'>906</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>907</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>908</span> 
</code></pre><pre class=''><code><span class='LineNumber'>909</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>910</span> 	 * Constructs a meta query based on 'meta_*' query vars
</code></pre><pre class=''><code><span class='LineNumber'>911</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>912</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>913</span> 	 * @access public
</code></pre><pre class=''><code><span class='LineNumber'>914</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>915</span> 	 * @param array $qv The query variables
</code></pre><pre class=''><code><span class='LineNumber'>916</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>917</span> 	public function parse_query_vars( $qv ) {
</code></pre><pre class=''><code><span class='LineNumber'>918</span> 		$meta_query = array();
</code></pre><pre class=''><code><span class='LineNumber'>919</span> 
</code></pre><pre class=''><code><span class='LineNumber'>920</span> 		// Simple query needs to be first for orderby=meta_value to work correctly
</code></pre><pre class=''><code><span class='LineNumber'>921</span> 		foreach ( array( 'key', 'compare', 'type' ) as $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>922</span> 			if ( !empty( $qv[ &quot;meta_$key&quot; ] ) )
</code></pre><pre class=''><code><span class='LineNumber'>923</span> 				$meta_query[0][ $key ] = $qv[ &quot;meta_$key&quot; ];
</code></pre><pre class=''><code><span class='LineNumber'>924</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>925</span> 
</code></pre><pre class=''><code><span class='LineNumber'>926</span> 		// WP_Query sets 'meta_value' = '' by default
</code></pre><pre class=''><code><span class='LineNumber'>927</span> 		if ( isset( $qv[ 'meta_value' ] ) &amp;&amp; '' !== $qv[ 'meta_value' ] &amp;&amp; ( ! is_array( $qv[ 'meta_value' ] ) || $qv[ 'meta_value' ] ) )
</code></pre><pre class=''><code><span class='LineNumber'>928</span> 			$meta_query[0]['value'] = $qv[ 'meta_value' ];
</code></pre><pre class=''><code><span class='LineNumber'>929</span> 
</code></pre><pre class=''><code><span class='LineNumber'>930</span> 		if ( !empty( $qv['meta_query'] ) &amp;&amp; is_array( $qv['meta_query'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>931</span> 			$meta_query = array_merge( $meta_query, $qv['meta_query'] );
</code></pre><pre class=''><code><span class='LineNumber'>932</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>933</span> 
</code></pre><pre class=''><code><span class='LineNumber'>934</span> 		$this-&gt;__construct( $meta_query );
</code></pre><pre class=''><code><span class='LineNumber'>935</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>936</span> 
</code></pre><pre class=''><code><span class='LineNumber'>937</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>938</span> 	 * Given a meta type, return the appropriate alias if applicable
</code></pre><pre class=''><code><span class='LineNumber'>939</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>940</span> 	 * @since 3.7.0
</code></pre><pre class=''><code><span class='LineNumber'>941</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>942</span> 	 * @param string $type MySQL type to cast meta_value
</code></pre><pre class=''><code><span class='LineNumber'>943</span> 	 * @return string MySQL type
</code></pre><pre class=''><code><span class='LineNumber'>944</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>945</span> 	public function get_cast_for_type( $type = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>946</span> 		if ( empty( $type ) )
</code></pre><pre class=''><code><span class='LineNumber'>947</span> 			return 'CHAR';
</code></pre><pre class=''><code><span class='LineNumber'>948</span> 
</code></pre><pre class=''><code><span class='LineNumber'>949</span> 		$meta_type = strtoupper( $type );
</code></pre><pre class=''><code><span class='LineNumber'>950</span> 
</code></pre><pre class=''><code><span class='LineNumber'>951</span> 		if ( ! preg_match( '/^(?:BINARY|CHAR|DATE|DATETIME|SIGNED|UNSIGNED|TIME|NUMERIC(?:\(\d+(?:,\s?\d+)?\))?|DECIMAL(?:\(\d+(?:,\s?\d+)?\))?)$/', $meta_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>952</span> 			return 'CHAR';
</code></pre><pre class=''><code><span class='LineNumber'>953</span> 
</code></pre><pre class=''><code><span class='LineNumber'>954</span> 		if ( 'NUMERIC' == $meta_type )
</code></pre><pre class=''><code><span class='LineNumber'>955</span> 			$meta_type = 'SIGNED';
</code></pre><pre class=''><code><span class='LineNumber'>956</span> 
</code></pre><pre class=''><code><span class='LineNumber'>957</span> 		return $meta_type;
</code></pre><pre class=''><code><span class='LineNumber'>958</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>959</span> 
</code></pre><pre class=''><code><span class='LineNumber'>960</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>961</span> 	 * Generates SQL clauses to be appended to a main query.
</code></pre><pre class=''><code><span class='LineNumber'>962</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>963</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>964</span> 	 * @access public
</code></pre><pre class=''><code><span class='LineNumber'>965</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>966</span> 	 * @param string $type Type of meta
</code></pre><pre class=''><code><span class='LineNumber'>967</span> 	 * @param string $primary_table
</code></pre><pre class=''><code><span class='LineNumber'>968</span> 	 * @param string $primary_id_column
</code></pre><pre class=''><code><span class='LineNumber'>969</span> 	 * @param object $context (optional) The main query object
</code></pre><pre class=''><code><span class='LineNumber'>970</span> 	 * @return array( 'join' =&gt; $join_sql, 'where' =&gt; $where_sql )
</code></pre><pre class=''><code><span class='LineNumber'>971</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>972</span> 	public function get_sql( $type, $primary_table, $primary_id_column, $context = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>973</span> 		global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>974</span> 
</code></pre><pre class=''><code><span class='LineNumber'>975</span> 		if ( ! $meta_table = _get_meta_table( $type ) )
</code></pre><pre class=''><code><span class='LineNumber'>976</span> 			return false;
</code></pre><pre class=''><code><span class='LineNumber'>977</span> 
</code></pre><pre class=''><code><span class='LineNumber'>978</span> 		$meta_id_column = sanitize_key( $type . '_id' );
</code></pre><pre class=''><code><span class='LineNumber'>979</span> 
</code></pre><pre class=''><code><span class='LineNumber'>980</span> 		$join = array();
</code></pre><pre class=''><code><span class='LineNumber'>981</span> 		$where = array();
</code></pre><pre class=''><code><span class='LineNumber'>982</span> 
</code></pre><pre class=''><code><span class='LineNumber'>983</span> 		$key_only_queries = array();
</code></pre><pre class=''><code><span class='LineNumber'>984</span> 		$queries = array();
</code></pre><pre class=''><code><span class='LineNumber'>985</span> 
</code></pre><pre class=''><code><span class='LineNumber'>986</span> 		// Split out the queries with empty arrays as value
</code></pre><pre class=''><code><span class='LineNumber'>987</span> 		foreach ( $this-&gt;queries as $k =&gt; $q ) {
</code></pre><pre class=''><code><span class='LineNumber'>988</span> 			if ( isset( $q['value'] ) &amp;&amp; is_array( $q['value'] ) &amp;&amp; empty( $q['value'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>989</span> 				$key_only_queries[$k] = $q;
</code></pre><pre class=''><code><span class='LineNumber'>990</span> 				unset( $this-&gt;queries[$k] );
</code></pre><pre class=''><code><span class='LineNumber'>991</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>992</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>993</span> 
</code></pre><pre class=''><code><span class='LineNumber'>994</span> 		// Split out the meta_key only queries (we can only do this for OR)
</code></pre><pre class=''><code><span class='LineNumber'>995</span> 		if ( 'OR' == $this-&gt;relation ) {
</code></pre><pre class=''><code><span class='LineNumber'>996</span> 			foreach ( $this-&gt;queries as $k =&gt; $q ) {
</code></pre><pre class=''><code><span class='LineNumber'>997</span> 				if ( ( empty( $q['compare'] ) || 'NOT EXISTS' != $q['compare'] ) &amp;&amp; ! array_key_exists( 'value', $q ) &amp;&amp; ! empty( $q['key'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>998</span> 					$key_only_queries[$k] = $q;
</code></pre><pre class=''><code><span class='LineNumber'>999</span> 				else
</code></pre><pre class=''><code><span class='LineNumber'>1000</span> 					$queries[$k] = $q;
</code></pre><pre class=''><code><span class='LineNumber'>1001</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1002</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>1003</span> 			$queries = $this-&gt;queries;
</code></pre><pre class=''><code><span class='LineNumber'>1004</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>1005</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1006</span> 		// Specify all the meta_key only queries in one go
</code></pre><pre class=''><code><span class='LineNumber'>1007</span> 		if ( $key_only_queries ) {
</code></pre><pre class=''><code><span class='LineNumber'>1008</span> 			$join[]  = &quot;INNER JOIN $meta_table ON $primary_table.$primary_id_column = $meta_table.$meta_id_column&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>1009</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1010</span> 			foreach ( $key_only_queries as $key =&gt; $q )
</code></pre><pre class=''><code><span class='LineNumber'>1011</span> 				$where[&quot;key-only-$key&quot;] = $wpdb-&gt;prepare( &quot;$meta_table.meta_key = %s&quot;, trim( $q['key'] ) );
</code></pre><pre class=''><code><span class='LineNumber'>1012</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>1013</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1014</span> 		foreach ( $queries as $k =&gt; $q ) {
</code></pre><pre class=''><code><span class='LineNumber'>1015</span> 			$meta_key = isset( $q['key'] ) ? trim( $q['key'] ) : '';
</code></pre><pre class=''><code><span class='LineNumber'>1016</span> 			$meta_type = $this-&gt;get_cast_for_type( isset( $q['type'] ) ? $q['type'] : '' );
</code></pre><pre class=''><code><span class='LineNumber'>1017</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1018</span> 			if ( array_key_exists( 'value', $q ) &amp;&amp; is_null( $q['value'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1019</span> 				$q['value'] = '';
</code></pre><pre class=''><code><span class='LineNumber'>1020</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1021</span> 			$meta_value = isset( $q['value'] ) ? $q['value'] : null;
</code></pre><pre class=''><code><span class='LineNumber'>1022</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1023</span> 			if ( isset( $q['compare'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1024</span> 				$meta_compare = strtoupper( $q['compare'] );
</code></pre><pre class=''><code><span class='LineNumber'>1025</span> 			else
</code></pre><pre class=''><code><span class='LineNumber'>1026</span> 				$meta_compare = is_array( $meta_value ) ? 'IN' : '=';
</code></pre><pre class=''><code><span class='LineNumber'>1027</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1028</span> 			if ( ! in_array( $meta_compare, array(
</code></pre><pre class=''><code><span class='LineNumber'>1029</span> 				'=', '!=', '&gt;', '&gt;=', '&lt;', '&lt;=',
</code></pre><pre class=''><code><span class='LineNumber'>1030</span> 				'LIKE', 'NOT LIKE',
</code></pre><pre class=''><code><span class='LineNumber'>1031</span> 				'IN', 'NOT IN',
</code></pre><pre class=''><code><span class='LineNumber'>1032</span> 				'BETWEEN', 'NOT BETWEEN',
</code></pre><pre class=''><code><span class='LineNumber'>1033</span> 				'NOT EXISTS',
</code></pre><pre class=''><code><span class='LineNumber'>1034</span> 				'REGEXP', 'NOT REGEXP', 'RLIKE'
</code></pre><pre class=''><code><span class='LineNumber'>1035</span> 			) ) )
</code></pre><pre class=''><code><span class='LineNumber'>1036</span> 				$meta_compare = '=';
</code></pre><pre class=''><code><span class='LineNumber'>1037</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1038</span> 			$i = count( $join );
</code></pre><pre class=''><code><span class='LineNumber'>1039</span> 			$alias = $i ? 'mt' . $i : $meta_table;
</code></pre><pre class=''><code><span class='LineNumber'>1040</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1041</span> 			if ( 'NOT EXISTS' == $meta_compare ) {
</code></pre><pre class=''><code><span class='LineNumber'>1042</span> 				$join[$i]  = &quot;LEFT JOIN $meta_table&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>1043</span> 				$join[$i] .= $i ? &quot; AS $alias&quot; : '';
</code></pre><pre class=''><code><span class='LineNumber'>1044</span> 				$join[$i] .= &quot; ON ($primary_table.$primary_id_column = $alias.$meta_id_column AND $alias.meta_key = '$meta_key')&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>1045</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1046</span> 				$where[$k] = ' ' . $alias . '.' . $meta_id_column . ' IS NULL';
</code></pre><pre class=''><code><span class='LineNumber'>1047</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1048</span> 				continue;
</code></pre><pre class=''><code><span class='LineNumber'>1049</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1050</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1051</span> 			$join[$i]  = &quot;INNER JOIN $meta_table&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>1052</span> 			$join[$i] .= $i ? &quot; AS $alias&quot; : '';
</code></pre><pre class=''><code><span class='LineNumber'>1053</span> 			$join[$i] .= &quot; ON ($primary_table.$primary_id_column = $alias.$meta_id_column)&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>1054</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1055</span> 			$where[$k] = '';
</code></pre><pre class=''><code><span class='LineNumber'>1056</span> 			if ( !empty( $meta_key ) )
</code></pre><pre class=''><code><span class='LineNumber'>1057</span> 				$where[$k] = $wpdb-&gt;prepare( &quot;$alias.meta_key = %s&quot;, $meta_key );
</code></pre><pre class=''><code><span class='LineNumber'>1058</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1059</span> 			if ( is_null( $meta_value ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1060</span> 				if ( empty( $where[$k] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1061</span> 					unset( $join[$i] );
</code></pre><pre class=''><code><span class='LineNumber'>1062</span> 				continue;
</code></pre><pre class=''><code><span class='LineNumber'>1063</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1064</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1065</span> 			if ( in_array( $meta_compare, array( 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1066</span> 				if ( ! is_array( $meta_value ) )
</code></pre><pre class=''><code><span class='LineNumber'>1067</span> 					$meta_value = preg_split( '/[,\s]+/', $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>1068</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1069</span> 				if ( empty( $meta_value ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1070</span> 					unset( $join[$i] );
</code></pre><pre class=''><code><span class='LineNumber'>1071</span> 					continue;
</code></pre><pre class=''><code><span class='LineNumber'>1072</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>1073</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>1074</span> 				$meta_value = trim( $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>1075</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1076</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1077</span> 			if ( 'IN' == substr( $meta_compare, -2) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1078</span> 				$meta_compare_string = '(' . substr( str_repeat( ',%s', count( $meta_value ) ), 1 ) . ')';
</code></pre><pre class=''><code><span class='LineNumber'>1079</span> 			} elseif ( 'BETWEEN' == substr( $meta_compare, -7) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1080</span> 				$meta_value = array_slice( $meta_value, 0, 2 );
</code></pre><pre class=''><code><span class='LineNumber'>1081</span> 				$meta_compare_string = '%s AND %s';
</code></pre><pre class=''><code><span class='LineNumber'>1082</span> 			} elseif ( 'LIKE' == $meta_compare || 'NOT LIKE' == $meta_compare ) {
</code></pre><pre class=''><code><span class='LineNumber'>1083</span> 				$meta_value = '%' . $wpdb-&gt;esc_like( $meta_value ) . '%';
</code></pre><pre class=''><code><span class='LineNumber'>1084</span> 				$meta_compare_string = '%s';
</code></pre><pre class=''><code><span class='LineNumber'>1085</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>1086</span> 				$meta_compare_string = '%s';
</code></pre><pre class=''><code><span class='LineNumber'>1087</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1088</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1089</span> 			if ( ! empty( $where[$k] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1090</span> 				$where[$k] .= ' AND ';
</code></pre><pre class=''><code><span class='LineNumber'>1091</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1092</span> 			$where[$k] = ' (' . $where[$k] . $wpdb-&gt;prepare( &quot;CAST($alias.meta_value AS {$meta_type}) {$meta_compare} {$meta_compare_string})&quot;, $meta_value );
</code></pre><pre class=''><code><span class='LineNumber'>1093</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>1094</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1095</span> 		$where = array_filter( $where );
</code></pre><pre class=''><code><span class='LineNumber'>1096</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1097</span> 		if ( empty( $where ) )
</code></pre><pre class=''><code><span class='LineNumber'>1098</span> 			$where = '';
</code></pre><pre class=''><code><span class='LineNumber'>1099</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>1100</span> 			$where = ' AND (' . implode( &quot;\n{$this-&gt;relation} &quot;, $where ) . ' )';
</code></pre><pre class=''><code><span class='LineNumber'>1101</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1102</span> 		$join = implode( &quot;\n&quot;, $join );
</code></pre><pre class=''><code><span class='LineNumber'>1103</span> 		if ( ! empty( $join ) )
</code></pre><pre class=''><code><span class='LineNumber'>1104</span> 			$join = ' ' . $join;
</code></pre><pre class=''><code><span class='LineNumber'>1105</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1106</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>1107</span> 		 * Filter the meta query's generated SQL.
</code></pre><pre class=''><code><span class='LineNumber'>1108</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>1109</span> 		 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>1110</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>1111</span> 		 * @param array $args {
</code></pre><pre class=''><code><span class='LineNumber'>1112</span> 		 *     An array of arguments.
</code></pre><pre class=''><code><span class='LineNumber'>1113</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>1114</span> 		 *     @type array  $clauses           Array containing the query's JOIN and WHERE clauses.
</code></pre><pre class=''><code><span class='LineNumber'>1115</span> 		 *     @type array  $queries           Array of meta queries.
</code></pre><pre class=''><code><span class='LineNumber'>1116</span> 		 *     @type string $type              Type of meta.
</code></pre><pre class=''><code><span class='LineNumber'>1117</span> 		 *     @type string $primary_table     Primary table.
</code></pre><pre class=''><code><span class='LineNumber'>1118</span> 		 *     @type string $primary_id_column Primary column ID.
</code></pre><pre class=''><code><span class='LineNumber'>1119</span> 		 *     @type object $context           The main query object.
</code></pre><pre class=''><code><span class='LineNumber'>1120</span> 		 * }
</code></pre><pre class=''><code><span class='LineNumber'>1121</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>1122</span> 		return apply_filters_ref_array( 'get_meta_sql', array( compact( 'join', 'where' ), $this-&gt;queries, $type, $primary_table, $primary_id_column, $context ) );
</code></pre><pre class=''><code><span class='LineNumber'>1123</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1124</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1125</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1126</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1127</span>  * Retrieve the name of the metadata table for the specified object type.
</code></pre><pre class=''><code><span class='LineNumber'>1128</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1129</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>1130</span>  * @uses $wpdb WordPress database object for queries.
</code></pre><pre class=''><code><span class='LineNumber'>1131</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1132</span>  * @param string $type Type of object to get metadata table for (e.g., comment, post, or user)
</code></pre><pre class=''><code><span class='LineNumber'>1133</span>  * @return mixed Metadata table name, or false if no metadata table exists
</code></pre><pre class=''><code><span class='LineNumber'>1134</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1135</span> function _get_meta_table($type) {
</code></pre><pre class=''><code><span class='LineNumber'>1136</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>1137</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1138</span> 	$table_name = $type . 'meta';
</code></pre><pre class=''><code><span class='LineNumber'>1139</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1140</span> 	if ( empty($wpdb-&gt;$table_name) )
</code></pre><pre class=''><code><span class='LineNumber'>1141</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>1142</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1143</span> 	return $wpdb-&gt;$table_name;
</code></pre><pre class=''><code><span class='LineNumber'>1144</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1145</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1146</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1147</span>  * Determine whether a meta key is protected.
</code></pre><pre class=''><code><span class='LineNumber'>1148</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1149</span>  * @since 3.1.3
</code></pre><pre class=''><code><span class='LineNumber'>1150</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1151</span>  * @param string $meta_key Meta key
</code></pre><pre class=''><code><span class='LineNumber'>1152</span>  * @return bool True if the key is protected, false otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>1153</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1154</span> function is_protected_meta( $meta_key, $meta_type = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>1155</span> 	$protected = ( '_' == $meta_key[0] );
</code></pre><pre class=''><code><span class='LineNumber'>1156</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1157</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>1158</span> 	 * Filter whether a meta key is protected.
</code></pre><pre class=''><code><span class='LineNumber'>1159</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1160</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>1161</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1162</span> 	 * @param bool   $protected Whether the key is protected. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1163</span> 	 * @param string $meta_key  Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>1164</span> 	 * @param string $meta_type Meta type.
</code></pre><pre class=''><code><span class='LineNumber'>1165</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>1166</span> 	return apply_filters( 'is_protected_meta', $protected, $meta_key, $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>1167</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1169</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1170</span>  * Sanitize meta value.
</code></pre><pre class=''><code><span class='LineNumber'>1171</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1172</span>  * @since 3.1.3
</code></pre><pre class=''><code><span class='LineNumber'>1173</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1174</span>  * @param string $meta_key Meta key
</code></pre><pre class=''><code><span class='LineNumber'>1175</span>  * @param mixed $meta_value Meta value to sanitize
</code></pre><pre class=''><code><span class='LineNumber'>1176</span>  * @param string $meta_type Type of meta
</code></pre><pre class=''><code><span class='LineNumber'>1177</span>  * @return mixed Sanitized $meta_value
</code></pre><pre class=''><code><span class='LineNumber'>1178</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1179</span> function sanitize_meta( $meta_key, $meta_value, $meta_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>1180</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1181</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>1182</span> 	 * Filter the sanitization of a specific meta key of a specific meta type.
</code></pre><pre class=''><code><span class='LineNumber'>1183</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1184</span> 	 * The dynamic portions of the hook name, $meta_type and $meta_key, refer to the
</code></pre><pre class=''><code><span class='LineNumber'>1185</span> 	 * metadata object type (comment, post, or user) and the meta key value,
</code></pre><pre class=''><code><span class='LineNumber'>1186</span> 	 * respectively.
</code></pre><pre class=''><code><span class='LineNumber'>1187</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1188</span> 	 * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>1189</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1190</span> 	 * @param mixed  $meta_value Meta value to sanitize.
</code></pre><pre class=''><code><span class='LineNumber'>1191</span> 	 * @param string $meta_key   Meta key.
</code></pre><pre class=''><code><span class='LineNumber'>1192</span> 	 * @param string $meta_type  Meta type.
</code></pre><pre class=''><code><span class='LineNumber'>1193</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>1194</span> 	return apply_filters( &quot;sanitize_{$meta_type}_meta_{$meta_key}&quot;, $meta_value, $meta_key, $meta_type );
</code></pre><pre class=''><code><span class='LineNumber'>1195</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1196</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1197</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1198</span>  * Register meta key
</code></pre><pre class=''><code><span class='LineNumber'>1199</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1200</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>1201</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1202</span>  * @param string $meta_type Type of meta
</code></pre><pre class=''><code><span class='LineNumber'>1203</span>  * @param string $meta_key Meta key
</code></pre><pre class=''><code><span class='LineNumber'>1204</span>  * @param string|array $sanitize_callback A function or method to call when sanitizing the value of $meta_key.
</code></pre><pre class=''><code><span class='LineNumber'>1205</span>  * @param string|array $auth_callback Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.
</code></pre><pre class=''><code><span class='LineNumber'>1206</span>  * @param array $args Arguments
</code></pre><pre class=''><code><span class='LineNumber'>1207</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1208</span> function register_meta( $meta_type, $meta_key, $sanitize_callback, $auth_callback = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>1209</span> 	if ( is_callable( $sanitize_callback ) )
</code></pre><pre class=''><code><span class='LineNumber'>1210</span> 		add_filter( &quot;sanitize_{$meta_type}_meta_{$meta_key}&quot;, $sanitize_callback, 10, 3 );
</code></pre><pre class=''><code><span class='LineNumber'>1211</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1212</span> 	if ( empty( $auth_callback ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1213</span> 		if ( is_protected_meta( $meta_key, $meta_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>1214</span> 			$auth_callback = '__return_false';
</code></pre><pre class=''><code><span class='LineNumber'>1215</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>1216</span> 			$auth_callback = '__return_true';
</code></pre><pre class=''><code><span class='LineNumber'>1217</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1218</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1219</span> 	if ( is_callable( $auth_callback ) )
</code></pre><pre class=''><code><span class='LineNumber'>1220</span> 		add_filter( &quot;auth_{$meta_type}_meta_{$meta_key}&quot;, $auth_callback, 10, 6 );
</code></pre><pre class=''><code><span class='LineNumber'>1221</span> }
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-includes/post.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Post functions and post utility function.
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  * @subpackage Post
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>8</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 
</code></pre><pre class=''><code><span class='LineNumber'>10</span> //
</code></pre><pre class=''><code><span class='LineNumber'>11</span> // Post Type Registration
</code></pre><pre class=''><code><span class='LineNumber'>12</span> //
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  * Creates the initial post types when 'init' action is fired.
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>18</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>19</span> function create_initial_post_types() {
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 	register_post_type( 'post', array(
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		'labels' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 			'name_admin_bar' =&gt; _x( 'Post', 'add new on admin bar' ),
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		'public'  =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 		'_builtin' =&gt; true, /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		'_edit_link' =&gt; 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		'capability_type' =&gt; 'post',
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 		'map_meta_cap' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 		'hierarchical' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 		'rewrite' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 		'query_var' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 		'delete_with_user' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 		'supports' =&gt; array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions', 'post-formats' ),
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 	register_post_type( 'page', array(
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 		'labels' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 			'name_admin_bar' =&gt; _x( 'Page', 'add new on admin bar' ),
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 		'public' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 		'publicly_queryable' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 		'_builtin' =&gt; true, /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		'_edit_link' =&gt; 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 		'capability_type' =&gt; 'page',
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 		'map_meta_cap' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 		'hierarchical' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 		'rewrite' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 		'query_var' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 		'delete_with_user' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 		'supports' =&gt; array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 	register_post_type( 'attachment', array(
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 		'labels' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 			'name' =&gt; _x('Media', 'post type general name'),
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 			'name_admin_bar' =&gt; _x( 'Media', 'add new from admin bar' ),
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 			'add_new' =&gt; _x( 'Add New', 'add new media' ),
</code></pre><pre class=''><code><span class='LineNumber'>58</span>  			'edit_item' =&gt; __( 'Edit Media' ),
</code></pre><pre class=''><code><span class='LineNumber'>59</span>  			'view_item' =&gt; __( 'View Attachment Page' ),
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 		'public' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 		'show_ui' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 		'_builtin' =&gt; true, /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 		'_edit_link' =&gt; 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 		'capability_type' =&gt; 'post',
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 		'capabilities' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 			'create_posts' =&gt; 'upload_files',
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 		'map_meta_cap' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 		'hierarchical' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 		'rewrite' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 		'query_var' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 		'show_in_nav_menus' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 		'delete_with_user' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 		'supports' =&gt; array( 'title', 'author', 'comments' ),
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 	add_post_type_support( 'attachment:audio', 'thumbnail' );
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 	add_post_type_support( 'attachment:video', 'thumbnail' );
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 	register_post_type( 'revision', array(
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 		'labels' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 			'name' =&gt; __( 'Revisions' ),
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 			'singular_name' =&gt; __( 'Revision' ),
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 		'public' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 		'_builtin' =&gt; true, /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 		'_edit_link' =&gt; 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 		'capability_type' =&gt; 'post',
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 		'map_meta_cap' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 		'hierarchical' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 		'rewrite' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 		'query_var' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 		'can_export' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 		'delete_with_user' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 		'supports' =&gt; array( 'author' ),
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 	register_post_type( 'nav_menu_item', array(
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 		'labels' =&gt; array(
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 			'name' =&gt; __( 'Navigation Menu Items' ),
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 			'singular_name' =&gt; __( 'Navigation Menu Item' ),
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 		),
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 		'public' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 		'_builtin' =&gt; true, /* internal use only. don't use this when registering your own post type. */
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 		'hierarchical' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 		'rewrite' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 		'delete_with_user' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 		'query_var' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 	register_post_status( 'publish', array(
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 		'label'       =&gt; _x( 'Published', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 		'public'      =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 		'label_count' =&gt; _n_noop( 'Published &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Published &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 	register_post_status( 'future', array(
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 		'label'       =&gt; _x( 'Scheduled', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 		'protected'   =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 		'label_count' =&gt; _n_noop('Scheduled &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Scheduled &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 	register_post_status( 'draft', array(
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 		'label'       =&gt; _x( 'Draft', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 		'protected'   =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 		'label_count' =&gt; _n_noop( 'Draft &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Drafts &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 	register_post_status( 'pending', array(
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 		'label'       =&gt; _x( 'Pending', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 		'protected'   =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 		'label_count' =&gt; _n_noop( 'Pending &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Pending &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 	register_post_status( 'private', array(
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 		'label'       =&gt; _x( 'Private', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 		'private'     =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 		'label_count' =&gt; _n_noop( 'Private &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Private &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 	register_post_status( 'trash', array(
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 		'label'       =&gt; _x( 'Trash', 'post' ),
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 		'internal'    =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 		'_builtin'    =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 		'label_count' =&gt; _n_noop( 'Trash &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Trash &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;' ),
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 		'show_in_admin_status_list' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 	register_post_status( 'auto-draft', array(
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 		'label'    =&gt; 'auto-draft',
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 		'internal' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 		'_builtin' =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 	register_post_status( 'inherit', array(
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 		'label'    =&gt; 'inherit',
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 		'internal' =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 		'_builtin' =&gt; true, /* internal use only. */
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 		'exclude_from_search' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 	) );
</code></pre><pre class=''><code><span class='LineNumber'>166</span> }
</code></pre><pre class=''><code><span class='LineNumber'>167</span> add_action( 'init', 'create_initial_post_types', 0 ); // highest priority
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>169</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>170</span>  * Retrieve attached file path based on attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>171</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>172</span>  * By default the path will go through the 'get_attached_file' filter, but
</code></pre><pre class=''><code><span class='LineNumber'>173</span>  * passing a true to the $unfiltered argument of get_attached_file() will
</code></pre><pre class=''><code><span class='LineNumber'>174</span>  * return the file path unfiltered.
</code></pre><pre class=''><code><span class='LineNumber'>175</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>176</span>  * The function works by getting the single post meta name, named
</code></pre><pre class=''><code><span class='LineNumber'>177</span>  * '_wp_attached_file' and returning it. This is a convenience function to
</code></pre><pre class=''><code><span class='LineNumber'>178</span>  * prevent looking up the meta name and provide a mechanism for sending the
</code></pre><pre class=''><code><span class='LineNumber'>179</span>  * attached filename through a filter.
</code></pre><pre class=''><code><span class='LineNumber'>180</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>181</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>182</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>183</span>  * @param int  $attachment_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>184</span>  * @param bool $unfiltered    Optional. Whether to apply filters. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>185</span>  * @return string|bool The file path to where the attached file should be, false otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>186</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>187</span> function get_attached_file( $attachment_id, $unfiltered = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 	$file = get_post_meta( $attachment_id, '_wp_attached_file', true );
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 	// If the file is relative, prepend upload dir.
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 	if ( $file &amp;&amp; 0 !== strpos($file, '/') &amp;&amp; !preg_match('|^.:\\\|', $file) &amp;&amp; ( ($uploads = wp_upload_dir()) &amp;&amp; false === $uploads['error'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 		$file = $uploads['basedir'] . &quot;/$file&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 	if ( $unfiltered )
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 		return $file;
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 	 * Filter the attached file based on the given ID.
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 	 * @param string $file          Path to attached file.
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 	 * @param int    $attachment_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 	return apply_filters( 'get_attached_file', $file, $attachment_id );
</code></pre><pre class=''><code><span class='LineNumber'>204</span> }
</code></pre><pre class=''><code><span class='LineNumber'>205</span> 
</code></pre><pre class=''><code><span class='LineNumber'>206</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>207</span>  * Update attachment file path based on attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>208</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>209</span>  * Used to update the file path of the attachment, which uses post meta name
</code></pre><pre class=''><code><span class='LineNumber'>210</span>  * '_wp_attached_file' to store the path of the attachment.
</code></pre><pre class=''><code><span class='LineNumber'>211</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>212</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>213</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>214</span>  * @param int    $attachment_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>215</span>  * @param string $file          File path for the attachment.
</code></pre><pre class=''><code><span class='LineNumber'>216</span>  * @return bool True on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>217</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>218</span> function update_attached_file( $attachment_id, $file ) {
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 	if ( !get_post( $attachment_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 	 * Filter the path to the attached file to update.
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 	 * @param string $file          Path to the attached file to update.
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 	 * @param int    $attachment_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 	$file = apply_filters( 'update_attached_file', $file, $attachment_id );
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 	if ( $file = _wp_relative_upload_path( $file ) )
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 		return update_post_meta( $attachment_id, '_wp_attached_file', $file );
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 		return delete_post_meta( $attachment_id, '_wp_attached_file' );
</code></pre><pre class=''><code><span class='LineNumber'>236</span> }
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 
</code></pre><pre class=''><code><span class='LineNumber'>238</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>239</span>  * Return relative path to an uploaded file.
</code></pre><pre class=''><code><span class='LineNumber'>240</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>241</span>  * The path is relative to the current upload dir.
</code></pre><pre class=''><code><span class='LineNumber'>242</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>243</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>244</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>245</span>  * @param string $path Full path to the file.
</code></pre><pre class=''><code><span class='LineNumber'>246</span>  * @return string Relative path on success, unchanged path on failure.
</code></pre><pre class=''><code><span class='LineNumber'>247</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>248</span> function _wp_relative_upload_path( $path ) {
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 	$new_path = $path;
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	$uploads = wp_upload_dir();
</code></pre><pre class=''><code><span class='LineNumber'>252</span> 	if ( 0 === strpos( $new_path, $uploads['basedir'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>253</span> 			$new_path = str_replace( $uploads['basedir'], '', $new_path );
</code></pre><pre class=''><code><span class='LineNumber'>254</span> 			$new_path = ltrim( $new_path, '/' );
</code></pre><pre class=''><code><span class='LineNumber'>255</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>256</span> 
</code></pre><pre class=''><code><span class='LineNumber'>257</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>258</span> 	 * Filter the relative path to an uploaded file.
</code></pre><pre class=''><code><span class='LineNumber'>259</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>260</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>261</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>262</span> 	 * @param string $new_path Relative path to the file.
</code></pre><pre class=''><code><span class='LineNumber'>263</span> 	 * @param string $path     Full path to the file.
</code></pre><pre class=''><code><span class='LineNumber'>264</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>265</span> 	return apply_filters( '_wp_relative_upload_path', $new_path, $path );
</code></pre><pre class=''><code><span class='LineNumber'>266</span> }
</code></pre><pre class=''><code><span class='LineNumber'>267</span> 
</code></pre><pre class=''><code><span class='LineNumber'>268</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>269</span>  * Retrieve all children of the post parent ID.
</code></pre><pre class=''><code><span class='LineNumber'>270</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>271</span>  * Normally, without any enhancements, the children would apply to pages. In the
</code></pre><pre class=''><code><span class='LineNumber'>272</span>  * context of the inner workings of WordPress, pages, posts, and attachments
</code></pre><pre class=''><code><span class='LineNumber'>273</span>  * share the same table, so therefore the functionality could apply to any one
</code></pre><pre class=''><code><span class='LineNumber'>274</span>  * of them. It is then noted that while this function does not work on posts, it
</code></pre><pre class=''><code><span class='LineNumber'>275</span>  * does not mean that it won't work on posts. It is recommended that you know
</code></pre><pre class=''><code><span class='LineNumber'>276</span>  * what context you wish to retrieve the children of.
</code></pre><pre class=''><code><span class='LineNumber'>277</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>278</span>  * Attachments may also be made the child of a post, so if that is an accurate
</code></pre><pre class=''><code><span class='LineNumber'>279</span>  * statement (which needs to be verified), it would then be possible to get
</code></pre><pre class=''><code><span class='LineNumber'>280</span>  * all of the attachments for a post. Attachments have since changed since
</code></pre><pre class=''><code><span class='LineNumber'>281</span>  * version 2.5, so this is most likely unaccurate, but serves generally as an
</code></pre><pre class=''><code><span class='LineNumber'>282</span>  * example of what is possible.
</code></pre><pre class=''><code><span class='LineNumber'>283</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>284</span>  * The arguments listed as defaults are for this function and also of the
</code></pre><pre class=''><code><span class='LineNumber'>285</span>  * {@link get_posts()} function. The arguments are combined with the
</code></pre><pre class=''><code><span class='LineNumber'>286</span>  * get_children defaults and are then passed to the {@link get_posts()}
</code></pre><pre class=''><code><span class='LineNumber'>287</span>  * function, which accepts additional arguments. You can replace the defaults in
</code></pre><pre class=''><code><span class='LineNumber'>288</span>  * this function, listed below and the additional arguments listed in the
</code></pre><pre class=''><code><span class='LineNumber'>289</span>  * {@link get_posts()} function.
</code></pre><pre class=''><code><span class='LineNumber'>290</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>291</span>  * The 'post_parent' is the most important argument and important attention
</code></pre><pre class=''><code><span class='LineNumber'>292</span>  * needs to be paid to the $args parameter. If you pass either an object or an
</code></pre><pre class=''><code><span class='LineNumber'>293</span>  * integer (number), then just the 'post_parent' is grabbed and everything else
</code></pre><pre class=''><code><span class='LineNumber'>294</span>  * is lost. If you don't specify any arguments, then it is assumed that you are
</code></pre><pre class=''><code><span class='LineNumber'>295</span>  * in The Loop and the post parent will be grabbed for from the current post.
</code></pre><pre class=''><code><span class='LineNumber'>296</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>297</span>  * The 'post_parent' argument is the ID to get the children. The 'numberposts'
</code></pre><pre class=''><code><span class='LineNumber'>298</span>  * is the amount of posts to retrieve that has a default of '-1', which is
</code></pre><pre class=''><code><span class='LineNumber'>299</span>  * used to get all of the posts. Giving a number higher than 0 will only
</code></pre><pre class=''><code><span class='LineNumber'>300</span>  * retrieve that amount of posts.
</code></pre><pre class=''><code><span class='LineNumber'>301</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>302</span>  * The 'post_type' and 'post_status' arguments can be used to choose what
</code></pre><pre class=''><code><span class='LineNumber'>303</span>  * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress
</code></pre><pre class=''><code><span class='LineNumber'>304</span>  * post types are 'post', 'pages', and 'attachments'. The 'post_status'
</code></pre><pre class=''><code><span class='LineNumber'>305</span>  * argument will accept any post status within the write administration panels.
</code></pre><pre class=''><code><span class='LineNumber'>306</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>307</span>  * @internal Claims made in the long description might be inaccurate.
</code></pre><pre class=''><code><span class='LineNumber'>308</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>309</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>310</span>  * @see get_posts()
</code></pre><pre class=''><code><span class='LineNumber'>311</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>312</span>  * @param mixed  $args   Optional. User defined arguments for replacing the defaults. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>313</span>  * @param string $output Optional. Constant for return type. Accepts OBJECT, ARRAY_A, ARRAY_N.
</code></pre><pre class=''><code><span class='LineNumber'>314</span>  *                       Default OBJECt.
</code></pre><pre class=''><code><span class='LineNumber'>315</span>  * @return array Array of children, where the type of each element is determined by $output parameter.
</code></pre><pre class=''><code><span class='LineNumber'>316</span>  *               Empty array on failure.
</code></pre><pre class=''><code><span class='LineNumber'>317</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>318</span> function get_children( $args = '', $output = OBJECT ) {
</code></pre><pre class=''><code><span class='LineNumber'>319</span> 	$kids = array();
</code></pre><pre class=''><code><span class='LineNumber'>320</span> 	if ( empty( $args ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>321</span> 		if ( isset( $GLOBALS['post'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>322</span> 			$args = array('post_parent' =&gt; (int) $GLOBALS['post']-&gt;post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>323</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>324</span> 			return $kids;
</code></pre><pre class=''><code><span class='LineNumber'>325</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>326</span> 	} elseif ( is_object( $args ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>327</span> 		$args = array('post_parent' =&gt; (int) $args-&gt;post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>328</span> 	} elseif ( is_numeric( $args ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>329</span> 		$args = array('post_parent' =&gt; (int) $args);
</code></pre><pre class=''><code><span class='LineNumber'>330</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>331</span> 
</code></pre><pre class=''><code><span class='LineNumber'>332</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>333</span> 		'numberposts' =&gt; -1, 'post_type' =&gt; 'any',
</code></pre><pre class=''><code><span class='LineNumber'>334</span> 		'post_status' =&gt; 'any', 'post_parent' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>335</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>336</span> 
</code></pre><pre class=''><code><span class='LineNumber'>337</span> 	$r = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>338</span> 
</code></pre><pre class=''><code><span class='LineNumber'>339</span> 	$children = get_posts( $r );
</code></pre><pre class=''><code><span class='LineNumber'>340</span> 
</code></pre><pre class=''><code><span class='LineNumber'>341</span> 	if ( ! $children )
</code></pre><pre class=''><code><span class='LineNumber'>342</span> 		return $kids;
</code></pre><pre class=''><code><span class='LineNumber'>343</span> 
</code></pre><pre class=''><code><span class='LineNumber'>344</span> 	if ( ! empty( $r['fields'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>345</span> 		return $children;
</code></pre><pre class=''><code><span class='LineNumber'>346</span> 
</code></pre><pre class=''><code><span class='LineNumber'>347</span> 	update_post_cache($children);
</code></pre><pre class=''><code><span class='LineNumber'>348</span> 
</code></pre><pre class=''><code><span class='LineNumber'>349</span> 	foreach ( $children as $key =&gt; $child )
</code></pre><pre class=''><code><span class='LineNumber'>350</span> 		$kids[$child-&gt;ID] = $children[$key];
</code></pre><pre class=''><code><span class='LineNumber'>351</span> 
</code></pre><pre class=''><code><span class='LineNumber'>352</span> 	if ( $output == OBJECT ) {
</code></pre><pre class=''><code><span class='LineNumber'>353</span> 		return $kids;
</code></pre><pre class=''><code><span class='LineNumber'>354</span> 	} elseif ( $output == ARRAY_A ) {
</code></pre><pre class=''><code><span class='LineNumber'>355</span> 		foreach ( (array) $kids as $kid )
</code></pre><pre class=''><code><span class='LineNumber'>356</span> 			$weeuns[$kid-&gt;ID] = get_object_vars($kids[$kid-&gt;ID]);
</code></pre><pre class=''><code><span class='LineNumber'>357</span> 		return $weeuns;
</code></pre><pre class=''><code><span class='LineNumber'>358</span> 	} elseif ( $output == ARRAY_N ) {
</code></pre><pre class=''><code><span class='LineNumber'>359</span> 		foreach ( (array) $kids as $kid )
</code></pre><pre class=''><code><span class='LineNumber'>360</span> 			$babes[$kid-&gt;ID] = array_values(get_object_vars($kids[$kid-&gt;ID]));
</code></pre><pre class=''><code><span class='LineNumber'>361</span> 		return $babes;
</code></pre><pre class=''><code><span class='LineNumber'>362</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>363</span> 		return $kids;
</code></pre><pre class=''><code><span class='LineNumber'>364</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>365</span> }
</code></pre><pre class=''><code><span class='LineNumber'>366</span> 
</code></pre><pre class=''><code><span class='LineNumber'>367</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>368</span>  * Get extended entry info (&lt;!--more--&gt;).
</code></pre><pre class=''><code><span class='LineNumber'>369</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>370</span>  * There should not be any space after the second dash and before the word
</code></pre><pre class=''><code><span class='LineNumber'>371</span>  * 'more'. There can be text or space(s) after the word 'more', but won't be
</code></pre><pre class=''><code><span class='LineNumber'>372</span>  * referenced.
</code></pre><pre class=''><code><span class='LineNumber'>373</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>374</span>  * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before
</code></pre><pre class=''><code><span class='LineNumber'>375</span>  * the &lt;code&gt;&lt;!--more--&gt;&lt;/code&gt;. The 'extended' key has the content after the
</code></pre><pre class=''><code><span class='LineNumber'>376</span>  * &lt;code&gt;&lt;!--more--&gt;&lt;/code&gt; comment. The 'more_text' key has the custom &quot;Read More&quot; text.
</code></pre><pre class=''><code><span class='LineNumber'>377</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>378</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>379</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>380</span>  * @param string $post Post content.
</code></pre><pre class=''><code><span class='LineNumber'>381</span>  * @return array Post before ('main'), after ('extended'), and custom readmore ('more_text').
</code></pre><pre class=''><code><span class='LineNumber'>382</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>383</span> function get_extended( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>384</span> 	//Match the new style more links.
</code></pre><pre class=''><code><span class='LineNumber'>385</span> 	if ( preg_match('/&lt;!--more(.*?)?--&gt;/', $post, $matches) ) {
</code></pre><pre class=''><code><span class='LineNumber'>386</span> 		list($main, $extended) = explode($matches[0], $post, 2);
</code></pre><pre class=''><code><span class='LineNumber'>387</span> 		$more_text = $matches[1];
</code></pre><pre class=''><code><span class='LineNumber'>388</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>389</span> 		$main = $post;
</code></pre><pre class=''><code><span class='LineNumber'>390</span> 		$extended = '';
</code></pre><pre class=''><code><span class='LineNumber'>391</span> 		$more_text = '';
</code></pre><pre class=''><code><span class='LineNumber'>392</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>393</span> 
</code></pre><pre class=''><code><span class='LineNumber'>394</span> 	//  leading and trailing whitespace.
</code></pre><pre class=''><code><span class='LineNumber'>395</span> 	$main = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $main);
</code></pre><pre class=''><code><span class='LineNumber'>396</span> 	$extended = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $extended);
</code></pre><pre class=''><code><span class='LineNumber'>397</span> 	$more_text = preg_replace('/^[\s]*(.*)[\s]*$/', '\\1', $more_text);
</code></pre><pre class=''><code><span class='LineNumber'>398</span> 
</code></pre><pre class=''><code><span class='LineNumber'>399</span> 	return array( 'main' =&gt; $main, 'extended' =&gt; $extended, 'more_text' =&gt; $more_text );
</code></pre><pre class=''><code><span class='LineNumber'>400</span> }
</code></pre><pre class=''><code><span class='LineNumber'>401</span> 
</code></pre><pre class=''><code><span class='LineNumber'>402</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>403</span>  * Retrieves post data given a post ID or post object.
</code></pre><pre class=''><code><span class='LineNumber'>404</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>405</span>  * See {@link sanitize_post()} for optional $filter values. Also, the parameter
</code></pre><pre class=''><code><span class='LineNumber'>406</span>  * $post, must be given as a variable, since it is passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>407</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>408</span>  * @since 1.5.1
</code></pre><pre class=''><code><span class='LineNumber'>409</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>410</span>  * @param int|WP_Post $post   Optional. Post ID or post object. Defaults to global $post.
</code></pre><pre class=''><code><span class='LineNumber'>411</span>  * @param string      $output Optional, default is Object. Accepts OBJECT, ARRAY_A, or ARRAY_N.
</code></pre><pre class=''><code><span class='LineNumber'>412</span>  *                            Default OBJECT.
</code></pre><pre class=''><code><span class='LineNumber'>413</span>  * @param string      $filter Optional. Type of filter to apply. Accepts 'raw', 'edit', 'db',
</code></pre><pre class=''><code><span class='LineNumber'>414</span>  *                            or 'display'. Default 'raw'.
</code></pre><pre class=''><code><span class='LineNumber'>415</span>  * @return WP_Post|null WP_Post on success or null on failure.
</code></pre><pre class=''><code><span class='LineNumber'>416</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>417</span> function get_post( $post = null, $output = OBJECT, $filter = 'raw' ) {
</code></pre><pre class=''><code><span class='LineNumber'>418</span> 	if ( empty( $post ) &amp;&amp; isset( $GLOBALS['post'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>419</span> 		$post = $GLOBALS['post'];
</code></pre><pre class=''><code><span class='LineNumber'>420</span> 
</code></pre><pre class=''><code><span class='LineNumber'>421</span> 	if ( is_a( $post, 'WP_Post' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>422</span> 		$_post = $post;
</code></pre><pre class=''><code><span class='LineNumber'>423</span> 	} elseif ( is_object( $post ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>424</span> 		if ( empty( $post-&gt;filter ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>425</span> 			$_post = sanitize_post( $post, 'raw' );
</code></pre><pre class=''><code><span class='LineNumber'>426</span> 			$_post = new WP_Post( $_post );
</code></pre><pre class=''><code><span class='LineNumber'>427</span> 		} elseif ( 'raw' == $post-&gt;filter ) {
</code></pre><pre class=''><code><span class='LineNumber'>428</span> 			$_post = new WP_Post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>429</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>430</span> 			$_post = WP_Post::get_instance( $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>431</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>432</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>433</span> 		$_post = WP_Post::get_instance( $post );
</code></pre><pre class=''><code><span class='LineNumber'>434</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>435</span> 
</code></pre><pre class=''><code><span class='LineNumber'>436</span> 	if ( ! $_post )
</code></pre><pre class=''><code><span class='LineNumber'>437</span> 		return null;
</code></pre><pre class=''><code><span class='LineNumber'>438</span> 
</code></pre><pre class=''><code><span class='LineNumber'>439</span> 	$_post = $_post-&gt;filter( $filter );
</code></pre><pre class=''><code><span class='LineNumber'>440</span> 
</code></pre><pre class=''><code><span class='LineNumber'>441</span> 	if ( $output == ARRAY_A )
</code></pre><pre class=''><code><span class='LineNumber'>442</span> 		return $_post-&gt;to_array();
</code></pre><pre class=''><code><span class='LineNumber'>443</span> 	elseif ( $output == ARRAY_N )
</code></pre><pre class=''><code><span class='LineNumber'>444</span> 		return array_values( $_post-&gt;to_array() );
</code></pre><pre class=''><code><span class='LineNumber'>445</span> 
</code></pre><pre class=''><code><span class='LineNumber'>446</span> 	return $_post;
</code></pre><pre class=''><code><span class='LineNumber'>447</span> }
</code></pre><pre class=''><code><span class='LineNumber'>448</span> 
</code></pre><pre class=''><code><span class='LineNumber'>449</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>450</span>  * WordPress Post class.
</code></pre><pre class=''><code><span class='LineNumber'>451</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>452</span>  * @since 3.5.0
</code></pre><pre class=''><code><span class='LineNumber'>453</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>454</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>455</span> final class WP_Post {
</code></pre><pre class=''><code><span class='LineNumber'>456</span> 
</code></pre><pre class=''><code><span class='LineNumber'>457</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>458</span> 	 * Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>459</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>460</span> 	 * @var int
</code></pre><pre class=''><code><span class='LineNumber'>461</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>462</span> 	public $ID;
</code></pre><pre class=''><code><span class='LineNumber'>463</span> 
</code></pre><pre class=''><code><span class='LineNumber'>464</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>465</span> 	 * ID of post author.
</code></pre><pre class=''><code><span class='LineNumber'>466</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>467</span> 	 * A numeric string, for compatibility reasons.
</code></pre><pre class=''><code><span class='LineNumber'>468</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>469</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>470</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>471</span> 	public $post_author = 0;
</code></pre><pre class=''><code><span class='LineNumber'>472</span> 
</code></pre><pre class=''><code><span class='LineNumber'>473</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>474</span> 	 * The post's local publication time.
</code></pre><pre class=''><code><span class='LineNumber'>475</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>476</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>477</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>478</span> 	public $post_date = '0000-00-00 00:00:00';
</code></pre><pre class=''><code><span class='LineNumber'>479</span> 
</code></pre><pre class=''><code><span class='LineNumber'>480</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>481</span> 	 * The post's GMT publication time.
</code></pre><pre class=''><code><span class='LineNumber'>482</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>483</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>484</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>485</span> 	public $post_date_gmt = '0000-00-00 00:00:00';
</code></pre><pre class=''><code><span class='LineNumber'>486</span> 
</code></pre><pre class=''><code><span class='LineNumber'>487</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>488</span> 	 * The post's content.
</code></pre><pre class=''><code><span class='LineNumber'>489</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>490</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>491</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>492</span> 	public $post_content = '';
</code></pre><pre class=''><code><span class='LineNumber'>493</span> 
</code></pre><pre class=''><code><span class='LineNumber'>494</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>495</span> 	 * The post's title.
</code></pre><pre class=''><code><span class='LineNumber'>496</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>497</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>498</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>499</span> 	public $post_title = '';
</code></pre><pre class=''><code><span class='LineNumber'>500</span> 
</code></pre><pre class=''><code><span class='LineNumber'>501</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>502</span> 	 * The post's excerpt.
</code></pre><pre class=''><code><span class='LineNumber'>503</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>504</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>505</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>506</span> 	public $post_excerpt = '';
</code></pre><pre class=''><code><span class='LineNumber'>507</span> 
</code></pre><pre class=''><code><span class='LineNumber'>508</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>509</span> 	 * The post's status.
</code></pre><pre class=''><code><span class='LineNumber'>510</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>511</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>512</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>513</span> 	public $post_status = 'publish';
</code></pre><pre class=''><code><span class='LineNumber'>514</span> 
</code></pre><pre class=''><code><span class='LineNumber'>515</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>516</span> 	 * Whether comments are allowed.
</code></pre><pre class=''><code><span class='LineNumber'>517</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>518</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>519</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>520</span> 	public $comment_status = 'open';
</code></pre><pre class=''><code><span class='LineNumber'>521</span> 
</code></pre><pre class=''><code><span class='LineNumber'>522</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>523</span> 	 * Whether pings are allowed.
</code></pre><pre class=''><code><span class='LineNumber'>524</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>525</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>526</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>527</span> 	public $ping_status = 'open';
</code></pre><pre class=''><code><span class='LineNumber'>528</span> 
</code></pre><pre class=''><code><span class='LineNumber'>529</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>530</span> 	 * The post's password in plain text.
</code></pre><pre class=''><code><span class='LineNumber'>531</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>532</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>533</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>534</span> 	public $post_password = '';
</code></pre><pre class=''><code><span class='LineNumber'>535</span> 
</code></pre><pre class=''><code><span class='LineNumber'>536</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>537</span> 	 * The post's slug.
</code></pre><pre class=''><code><span class='LineNumber'>538</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>539</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>540</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>541</span> 	public $post_name = '';
</code></pre><pre class=''><code><span class='LineNumber'>542</span> 
</code></pre><pre class=''><code><span class='LineNumber'>543</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>544</span> 	 * URLs queued to be pinged.
</code></pre><pre class=''><code><span class='LineNumber'>545</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>546</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>547</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>548</span> 	public $to_ping = '';
</code></pre><pre class=''><code><span class='LineNumber'>549</span> 
</code></pre><pre class=''><code><span class='LineNumber'>550</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>551</span> 	 * URLs that have been pinged.
</code></pre><pre class=''><code><span class='LineNumber'>552</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>553</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>554</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>555</span> 	public $pinged = '';
</code></pre><pre class=''><code><span class='LineNumber'>556</span> 
</code></pre><pre class=''><code><span class='LineNumber'>557</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>558</span> 	 * The post's local modified time.
</code></pre><pre class=''><code><span class='LineNumber'>559</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>560</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>561</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>562</span> 	public $post_modified = '0000-00-00 00:00:00';
</code></pre><pre class=''><code><span class='LineNumber'>563</span> 
</code></pre><pre class=''><code><span class='LineNumber'>564</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>565</span> 	 * The post's GMT modified time.
</code></pre><pre class=''><code><span class='LineNumber'>566</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>567</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>568</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>569</span> 	public $post_modified_gmt = '0000-00-00 00:00:00';
</code></pre><pre class=''><code><span class='LineNumber'>570</span> 
</code></pre><pre class=''><code><span class='LineNumber'>571</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>572</span> 	 * A utility DB field for post content.
</code></pre><pre class=''><code><span class='LineNumber'>573</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>574</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>575</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>576</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>577</span> 	public $post_content_filtered = '';
</code></pre><pre class=''><code><span class='LineNumber'>578</span> 
</code></pre><pre class=''><code><span class='LineNumber'>579</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>580</span> 	 * ID of a post's parent post.
</code></pre><pre class=''><code><span class='LineNumber'>581</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>582</span> 	 * @var int
</code></pre><pre class=''><code><span class='LineNumber'>583</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>584</span> 	public $post_parent = 0;
</code></pre><pre class=''><code><span class='LineNumber'>585</span> 
</code></pre><pre class=''><code><span class='LineNumber'>586</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>587</span> 	 * The unique identifier for a post, not necessarily a URL, used as the feed GUID.
</code></pre><pre class=''><code><span class='LineNumber'>588</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>589</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>590</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>591</span> 	public $guid = '';
</code></pre><pre class=''><code><span class='LineNumber'>592</span> 
</code></pre><pre class=''><code><span class='LineNumber'>593</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>594</span> 	 * A field used for ordering posts.
</code></pre><pre class=''><code><span class='LineNumber'>595</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>596</span> 	 * @var int
</code></pre><pre class=''><code><span class='LineNumber'>597</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>598</span> 	public $menu_order = 0;
</code></pre><pre class=''><code><span class='LineNumber'>599</span> 
</code></pre><pre class=''><code><span class='LineNumber'>600</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>601</span> 	 * The post's type, like post or page.
</code></pre><pre class=''><code><span class='LineNumber'>602</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>603</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>604</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>605</span> 	public $post_type = 'post';
</code></pre><pre class=''><code><span class='LineNumber'>606</span> 
</code></pre><pre class=''><code><span class='LineNumber'>607</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>608</span> 	 * An attachment's mime type.
</code></pre><pre class=''><code><span class='LineNumber'>609</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>610</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>611</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>612</span> 	public $post_mime_type = '';
</code></pre><pre class=''><code><span class='LineNumber'>613</span> 
</code></pre><pre class=''><code><span class='LineNumber'>614</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>615</span> 	 * Cached comment count.
</code></pre><pre class=''><code><span class='LineNumber'>616</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>617</span> 	 * A numeric string, for compatibility reasons.
</code></pre><pre class=''><code><span class='LineNumber'>618</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>619</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>620</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>621</span> 	public $comment_count = 0;
</code></pre><pre class=''><code><span class='LineNumber'>622</span> 
</code></pre><pre class=''><code><span class='LineNumber'>623</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>624</span> 	 * Stores the post object's sanitization level.
</code></pre><pre class=''><code><span class='LineNumber'>625</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>626</span> 	 * Does not correspond to a DB field.
</code></pre><pre class=''><code><span class='LineNumber'>627</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>628</span> 	 * @var string
</code></pre><pre class=''><code><span class='LineNumber'>629</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>630</span> 	public $filter;
</code></pre><pre class=''><code><span class='LineNumber'>631</span> 
</code></pre><pre class=''><code><span class='LineNumber'>632</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>633</span> 	 * Retrieve WP_Post instance.
</code></pre><pre class=''><code><span class='LineNumber'>634</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>635</span> 	 * @static
</code></pre><pre class=''><code><span class='LineNumber'>636</span> 	 * @access public
</code></pre><pre class=''><code><span class='LineNumber'>637</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>638</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>639</span> 	 * @return WP_Post|bool Post object, false otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>640</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>641</span> 	public static function get_instance( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>642</span> 		global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>643</span> 
</code></pre><pre class=''><code><span class='LineNumber'>644</span> 		$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>645</span> 		if ( ! $post_id )
</code></pre><pre class=''><code><span class='LineNumber'>646</span> 			return false;
</code></pre><pre class=''><code><span class='LineNumber'>647</span> 
</code></pre><pre class=''><code><span class='LineNumber'>648</span> 		$_post = wp_cache_get( $post_id, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>649</span> 
</code></pre><pre class=''><code><span class='LineNumber'>650</span> 		if ( ! $_post ) {
</code></pre><pre class=''><code><span class='LineNumber'>651</span> 			$_post = $wpdb-&gt;get_row( $wpdb-&gt;prepare( &quot;SELECT * FROM $wpdb-&gt;posts WHERE ID = %d LIMIT 1&quot;, $post_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>652</span> 
</code></pre><pre class=''><code><span class='LineNumber'>653</span> 			if ( ! $_post )
</code></pre><pre class=''><code><span class='LineNumber'>654</span> 				return false;
</code></pre><pre class=''><code><span class='LineNumber'>655</span> 
</code></pre><pre class=''><code><span class='LineNumber'>656</span> 			$_post = sanitize_post( $_post, 'raw' );
</code></pre><pre class=''><code><span class='LineNumber'>657</span> 			wp_cache_add( $_post-&gt;ID, $_post, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>658</span> 		} elseif ( empty( $_post-&gt;filter ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>659</span> 			$_post = sanitize_post( $_post, 'raw' );
</code></pre><pre class=''><code><span class='LineNumber'>660</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>661</span> 
</code></pre><pre class=''><code><span class='LineNumber'>662</span> 		return new WP_Post( $_post );
</code></pre><pre class=''><code><span class='LineNumber'>663</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>664</span> 
</code></pre><pre class=''><code><span class='LineNumber'>665</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>666</span> 	 * Constructor.
</code></pre><pre class=''><code><span class='LineNumber'>667</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>668</span> 	 * @param WP_Post $post Post object.
</code></pre><pre class=''><code><span class='LineNumber'>669</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>670</span> 	public function __construct( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>671</span> 		foreach ( get_object_vars( $post ) as $key =&gt; $value )
</code></pre><pre class=''><code><span class='LineNumber'>672</span> 			$this-&gt;$key = $value;
</code></pre><pre class=''><code><span class='LineNumber'>673</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>674</span> 
</code></pre><pre class=''><code><span class='LineNumber'>675</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>676</span> 	 * Isset-er.
</code></pre><pre class=''><code><span class='LineNumber'>677</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>678</span> 	 * @param string $key Property to check if set.
</code></pre><pre class=''><code><span class='LineNumber'>679</span> 	 * @return bool
</code></pre><pre class=''><code><span class='LineNumber'>680</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>681</span> 	public function __isset( $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>682</span> 		if ( 'ancestors' == $key )
</code></pre><pre class=''><code><span class='LineNumber'>683</span> 			return true;
</code></pre><pre class=''><code><span class='LineNumber'>684</span> 
</code></pre><pre class=''><code><span class='LineNumber'>685</span> 		if ( 'page_template' == $key )
</code></pre><pre class=''><code><span class='LineNumber'>686</span> 			return ( 'page' == $this-&gt;post_type );
</code></pre><pre class=''><code><span class='LineNumber'>687</span> 
</code></pre><pre class=''><code><span class='LineNumber'>688</span> 		if ( 'post_category' == $key )
</code></pre><pre class=''><code><span class='LineNumber'>689</span> 		   return true;
</code></pre><pre class=''><code><span class='LineNumber'>690</span> 
</code></pre><pre class=''><code><span class='LineNumber'>691</span> 		if ( 'tags_input' == $key )
</code></pre><pre class=''><code><span class='LineNumber'>692</span> 		   return true;
</code></pre><pre class=''><code><span class='LineNumber'>693</span> 
</code></pre><pre class=''><code><span class='LineNumber'>694</span> 		return metadata_exists( 'post', $this-&gt;ID, $key );
</code></pre><pre class=''><code><span class='LineNumber'>695</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>696</span> 
</code></pre><pre class=''><code><span class='LineNumber'>697</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>698</span> 	 * Getter.
</code></pre><pre class=''><code><span class='LineNumber'>699</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>700</span> 	 * @param string $key Key to get.
</code></pre><pre class=''><code><span class='LineNumber'>701</span> 	 * @return array|mixed
</code></pre><pre class=''><code><span class='LineNumber'>702</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>703</span> 	public function __get( $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>704</span> 		if ( 'page_template' == $key &amp;&amp; $this-&gt;__isset( $key ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>705</span> 			return get_post_meta( $this-&gt;ID, '_wp_page_template', true );
</code></pre><pre class=''><code><span class='LineNumber'>706</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>707</span> 
</code></pre><pre class=''><code><span class='LineNumber'>708</span> 		if ( 'post_category' == $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>709</span> 			if ( is_object_in_taxonomy( $this-&gt;post_type, 'category' ) )
</code></pre><pre class=''><code><span class='LineNumber'>710</span> 				$terms = get_the_terms( $this, 'category' );
</code></pre><pre class=''><code><span class='LineNumber'>711</span> 
</code></pre><pre class=''><code><span class='LineNumber'>712</span> 			if ( empty( $terms ) )
</code></pre><pre class=''><code><span class='LineNumber'>713</span> 				return array();
</code></pre><pre class=''><code><span class='LineNumber'>714</span> 
</code></pre><pre class=''><code><span class='LineNumber'>715</span> 			return wp_list_pluck( $terms, 'term_id' );
</code></pre><pre class=''><code><span class='LineNumber'>716</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>717</span> 
</code></pre><pre class=''><code><span class='LineNumber'>718</span> 		if ( 'tags_input' == $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>719</span> 			if ( is_object_in_taxonomy( $this-&gt;post_type, 'post_tag' ) )
</code></pre><pre class=''><code><span class='LineNumber'>720</span> 				$terms = get_the_terms( $this, 'post_tag' );
</code></pre><pre class=''><code><span class='LineNumber'>721</span> 
</code></pre><pre class=''><code><span class='LineNumber'>722</span> 			if ( empty( $terms ) )
</code></pre><pre class=''><code><span class='LineNumber'>723</span> 				return array();
</code></pre><pre class=''><code><span class='LineNumber'>724</span> 
</code></pre><pre class=''><code><span class='LineNumber'>725</span> 			return wp_list_pluck( $terms, 'name' );
</code></pre><pre class=''><code><span class='LineNumber'>726</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>727</span> 
</code></pre><pre class=''><code><span class='LineNumber'>728</span> 		// Rest of the values need filtering.
</code></pre><pre class=''><code><span class='LineNumber'>729</span> 		if ( 'ancestors' == $key )
</code></pre><pre class=''><code><span class='LineNumber'>730</span> 			$value = get_post_ancestors( $this );
</code></pre><pre class=''><code><span class='LineNumber'>731</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>732</span> 			$value = get_post_meta( $this-&gt;ID, $key, true );
</code></pre><pre class=''><code><span class='LineNumber'>733</span> 
</code></pre><pre class=''><code><span class='LineNumber'>734</span> 		if ( $this-&gt;filter )
</code></pre><pre class=''><code><span class='LineNumber'>735</span> 			$value = sanitize_post_field( $key, $value, $this-&gt;ID, $this-&gt;filter );
</code></pre><pre class=''><code><span class='LineNumber'>736</span> 
</code></pre><pre class=''><code><span class='LineNumber'>737</span> 		return $value;
</code></pre><pre class=''><code><span class='LineNumber'>738</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>739</span> 
</code></pre><pre class=''><code><span class='LineNumber'>740</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>741</span> 	 * {@Missing Summary}
</code></pre><pre class=''><code><span class='LineNumber'>742</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>743</span> 	 * @param string $filter Filter.
</code></pre><pre class=''><code><span class='LineNumber'>744</span> 	 * @return $this|array|bool|object|WP_Post
</code></pre><pre class=''><code><span class='LineNumber'>745</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>746</span> 	public function filter( $filter ) {
</code></pre><pre class=''><code><span class='LineNumber'>747</span> 		if ( $this-&gt;filter == $filter )
</code></pre><pre class=''><code><span class='LineNumber'>748</span> 			return $this;
</code></pre><pre class=''><code><span class='LineNumber'>749</span> 
</code></pre><pre class=''><code><span class='LineNumber'>750</span> 		if ( $filter == 'raw' )
</code></pre><pre class=''><code><span class='LineNumber'>751</span> 			return self::get_instance( $this-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>752</span> 
</code></pre><pre class=''><code><span class='LineNumber'>753</span> 		return sanitize_post( $this, $filter );
</code></pre><pre class=''><code><span class='LineNumber'>754</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>755</span> 
</code></pre><pre class=''><code><span class='LineNumber'>756</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>757</span> 	 * Convert object to array.
</code></pre><pre class=''><code><span class='LineNumber'>758</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>759</span> 	 * @return array Object as array.
</code></pre><pre class=''><code><span class='LineNumber'>760</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>761</span> 	public function to_array() {
</code></pre><pre class=''><code><span class='LineNumber'>762</span> 		$post = get_object_vars( $this );
</code></pre><pre class=''><code><span class='LineNumber'>763</span> 
</code></pre><pre class=''><code><span class='LineNumber'>764</span> 		foreach ( array( 'ancestors', 'page_template', 'post_category', 'tags_input' ) as $key ) {
</code></pre><pre class=''><code><span class='LineNumber'>765</span> 			if ( $this-&gt;__isset( $key ) )
</code></pre><pre class=''><code><span class='LineNumber'>766</span> 				$post[ $key ] = $this-&gt;__get( $key );
</code></pre><pre class=''><code><span class='LineNumber'>767</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>768</span> 
</code></pre><pre class=''><code><span class='LineNumber'>769</span> 		return $post;
</code></pre><pre class=''><code><span class='LineNumber'>770</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>771</span> }
</code></pre><pre class=''><code><span class='LineNumber'>772</span> 
</code></pre><pre class=''><code><span class='LineNumber'>773</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>774</span>  * Retrieve ancestors of a post.
</code></pre><pre class=''><code><span class='LineNumber'>775</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>776</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>777</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>778</span>  * @param int|WP_Post $post Post ID or post object.
</code></pre><pre class=''><code><span class='LineNumber'>779</span>  * @return array Ancestor IDs or empty array if none are found.
</code></pre><pre class=''><code><span class='LineNumber'>780</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>781</span> function get_post_ancestors( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>782</span> 	$post = get_post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>783</span> 
</code></pre><pre class=''><code><span class='LineNumber'>784</span> 	if ( ! $post || empty( $post-&gt;post_parent ) || $post-&gt;post_parent == $post-&gt;ID )
</code></pre><pre class=''><code><span class='LineNumber'>785</span> 		return array();
</code></pre><pre class=''><code><span class='LineNumber'>786</span> 
</code></pre><pre class=''><code><span class='LineNumber'>787</span> 	$ancestors = array();
</code></pre><pre class=''><code><span class='LineNumber'>788</span> 
</code></pre><pre class=''><code><span class='LineNumber'>789</span> 	$id = $ancestors[] = $post-&gt;post_parent;
</code></pre><pre class=''><code><span class='LineNumber'>790</span> 
</code></pre><pre class=''><code><span class='LineNumber'>791</span> 	while ( $ancestor = get_post( $id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>792</span> 		// Loop detection: If the ancestor has been seen before, break.
</code></pre><pre class=''><code><span class='LineNumber'>793</span> 		if ( empty( $ancestor-&gt;post_parent ) || ( $ancestor-&gt;post_parent == $post-&gt;ID ) || in_array( $ancestor-&gt;post_parent, $ancestors ) )
</code></pre><pre class=''><code><span class='LineNumber'>794</span> 			break;
</code></pre><pre class=''><code><span class='LineNumber'>795</span> 
</code></pre><pre class=''><code><span class='LineNumber'>796</span> 		$id = $ancestors[] = $ancestor-&gt;post_parent;
</code></pre><pre class=''><code><span class='LineNumber'>797</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>798</span> 
</code></pre><pre class=''><code><span class='LineNumber'>799</span> 	return $ancestors;
</code></pre><pre class=''><code><span class='LineNumber'>800</span> }
</code></pre><pre class=''><code><span class='LineNumber'>801</span> 
</code></pre><pre class=''><code><span class='LineNumber'>802</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>803</span>  * Retrieve data from a post field based on Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>804</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>805</span>  * Examples of the post field will be, 'post_type', 'post_status', 'post_content',
</code></pre><pre class=''><code><span class='LineNumber'>806</span>  * etc and based off of the post object property or key names.
</code></pre><pre class=''><code><span class='LineNumber'>807</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>808</span>  * The context values are based off of the taxonomy filter functions and
</code></pre><pre class=''><code><span class='LineNumber'>809</span>  * supported values are found within those functions.
</code></pre><pre class=''><code><span class='LineNumber'>810</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>811</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>812</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>813</span>  * @see sanitize_post_field()
</code></pre><pre class=''><code><span class='LineNumber'>814</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>815</span>  * @param string      $field   Post field name.
</code></pre><pre class=''><code><span class='LineNumber'>816</span>  * @param int|WP_Post $post    Post ID or post object.
</code></pre><pre class=''><code><span class='LineNumber'>817</span>  * @param string      $context Optional. How to filter the field. Accepts 'raw', 'edit', 'db',
</code></pre><pre class=''><code><span class='LineNumber'>818</span>  *                             or 'display'. Default 'display'.
</code></pre><pre class=''><code><span class='LineNumber'>819</span>  * @return string The value of the post field on success, empty string on failure.
</code></pre><pre class=''><code><span class='LineNumber'>820</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>821</span> function get_post_field( $field, $post, $context = 'display' ) {
</code></pre><pre class=''><code><span class='LineNumber'>822</span> 	$post = get_post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>823</span> 
</code></pre><pre class=''><code><span class='LineNumber'>824</span> 	if ( !$post )
</code></pre><pre class=''><code><span class='LineNumber'>825</span> 		return '';
</code></pre><pre class=''><code><span class='LineNumber'>826</span> 
</code></pre><pre class=''><code><span class='LineNumber'>827</span> 	if ( !isset($post-&gt;$field) )
</code></pre><pre class=''><code><span class='LineNumber'>828</span> 		return '';
</code></pre><pre class=''><code><span class='LineNumber'>829</span> 
</code></pre><pre class=''><code><span class='LineNumber'>830</span> 	return sanitize_post_field($field, $post-&gt;$field, $post-&gt;ID, $context);
</code></pre><pre class=''><code><span class='LineNumber'>831</span> }
</code></pre><pre class=''><code><span class='LineNumber'>832</span> 
</code></pre><pre class=''><code><span class='LineNumber'>833</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>834</span>  * Retrieve the mime type of an attachment based on the ID.
</code></pre><pre class=''><code><span class='LineNumber'>835</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>836</span>  * This function can be used with any post type, but it makes more sense with
</code></pre><pre class=''><code><span class='LineNumber'>837</span>  * attachments.
</code></pre><pre class=''><code><span class='LineNumber'>838</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>839</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>840</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>841</span>  * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>842</span>  * @return string|bool The mime type on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>843</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>844</span> function get_post_mime_type( $ID = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>845</span> 	$post = get_post($ID);
</code></pre><pre class=''><code><span class='LineNumber'>846</span> 
</code></pre><pre class=''><code><span class='LineNumber'>847</span> 	if ( is_object($post) )
</code></pre><pre class=''><code><span class='LineNumber'>848</span> 		return $post-&gt;post_mime_type;
</code></pre><pre class=''><code><span class='LineNumber'>849</span> 
</code></pre><pre class=''><code><span class='LineNumber'>850</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>851</span> }
</code></pre><pre class=''><code><span class='LineNumber'>852</span> 
</code></pre><pre class=''><code><span class='LineNumber'>853</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>854</span>  * Retrieve the post status based on the Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>855</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>856</span>  * If the post ID is of an attachment, then the parent post status will be given
</code></pre><pre class=''><code><span class='LineNumber'>857</span>  * instead.
</code></pre><pre class=''><code><span class='LineNumber'>858</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>859</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>860</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>861</span>  * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>862</span>  * @return string|bool Post status on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>863</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>864</span> function get_post_status( $ID = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>865</span> 	$post = get_post($ID);
</code></pre><pre class=''><code><span class='LineNumber'>866</span> 
</code></pre><pre class=''><code><span class='LineNumber'>867</span> 	if ( !is_object($post) )
</code></pre><pre class=''><code><span class='LineNumber'>868</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>869</span> 
</code></pre><pre class=''><code><span class='LineNumber'>870</span> 	if ( 'attachment' == $post-&gt;post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>871</span> 		if ( 'private' == $post-&gt;post_status )
</code></pre><pre class=''><code><span class='LineNumber'>872</span> 			return 'private';
</code></pre><pre class=''><code><span class='LineNumber'>873</span> 
</code></pre><pre class=''><code><span class='LineNumber'>874</span> 		// Unattached attachments are assumed to be published.
</code></pre><pre class=''><code><span class='LineNumber'>875</span> 		if ( ( 'inherit' == $post-&gt;post_status ) &amp;&amp; ( 0 == $post-&gt;post_parent) )
</code></pre><pre class=''><code><span class='LineNumber'>876</span> 			return 'publish';
</code></pre><pre class=''><code><span class='LineNumber'>877</span> 
</code></pre><pre class=''><code><span class='LineNumber'>878</span> 		// Inherit status from the parent.
</code></pre><pre class=''><code><span class='LineNumber'>879</span> 		if ( $post-&gt;post_parent &amp;&amp; ( $post-&gt;ID != $post-&gt;post_parent ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>880</span> 			$parent_post_status = get_post_status( $post-&gt;post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>881</span> 			if ( 'trash' == $parent_post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>882</span> 				return get_post_meta( $post-&gt;post_parent, '_wp_trash_meta_status', true );
</code></pre><pre class=''><code><span class='LineNumber'>883</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>884</span> 				return $parent_post_status;
</code></pre><pre class=''><code><span class='LineNumber'>885</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>886</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>887</span> 
</code></pre><pre class=''><code><span class='LineNumber'>888</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>889</span> 
</code></pre><pre class=''><code><span class='LineNumber'>890</span> 	return $post-&gt;post_status;
</code></pre><pre class=''><code><span class='LineNumber'>891</span> }
</code></pre><pre class=''><code><span class='LineNumber'>892</span> 
</code></pre><pre class=''><code><span class='LineNumber'>893</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>894</span>  * Retrieve all of the WordPress supported post statuses.
</code></pre><pre class=''><code><span class='LineNumber'>895</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>896</span>  * Posts have a limited set of valid status values, this provides the
</code></pre><pre class=''><code><span class='LineNumber'>897</span>  * post_status values and descriptions.
</code></pre><pre class=''><code><span class='LineNumber'>898</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>899</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>900</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>901</span>  * @return array List of post statuses.
</code></pre><pre class=''><code><span class='LineNumber'>902</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>903</span> function get_post_statuses() {
</code></pre><pre class=''><code><span class='LineNumber'>904</span> 	$status = array(
</code></pre><pre class=''><code><span class='LineNumber'>905</span> 		'draft'   =&gt; __( 'Draft' ),
</code></pre><pre class=''><code><span class='LineNumber'>906</span> 		'pending' =&gt; __( 'Pending Review' ),
</code></pre><pre class=''><code><span class='LineNumber'>907</span> 		'private' =&gt; __( 'Private' ),
</code></pre><pre class=''><code><span class='LineNumber'>908</span> 		'publish' =&gt; __( 'Published' )
</code></pre><pre class=''><code><span class='LineNumber'>909</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>910</span> 
</code></pre><pre class=''><code><span class='LineNumber'>911</span> 	return $status;
</code></pre><pre class=''><code><span class='LineNumber'>912</span> }
</code></pre><pre class=''><code><span class='LineNumber'>913</span> 
</code></pre><pre class=''><code><span class='LineNumber'>914</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>915</span>  * Retrieve all of the WordPress support page statuses.
</code></pre><pre class=''><code><span class='LineNumber'>916</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>917</span>  * Pages have a limited set of valid status values, this provides the
</code></pre><pre class=''><code><span class='LineNumber'>918</span>  * post_status values and descriptions.
</code></pre><pre class=''><code><span class='LineNumber'>919</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>920</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>921</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>922</span>  * @return array List of page statuses.
</code></pre><pre class=''><code><span class='LineNumber'>923</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>924</span> function get_page_statuses() {
</code></pre><pre class=''><code><span class='LineNumber'>925</span> 	$status = array(
</code></pre><pre class=''><code><span class='LineNumber'>926</span> 		'draft'   =&gt; __( 'Draft' ),
</code></pre><pre class=''><code><span class='LineNumber'>927</span> 		'private' =&gt; __( 'Private' ),
</code></pre><pre class=''><code><span class='LineNumber'>928</span> 		'publish' =&gt; __( 'Published' )
</code></pre><pre class=''><code><span class='LineNumber'>929</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>930</span> 
</code></pre><pre class=''><code><span class='LineNumber'>931</span> 	return $status;
</code></pre><pre class=''><code><span class='LineNumber'>932</span> }
</code></pre><pre class=''><code><span class='LineNumber'>933</span> 
</code></pre><pre class=''><code><span class='LineNumber'>934</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>935</span>  * Register a post status. Do not use before init.
</code></pre><pre class=''><code><span class='LineNumber'>936</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>937</span>  * A simple function for creating or modifying a post status based on the
</code></pre><pre class=''><code><span class='LineNumber'>938</span>  * parameters given. The function will accept an array (second optional
</code></pre><pre class=''><code><span class='LineNumber'>939</span>  * parameter), along with a string for the post status name.
</code></pre><pre class=''><code><span class='LineNumber'>940</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>941</span>  * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.
</code></pre><pre class=''><code><span class='LineNumber'>942</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>943</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>944</span>  * @uses $wp_post_statuses Inserts new post status object into the list
</code></pre><pre class=''><code><span class='LineNumber'>945</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>946</span>  * @param string $post_status Name of the post status.
</code></pre><pre class=''><code><span class='LineNumber'>947</span>  * @param array|string $args {
</code></pre><pre class=''><code><span class='LineNumber'>948</span>  *     Optional. Array or string of post status arguments.
</code></pre><pre class=''><code><span class='LineNumber'>949</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>950</span>  *     @type bool|string $label                     A descriptive name for the post status marked
</code></pre><pre class=''><code><span class='LineNumber'>951</span>  *                                                  for translation. Defaults to value of $post_status.
</code></pre><pre class=''><code><span class='LineNumber'>952</span>  *     @type bool|array  $label_count               Descriptive text to use for nooped plurals.
</code></pre><pre class=''><code><span class='LineNumber'>953</span>  *                                                  Default array of $label, twice
</code></pre><pre class=''><code><span class='LineNumber'>954</span>  *     @type bool        $exclude_from_search       Whether to exclude posts with this post status
</code></pre><pre class=''><code><span class='LineNumber'>955</span>  *                                                  from search results. Default is value of $internal.
</code></pre><pre class=''><code><span class='LineNumber'>956</span>  *     @type bool        $_builtin                  Whether the status is built-in. Core-use only.
</code></pre><pre class=''><code><span class='LineNumber'>957</span>  *                                                  Default false.
</code></pre><pre class=''><code><span class='LineNumber'>958</span>  *     @type bool        $public                    Whether posts of this status should be shown
</code></pre><pre class=''><code><span class='LineNumber'>959</span>  *                                                  in the front end of the site. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>960</span>  *     @type bool        $internal                  Whether the status is for internal use only.
</code></pre><pre class=''><code><span class='LineNumber'>961</span>  *                                                  Default false.
</code></pre><pre class=''><code><span class='LineNumber'>962</span>  *     @type bool        $protected                 Whether posts with this status should be protected.
</code></pre><pre class=''><code><span class='LineNumber'>963</span>  *                                                  Default false.
</code></pre><pre class=''><code><span class='LineNumber'>964</span>  *     @type bool        $private                   Whether posts with this status should be private.
</code></pre><pre class=''><code><span class='LineNumber'>965</span>  *                                                  Default false.
</code></pre><pre class=''><code><span class='LineNumber'>966</span>  *     @type bool        $publicly_queryable        Whether posts with this status should be publicly-
</code></pre><pre class=''><code><span class='LineNumber'>967</span>  *                                                  queryable. Default is value of $public.
</code></pre><pre class=''><code><span class='LineNumber'>968</span>  *     @type bool        $show_in_admin_all_list    Whether to include posts in the edit listing for
</code></pre><pre class=''><code><span class='LineNumber'>969</span>  *                                                  their post type. Default is value of $internal.
</code></pre><pre class=''><code><span class='LineNumber'>970</span>  *     @type bool        $show_in_admin_status_list Show in the list of statuses with post counts at
</code></pre><pre class=''><code><span class='LineNumber'>971</span>  *                                                  the top of the edit listings,
</code></pre><pre class=''><code><span class='LineNumber'>972</span>  *                                                  e.g. All (12) | Published (9) | My Custom Status (2)
</code></pre><pre class=''><code><span class='LineNumber'>973</span>  *                                                  Default is value of $internal.
</code></pre><pre class=''><code><span class='LineNumber'>974</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>975</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>976</span> function register_post_status( $post_status, $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>977</span> 	global $wp_post_statuses;
</code></pre><pre class=''><code><span class='LineNumber'>978</span> 
</code></pre><pre class=''><code><span class='LineNumber'>979</span> 	if (!is_array($wp_post_statuses))
</code></pre><pre class=''><code><span class='LineNumber'>980</span> 		$wp_post_statuses = array();
</code></pre><pre class=''><code><span class='LineNumber'>981</span> 
</code></pre><pre class=''><code><span class='LineNumber'>982</span> 	// Args prefixed with an underscore are reserved for internal use.
</code></pre><pre class=''><code><span class='LineNumber'>983</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>984</span> 		'label' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>985</span> 		'label_count' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>986</span> 		'exclude_from_search' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>987</span> 		'_builtin' =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>988</span> 		'public' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>989</span> 		'internal' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>990</span> 		'protected' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>991</span> 		'private' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>992</span> 		'publicly_queryable' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>993</span> 		'show_in_admin_status_list' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>994</span> 		'show_in_admin_all_list' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>995</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>996</span> 	$args = wp_parse_args($args, $defaults);
</code></pre><pre class=''><code><span class='LineNumber'>997</span> 	$args = (object) $args;
</code></pre><pre class=''><code><span class='LineNumber'>998</span> 
</code></pre><pre class=''><code><span class='LineNumber'>999</span> 	$post_status = sanitize_key($post_status);
</code></pre><pre class=''><code><span class='LineNumber'>1000</span> 	$args-&gt;name = $post_status;
</code></pre><pre class=''><code><span class='LineNumber'>1001</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1002</span> 	// Set various defaults.
</code></pre><pre class=''><code><span class='LineNumber'>1003</span> 	if ( null === $args-&gt;public &amp;&amp; null === $args-&gt;internal &amp;&amp; null === $args-&gt;protected &amp;&amp; null === $args-&gt;private )
</code></pre><pre class=''><code><span class='LineNumber'>1004</span> 		$args-&gt;internal = true;
</code></pre><pre class=''><code><span class='LineNumber'>1005</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1006</span> 	if ( null === $args-&gt;public  )
</code></pre><pre class=''><code><span class='LineNumber'>1007</span> 		$args-&gt;public = false;
</code></pre><pre class=''><code><span class='LineNumber'>1008</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1009</span> 	if ( null === $args-&gt;private  )
</code></pre><pre class=''><code><span class='LineNumber'>1010</span> 		$args-&gt;private = false;
</code></pre><pre class=''><code><span class='LineNumber'>1011</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1012</span> 	if ( null === $args-&gt;protected  )
</code></pre><pre class=''><code><span class='LineNumber'>1013</span> 		$args-&gt;protected = false;
</code></pre><pre class=''><code><span class='LineNumber'>1014</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1015</span> 	if ( null === $args-&gt;internal  )
</code></pre><pre class=''><code><span class='LineNumber'>1016</span> 		$args-&gt;internal = false;
</code></pre><pre class=''><code><span class='LineNumber'>1017</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1018</span> 	if ( null === $args-&gt;publicly_queryable )
</code></pre><pre class=''><code><span class='LineNumber'>1019</span> 		$args-&gt;publicly_queryable = $args-&gt;public;
</code></pre><pre class=''><code><span class='LineNumber'>1020</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1021</span> 	if ( null === $args-&gt;exclude_from_search )
</code></pre><pre class=''><code><span class='LineNumber'>1022</span> 		$args-&gt;exclude_from_search = $args-&gt;internal;
</code></pre><pre class=''><code><span class='LineNumber'>1023</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1024</span> 	if ( null === $args-&gt;show_in_admin_all_list )
</code></pre><pre class=''><code><span class='LineNumber'>1025</span> 		$args-&gt;show_in_admin_all_list = !$args-&gt;internal;
</code></pre><pre class=''><code><span class='LineNumber'>1026</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1027</span> 	if ( null === $args-&gt;show_in_admin_status_list )
</code></pre><pre class=''><code><span class='LineNumber'>1028</span> 		$args-&gt;show_in_admin_status_list = !$args-&gt;internal;
</code></pre><pre class=''><code><span class='LineNumber'>1029</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1030</span> 	if ( false === $args-&gt;label )
</code></pre><pre class=''><code><span class='LineNumber'>1031</span> 		$args-&gt;label = $post_status;
</code></pre><pre class=''><code><span class='LineNumber'>1032</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1033</span> 	if ( false === $args-&gt;label_count )
</code></pre><pre class=''><code><span class='LineNumber'>1034</span> 		$args-&gt;label_count = array( $args-&gt;label, $args-&gt;label );
</code></pre><pre class=''><code><span class='LineNumber'>1035</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1036</span> 	$wp_post_statuses[$post_status] = $args;
</code></pre><pre class=''><code><span class='LineNumber'>1037</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1038</span> 	return $args;
</code></pre><pre class=''><code><span class='LineNumber'>1039</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1040</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1041</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1042</span>  * Retrieve a post status object by name.
</code></pre><pre class=''><code><span class='LineNumber'>1043</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1044</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1045</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1046</span>  * @global array $wp_post_statuses List of post statuses.
</code></pre><pre class=''><code><span class='LineNumber'>1047</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1048</span>  * @see register_post_status()
</code></pre><pre class=''><code><span class='LineNumber'>1049</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1050</span>  * @param string $post_status The name of a registered post status.
</code></pre><pre class=''><code><span class='LineNumber'>1051</span>  * @return object A post status object.
</code></pre><pre class=''><code><span class='LineNumber'>1052</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1053</span> function get_post_status_object( $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>1054</span> 	global $wp_post_statuses;
</code></pre><pre class=''><code><span class='LineNumber'>1055</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1056</span> 	if ( empty($wp_post_statuses[$post_status]) )
</code></pre><pre class=''><code><span class='LineNumber'>1057</span> 		return null;
</code></pre><pre class=''><code><span class='LineNumber'>1058</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1059</span> 	return $wp_post_statuses[$post_status];
</code></pre><pre class=''><code><span class='LineNumber'>1060</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1061</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1062</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1063</span>  * Get a list of all registered post status objects.
</code></pre><pre class=''><code><span class='LineNumber'>1064</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1065</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1066</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1067</span>  * @global array $wp_post_statuses List of post statuses.
</code></pre><pre class=''><code><span class='LineNumber'>1068</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1069</span>  * @see register_post_status()
</code></pre><pre class=''><code><span class='LineNumber'>1070</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1071</span>  * @param array|string $args     Optional. Array or string of post status arguments. Default array.
</code></pre><pre class=''><code><span class='LineNumber'>1072</span>  * @param string       $output   Optional. The type of output to return. Accepts post status 'names'
</code></pre><pre class=''><code><span class='LineNumber'>1073</span>  *                               or 'objects'. Default 'names'.
</code></pre><pre class=''><code><span class='LineNumber'>1074</span>  * @param string       $operator Optional. The logical operation to perform. 'or' means only one element
</code></pre><pre class=''><code><span class='LineNumber'>1075</span>  *                               from the array needs to match; 'and' means all elements must match.
</code></pre><pre class=''><code><span class='LineNumber'>1076</span>  *                               Default 'and'.
</code></pre><pre class=''><code><span class='LineNumber'>1077</span>  * @return array A list of post status names or objects.
</code></pre><pre class=''><code><span class='LineNumber'>1078</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1079</span> function get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {
</code></pre><pre class=''><code><span class='LineNumber'>1080</span> 	global $wp_post_statuses;
</code></pre><pre class=''><code><span class='LineNumber'>1081</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1082</span> 	$field = ('names' == $output) ? 'name' : false;
</code></pre><pre class=''><code><span class='LineNumber'>1083</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1084</span> 	return wp_filter_object_list($wp_post_statuses, $args, $operator, $field);
</code></pre><pre class=''><code><span class='LineNumber'>1085</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1086</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1087</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1088</span>  * Whether the post type is hierarchical.
</code></pre><pre class=''><code><span class='LineNumber'>1089</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1090</span>  * A false return value might also mean that the post type does not exist.
</code></pre><pre class=''><code><span class='LineNumber'>1091</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1092</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1093</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1094</span>  * @see get_post_type_object()
</code></pre><pre class=''><code><span class='LineNumber'>1095</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1096</span>  * @param string $post_type Post type name
</code></pre><pre class=''><code><span class='LineNumber'>1097</span>  * @return bool Whether post type is hierarchical.
</code></pre><pre class=''><code><span class='LineNumber'>1098</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1099</span> function is_post_type_hierarchical( $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>1100</span> 	if ( ! post_type_exists( $post_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>1101</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>1102</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1103</span> 	$post_type = get_post_type_object( $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>1104</span> 	return $post_type-&gt;hierarchical;
</code></pre><pre class=''><code><span class='LineNumber'>1105</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1106</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1107</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1108</span>  * Check if a post type is registered.
</code></pre><pre class=''><code><span class='LineNumber'>1109</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1110</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1111</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1112</span>  * @see get_post_type_object()
</code></pre><pre class=''><code><span class='LineNumber'>1113</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1114</span>  * @param string $post_type Post type name.
</code></pre><pre class=''><code><span class='LineNumber'>1115</span>  * @return bool Whether post type is registered.
</code></pre><pre class=''><code><span class='LineNumber'>1116</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1117</span> function post_type_exists( $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>1118</span> 	return (bool) get_post_type_object( $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>1119</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1120</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1121</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1122</span>  * Retrieve the post type of the current post or of a given post.
</code></pre><pre class=''><code><span class='LineNumber'>1123</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1124</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>1125</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1126</span>  * @param int|WP_Post $post Optional. Post ID or post object. Default is global $post.
</code></pre><pre class=''><code><span class='LineNumber'>1127</span>  * @return string|bool Post type on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>1128</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1129</span> function get_post_type( $post = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>1130</span> 	if ( $post = get_post( $post ) )
</code></pre><pre class=''><code><span class='LineNumber'>1131</span> 		return $post-&gt;post_type;
</code></pre><pre class=''><code><span class='LineNumber'>1132</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1133</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>1134</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1135</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1136</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1137</span>  * Retrieve a post type object by name.
</code></pre><pre class=''><code><span class='LineNumber'>1138</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1139</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1140</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1141</span>  * @global array $wp_post_types List of post types.
</code></pre><pre class=''><code><span class='LineNumber'>1142</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1143</span>  * @see register_post_type()
</code></pre><pre class=''><code><span class='LineNumber'>1144</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1145</span>  * @param string $post_type The name of a registered post type.
</code></pre><pre class=''><code><span class='LineNumber'>1146</span>  * @return object A post type object.
</code></pre><pre class=''><code><span class='LineNumber'>1147</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1148</span> function get_post_type_object( $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>1149</span> 	global $wp_post_types;
</code></pre><pre class=''><code><span class='LineNumber'>1150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1151</span> 	if ( empty($wp_post_types[$post_type]) )
</code></pre><pre class=''><code><span class='LineNumber'>1152</span> 		return null;
</code></pre><pre class=''><code><span class='LineNumber'>1153</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1154</span> 	return $wp_post_types[$post_type];
</code></pre><pre class=''><code><span class='LineNumber'>1155</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1156</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1157</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1158</span>  * Get a list of all registered post type objects.
</code></pre><pre class=''><code><span class='LineNumber'>1159</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1160</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>1161</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1162</span>  * @global array $wp_post_types List of post types.
</code></pre><pre class=''><code><span class='LineNumber'>1163</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1164</span>  * @see register_post_type()
</code></pre><pre class=''><code><span class='LineNumber'>1165</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1166</span>  * @param array|string $args     Optional. An array of key =&gt; value arguments to match against
</code></pre><pre class=''><code><span class='LineNumber'>1167</span>  *                               the post type objects. Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>1168</span>  * @param string       $output   Optional. The type of output to return. Accepts post type 'names'
</code></pre><pre class=''><code><span class='LineNumber'>1169</span>  *                               or 'objects'. Default 'names'.
</code></pre><pre class=''><code><span class='LineNumber'>1170</span>  * @param string       $operator Optaionl. The logical operation to perform. 'or' means only one
</code></pre><pre class=''><code><span class='LineNumber'>1171</span>  *                               element from the array needs to match; 'and' means all elements
</code></pre><pre class=''><code><span class='LineNumber'>1172</span>  *                               must match. Default 'and'.
</code></pre><pre class=''><code><span class='LineNumber'>1173</span>  * @return array A list of post type names or objects.
</code></pre><pre class=''><code><span class='LineNumber'>1174</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1175</span> function get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {
</code></pre><pre class=''><code><span class='LineNumber'>1176</span> 	global $wp_post_types;
</code></pre><pre class=''><code><span class='LineNumber'>1177</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1178</span> 	$field = ('names' == $output) ? 'name' : false;
</code></pre><pre class=''><code><span class='LineNumber'>1179</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1180</span> 	return wp_filter_object_list($wp_post_types, $args, $operator, $field);
</code></pre><pre class=''><code><span class='LineNumber'>1181</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1182</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1183</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1184</span>  * Register a post type. Do not use before init.
</code></pre><pre class=''><code><span class='LineNumber'>1185</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1186</span>  * A function for creating or modifying a post type based on the
</code></pre><pre class=''><code><span class='LineNumber'>1187</span>  * parameters given. The function will accept an array (second optional
</code></pre><pre class=''><code><span class='LineNumber'>1188</span>  * parameter), along with a string for the post type name.
</code></pre><pre class=''><code><span class='LineNumber'>1189</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1190</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>1191</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1192</span>  * @global array      $wp_post_types List of post types.
</code></pre><pre class=''><code><span class='LineNumber'>1193</span>  * @global WP_Rewrite $wp_rewrite    Used for default feeds.
</code></pre><pre class=''><code><span class='LineNumber'>1194</span>  * @global WP         $wp            Used to add query vars.
</code></pre><pre class=''><code><span class='LineNumber'>1195</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1196</span>  * @param string $post_type Post type key, must not exceed 20 characters.
</code></pre><pre class=''><code><span class='LineNumber'>1197</span>  * @param array|string $args {
</code></pre><pre class=''><code><span class='LineNumber'>1198</span>  *     Array or string of arguments for registering a post type.
</code></pre><pre class=''><code><span class='LineNumber'>1199</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1200</span>  *     @type string      $label                Name of the post type shown in the menu. Usually plural.
</code></pre><pre class=''><code><span class='LineNumber'>1201</span>  *                                             Default is value of $labels['name'].
</code></pre><pre class=''><code><span class='LineNumber'>1202</span>  *     @type array       $labels               An array of labels for this post type. If not set, post
</code></pre><pre class=''><code><span class='LineNumber'>1203</span>  *                                             labels are inherited for non-hierarchical types and page
</code></pre><pre class=''><code><span class='LineNumber'>1204</span>  *                                             labels for hierarchical ones. {@see get_post_type_labels()}.
</code></pre><pre class=''><code><span class='LineNumber'>1205</span>  *     @type string      $description          A short descriptive summary of what the post type is.
</code></pre><pre class=''><code><span class='LineNumber'>1206</span>  *                                             Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>1207</span>  *     @type bool        $public               Whether a post type is intended for use publicly either via
</code></pre><pre class=''><code><span class='LineNumber'>1208</span>  *                                             the admin interface or by front-end users. While the default
</code></pre><pre class=''><code><span class='LineNumber'>1209</span>  *                                             settings of $exclude_from_search, $publicly_queryable, $show_ui,
</code></pre><pre class=''><code><span class='LineNumber'>1210</span>  *                                             and $show_in_nav_menus are inherited from public, each does not
</code></pre><pre class=''><code><span class='LineNumber'>1211</span>  *                                             rely on this relationship and controls a very specific intention.
</code></pre><pre class=''><code><span class='LineNumber'>1212</span>  *                                             Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1213</span>  *     @type bool        $hierarchical         Whether the post type is hierarchical (e.g. page). Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1214</span>  *     @type bool        $exclude_from_search  Whether to exclude posts with this post type from front end search
</code></pre><pre class=''><code><span class='LineNumber'>1215</span>  *                                             results. Default is the opposite value of $public.
</code></pre><pre class=''><code><span class='LineNumber'>1216</span>  *     @type bool        $publicly_queryable   Whether queries can be performed on the front end for the post type
</code></pre><pre class=''><code><span class='LineNumber'>1217</span>  *                                             as part of {@see parse_request()}. Endpoints would include:
</code></pre><pre class=''><code><span class='LineNumber'>1218</span>  *                                             * ?post_type={post_type_key}
</code></pre><pre class=''><code><span class='LineNumber'>1219</span>  *                                             * ?{post_type_key}={single_post_slug}
</code></pre><pre class=''><code><span class='LineNumber'>1220</span>  *                                             * ?{post_type_query_var}={single_post_slug}
</code></pre><pre class=''><code><span class='LineNumber'>1221</span>  *                                             If not set, the default is inherited from $public.
</code></pre><pre class=''><code><span class='LineNumber'>1222</span>  *     @type bool        $show_ui              Whether to generate a default UI for managing this post type in the
</code></pre><pre class=''><code><span class='LineNumber'>1223</span>  *                                             admin. Default is value of $public.
</code></pre><pre class=''><code><span class='LineNumber'>1224</span>  *     @type bool        $show_in_menu         Where to show the post type in the admin menu. To work, $show_ui
</code></pre><pre class=''><code><span class='LineNumber'>1225</span>  *                                             must be true. If true, the post type is shown in its own top level
</code></pre><pre class=''><code><span class='LineNumber'>1226</span>  *                                             menu. If false, no menu is shown. If a string of an existing top
</code></pre><pre class=''><code><span class='LineNumber'>1227</span>  *                                             level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post
</code></pre><pre class=''><code><span class='LineNumber'>1228</span>  *                                             type will be placed as a sub-menu of that.
</code></pre><pre class=''><code><span class='LineNumber'>1229</span>  *                                             Default is value of $show_ui.
</code></pre><pre class=''><code><span class='LineNumber'>1230</span>  *     @type bool        $show_in_nav_menus    Makes this post type available for selection in navigation menus.
</code></pre><pre class=''><code><span class='LineNumber'>1231</span>  *                                             Default is value $public.
</code></pre><pre class=''><code><span class='LineNumber'>1232</span>  *     @type bool        $show_in_admin_bar    Makes this post type available via the admin bar. Default is value
</code></pre><pre class=''><code><span class='LineNumber'>1233</span>  *                                             of $show_in_menu.
</code></pre><pre class=''><code><span class='LineNumber'>1234</span>  *     @type int         $menu_position        The position in the menu order the post type should appear. To work,
</code></pre><pre class=''><code><span class='LineNumber'>1235</span>  *                                             $show_in_menu must be true. Default null (at the bottom).
</code></pre><pre class=''><code><span class='LineNumber'>1236</span>  *     @type string      $menu_icon            The url to the icon to be used for this menu. Pass a base64-encoded
</code></pre><pre class=''><code><span class='LineNumber'>1237</span>  *                                             SVG using a data URI, which will be colored to match the color scheme
</code></pre><pre class=''><code><span class='LineNumber'>1238</span>  *                                             -- this should begin with 'data:image/svg+xml;base64,'. Pass the name
</code></pre><pre class=''><code><span class='LineNumber'>1239</span>  *                                             of a Dashicons helper class to use a font icon, e.g.
</code></pre><pre class=''><code><span class='LineNumber'>1240</span>  *                                             'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty
</code></pre><pre class=''><code><span class='LineNumber'>1241</span>  *                                             so an icon can be added via CSS. Defaults to use the posts icon.
</code></pre><pre class=''><code><span class='LineNumber'>1242</span>  *     @type string      $capability_type      The string to use to build the read, edit, and delete capabilities.
</code></pre><pre class=''><code><span class='LineNumber'>1243</span>  *                                             May be passed as an array to allow for alternative plurals when using
</code></pre><pre class=''><code><span class='LineNumber'>1244</span>  *                                             this argument as a base to construct the capabilities, e.g.
</code></pre><pre class=''><code><span class='LineNumber'>1245</span>  *                                             array('story', 'stories'). Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>1246</span>  *     @type array       $capabilities         Array of capabilities for this post type. $capability_type is used
</code></pre><pre class=''><code><span class='LineNumber'>1247</span>  *                                             as a base to construct capabilities by default.
</code></pre><pre class=''><code><span class='LineNumber'>1248</span>  *                                             {@see get_post_type_capabilities()}.
</code></pre><pre class=''><code><span class='LineNumber'>1249</span>  *     @type bool        $map_meta_cap         Whether to use the internal default meta capability handling.
</code></pre><pre class=''><code><span class='LineNumber'>1250</span>  *                                             Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1251</span>  *     @type array       $supports             An alias for calling {@see add_post_type_support()} directly.
</code></pre><pre class=''><code><span class='LineNumber'>1252</span>  *                                             Defaults to array containing 'title' &amp; 'editor'.
</code></pre><pre class=''><code><span class='LineNumber'>1253</span>  *     @type callback    $register_meta_box_cb Provide a callback function that sets up the meta boxes for the
</code></pre><pre class=''><code><span class='LineNumber'>1254</span>  *                                             edit form. Do remove_meta_box() and add_meta_box() calls in the
</code></pre><pre class=''><code><span class='LineNumber'>1255</span>  *                                             callback. Default null.
</code></pre><pre class=''><code><span class='LineNumber'>1256</span>  *     @type array       $taxonomies           An array of taxonomy identifiers that will be registered for the
</code></pre><pre class=''><code><span class='LineNumber'>1257</span>  *                                             post type. Taxonomies can be registered later with
</code></pre><pre class=''><code><span class='LineNumber'>1258</span>  *                                             {@see register_taxonomy()} or {@see register_taxonomy_for_object_type()}.
</code></pre><pre class=''><code><span class='LineNumber'>1259</span>  *                                             Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>1260</span>  *     @type bool|string $has_archive          Whether there should be post type archives, or if a string, the
</code></pre><pre class=''><code><span class='LineNumber'>1261</span>  *                                             archive slug to use. Will generate the proper rewrite rules if
</code></pre><pre class=''><code><span class='LineNumber'>1262</span>  *                                             $rewrite is enabled. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1263</span>  *     @type bool|array  $rewrite              {
</code></pre><pre class=''><code><span class='LineNumber'>1264</span>  *         Triggers the handling of rewrites for this post type. To prevent rewrite, set to false.
</code></pre><pre class=''><code><span class='LineNumber'>1265</span>  *         Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be
</code></pre><pre class=''><code><span class='LineNumber'>1266</span>  *         passed with any of these keys:
</code></pre><pre class=''><code><span class='LineNumber'>1267</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1268</span>  *         @type string $slug       Customize the permastruct slug. Defaults to $post_type key.
</code></pre><pre class=''><code><span class='LineNumber'>1269</span>  *         @type bool   $with_front Whether the permastruct should be prepended with WP_Rewrite::$front.
</code></pre><pre class=''><code><span class='LineNumber'>1270</span>  *                                  Default true.
</code></pre><pre class=''><code><span class='LineNumber'>1271</span>  *         @type bool   $feeds      Whether the feed permastruct should be built for this post type.
</code></pre><pre class=''><code><span class='LineNumber'>1272</span>  *                                  Default is value of $has_archive.
</code></pre><pre class=''><code><span class='LineNumber'>1273</span>  *         @type bool   $pages      Whether the permastruct should provide for pagination. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>1274</span>  *         @type const  $ep_mask    Endpoint mask to assign. If not specified and permalink_epmask is set,
</code></pre><pre class=''><code><span class='LineNumber'>1275</span>  *                                  inherits from $permalink_epmask. If not specified and permalink_epmask
</code></pre><pre class=''><code><span class='LineNumber'>1276</span>  *                                  is not set, defaults to EP_PERMALINK.
</code></pre><pre class=''><code><span class='LineNumber'>1277</span>  *     }
</code></pre><pre class=''><code><span class='LineNumber'>1278</span>  *     @type string|bool $query_var            Sets the query_var key for this post type. Defaults to $post_type
</code></pre><pre class=''><code><span class='LineNumber'>1279</span>  *                                             key. If false, a post type cannot be loaded at
</code></pre><pre class=''><code><span class='LineNumber'>1280</span>  *                                             ?{query_var}={post_slug}. If specified as a string, the query
</code></pre><pre class=''><code><span class='LineNumber'>1281</span>  *                                             ?{query_var_string}={post_slug} will be valid.
</code></pre><pre class=''><code><span class='LineNumber'>1282</span>  *     @type bool        $can_export           Whether to allow this post type to be exported. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>1283</span>  *     @type bool        $delete_with_user     Whether to delete posts of this type when deleting a user. If true,
</code></pre><pre class=''><code><span class='LineNumber'>1284</span>  *                                             posts of this type belonging to the user will be moved to trash
</code></pre><pre class=''><code><span class='LineNumber'>1285</span>  *                                             when then user is deleted. If false, posts of this type belonging
</code></pre><pre class=''><code><span class='LineNumber'>1286</span>  *                                             to the user will *not* be trashed or deleted. If not set (the default),
</code></pre><pre class=''><code><span class='LineNumber'>1287</span>  *                                             posts are trashed if post_type_supports('author'). Otherwise posts
</code></pre><pre class=''><code><span class='LineNumber'>1288</span>  *                                             are not trashed or deleted. Default null.
</code></pre><pre class=''><code><span class='LineNumber'>1289</span>  *     @type bool        $_builtin             FOR INTERNAL USE ONLY! True if this post type is a native or
</code></pre><pre class=''><code><span class='LineNumber'>1290</span>  *                                             &quot;built-in&quot; post_type. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1291</span>  *     @type string      $_edit_link           FOR INTERNAL USE ONLY! URL segment to use for edit link of
</code></pre><pre class=''><code><span class='LineNumber'>1292</span>  *                                             this post type. Default 'post.php?post=%d'.
</code></pre><pre class=''><code><span class='LineNumber'>1293</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>1294</span>  * @return object|WP_Error The registered post type object, or an error object.
</code></pre><pre class=''><code><span class='LineNumber'>1295</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1296</span> function register_post_type( $post_type, $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>1297</span> 	global $wp_post_types, $wp_rewrite, $wp;
</code></pre><pre class=''><code><span class='LineNumber'>1298</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1299</span> 	if ( ! is_array( $wp_post_types ) )
</code></pre><pre class=''><code><span class='LineNumber'>1300</span> 		$wp_post_types = array();
</code></pre><pre class=''><code><span class='LineNumber'>1301</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1302</span> 	// Args prefixed with an underscore are reserved for internal use.
</code></pre><pre class=''><code><span class='LineNumber'>1303</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>1304</span> 		'labels'               =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>1305</span> 		'description'          =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>1306</span> 		'public'               =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>1307</span> 		'hierarchical'         =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>1308</span> 		'exclude_from_search'  =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1309</span> 		'publicly_queryable'   =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1310</span> 		'show_ui'              =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1311</span> 		'show_in_menu'         =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1312</span> 		'show_in_nav_menus'    =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1313</span> 		'show_in_admin_bar'    =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1314</span> 		'menu_position'        =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1315</span> 		'menu_icon'            =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1316</span> 		'capability_type'      =&gt; 'post',
</code></pre><pre class=''><code><span class='LineNumber'>1317</span> 		'capabilities'         =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>1318</span> 		'map_meta_cap'         =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1319</span> 		'supports'             =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>1320</span> 		'register_meta_box_cb' =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1321</span> 		'taxonomies'           =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>1322</span> 		'has_archive'          =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>1323</span> 		'rewrite'              =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>1324</span> 		'query_var'            =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>1325</span> 		'can_export'           =&gt; true,
</code></pre><pre class=''><code><span class='LineNumber'>1326</span> 		'delete_with_user'     =&gt; null,
</code></pre><pre class=''><code><span class='LineNumber'>1327</span> 		'_builtin'             =&gt; false,
</code></pre><pre class=''><code><span class='LineNumber'>1328</span> 		'_edit_link'           =&gt; 'post.php?post=%d',
</code></pre><pre class=''><code><span class='LineNumber'>1329</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>1330</span> 	$args = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>1331</span> 	$args = (object) $args;
</code></pre><pre class=''><code><span class='LineNumber'>1332</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1333</span> 	$post_type = sanitize_key( $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>1334</span> 	$args-&gt;name = $post_type;
</code></pre><pre class=''><code><span class='LineNumber'>1335</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1336</span> 	if ( strlen( $post_type ) &gt; 20 ) {
</code></pre><pre class=''><code><span class='LineNumber'>1337</span> 		_doing_it_wrong( __FUNCTION__, __( 'Post types cannot exceed 20 characters in length' ), '4.0' );
</code></pre><pre class=''><code><span class='LineNumber'>1338</span> 		return new WP_Error( 'post_type_too_long', __( 'Post types cannot exceed 20 characters in length' ) );
</code></pre><pre class=''><code><span class='LineNumber'>1339</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1340</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1341</span> 	// If not set, default to the setting for public.
</code></pre><pre class=''><code><span class='LineNumber'>1342</span> 	if ( null === $args-&gt;publicly_queryable )
</code></pre><pre class=''><code><span class='LineNumber'>1343</span> 		$args-&gt;publicly_queryable = $args-&gt;public;
</code></pre><pre class=''><code><span class='LineNumber'>1344</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1345</span> 	// If not set, default to the setting for public.
</code></pre><pre class=''><code><span class='LineNumber'>1346</span> 	if ( null === $args-&gt;show_ui )
</code></pre><pre class=''><code><span class='LineNumber'>1347</span> 		$args-&gt;show_ui = $args-&gt;public;
</code></pre><pre class=''><code><span class='LineNumber'>1348</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1349</span> 	// If not set, default to the setting for show_ui.
</code></pre><pre class=''><code><span class='LineNumber'>1350</span> 	if ( null === $args-&gt;show_in_menu || ! $args-&gt;show_ui )
</code></pre><pre class=''><code><span class='LineNumber'>1351</span> 		$args-&gt;show_in_menu = $args-&gt;show_ui;
</code></pre><pre class=''><code><span class='LineNumber'>1352</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1353</span> 	// If not set, default to the whether the full UI is shown.
</code></pre><pre class=''><code><span class='LineNumber'>1354</span> 	if ( null === $args-&gt;show_in_admin_bar )
</code></pre><pre class=''><code><span class='LineNumber'>1355</span> 		$args-&gt;show_in_admin_bar = true === $args-&gt;show_in_menu;
</code></pre><pre class=''><code><span class='LineNumber'>1356</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1357</span> 	// If not set, default to the setting for public.
</code></pre><pre class=''><code><span class='LineNumber'>1358</span> 	if ( null === $args-&gt;show_in_nav_menus )
</code></pre><pre class=''><code><span class='LineNumber'>1359</span> 		$args-&gt;show_in_nav_menus = $args-&gt;public;
</code></pre><pre class=''><code><span class='LineNumber'>1360</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1361</span> 	// If not set, default to true if not public, false if public.
</code></pre><pre class=''><code><span class='LineNumber'>1362</span> 	if ( null === $args-&gt;exclude_from_search )
</code></pre><pre class=''><code><span class='LineNumber'>1363</span> 		$args-&gt;exclude_from_search = !$args-&gt;public;
</code></pre><pre class=''><code><span class='LineNumber'>1364</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1365</span> 	// Back compat with quirky handling in version 3.0. #14122.
</code></pre><pre class=''><code><span class='LineNumber'>1366</span> 	if ( empty( $args-&gt;capabilities ) &amp;&amp; null === $args-&gt;map_meta_cap &amp;&amp; in_array( $args-&gt;capability_type, array( 'post', 'page' ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>1367</span> 		$args-&gt;map_meta_cap = true;
</code></pre><pre class=''><code><span class='LineNumber'>1368</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1369</span> 	// If not set, default to false.
</code></pre><pre class=''><code><span class='LineNumber'>1370</span> 	if ( null === $args-&gt;map_meta_cap )
</code></pre><pre class=''><code><span class='LineNumber'>1371</span> 		$args-&gt;map_meta_cap = false;
</code></pre><pre class=''><code><span class='LineNumber'>1372</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1373</span> 	$args-&gt;cap = get_post_type_capabilities( $args );
</code></pre><pre class=''><code><span class='LineNumber'>1374</span> 	unset( $args-&gt;capabilities );
</code></pre><pre class=''><code><span class='LineNumber'>1375</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1376</span> 	if ( is_array( $args-&gt;capability_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>1377</span> 		$args-&gt;capability_type = $args-&gt;capability_type[0];
</code></pre><pre class=''><code><span class='LineNumber'>1378</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1379</span> 	if ( ! empty( $args-&gt;supports ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1380</span> 		add_post_type_support( $post_type, $args-&gt;supports );
</code></pre><pre class=''><code><span class='LineNumber'>1381</span> 		unset( $args-&gt;supports );
</code></pre><pre class=''><code><span class='LineNumber'>1382</span> 	} elseif ( false !== $args-&gt;supports ) {
</code></pre><pre class=''><code><span class='LineNumber'>1383</span> 		// Add default features
</code></pre><pre class=''><code><span class='LineNumber'>1384</span> 		add_post_type_support( $post_type, array( 'title', 'editor' ) );
</code></pre><pre class=''><code><span class='LineNumber'>1385</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1386</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1387</span> 	if ( false !== $args-&gt;query_var &amp;&amp; ! empty( $wp ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1388</span> 		if ( true === $args-&gt;query_var )
</code></pre><pre class=''><code><span class='LineNumber'>1389</span> 			$args-&gt;query_var = $post_type;
</code></pre><pre class=''><code><span class='LineNumber'>1390</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>1391</span> 			$args-&gt;query_var = sanitize_title_with_dashes( $args-&gt;query_var );
</code></pre><pre class=''><code><span class='LineNumber'>1392</span> 		$wp-&gt;add_query_var( $args-&gt;query_var );
</code></pre><pre class=''><code><span class='LineNumber'>1393</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1394</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1395</span> 	if ( false !== $args-&gt;rewrite &amp;&amp; ( is_admin() || '' != get_option( 'permalink_structure' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1396</span> 		if ( ! is_array( $args-&gt;rewrite ) )
</code></pre><pre class=''><code><span class='LineNumber'>1397</span> 			$args-&gt;rewrite = array();
</code></pre><pre class=''><code><span class='LineNumber'>1398</span> 		if ( empty( $args-&gt;rewrite['slug'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1399</span> 			$args-&gt;rewrite['slug'] = $post_type;
</code></pre><pre class=''><code><span class='LineNumber'>1400</span> 		if ( ! isset( $args-&gt;rewrite['with_front'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1401</span> 			$args-&gt;rewrite['with_front'] = true;
</code></pre><pre class=''><code><span class='LineNumber'>1402</span> 		if ( ! isset( $args-&gt;rewrite['pages'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1403</span> 			$args-&gt;rewrite['pages'] = true;
</code></pre><pre class=''><code><span class='LineNumber'>1404</span> 		if ( ! isset( $args-&gt;rewrite['feeds'] ) || ! $args-&gt;has_archive )
</code></pre><pre class=''><code><span class='LineNumber'>1405</span> 			$args-&gt;rewrite['feeds'] = (bool) $args-&gt;has_archive;
</code></pre><pre class=''><code><span class='LineNumber'>1406</span> 		if ( ! isset( $args-&gt;rewrite['ep_mask'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1407</span> 			if ( isset( $args-&gt;permalink_epmask ) )
</code></pre><pre class=''><code><span class='LineNumber'>1408</span> 				$args-&gt;rewrite['ep_mask'] = $args-&gt;permalink_epmask;
</code></pre><pre class=''><code><span class='LineNumber'>1409</span> 			else
</code></pre><pre class=''><code><span class='LineNumber'>1410</span> 				$args-&gt;rewrite['ep_mask'] = EP_PERMALINK;
</code></pre><pre class=''><code><span class='LineNumber'>1411</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>1412</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1413</span> 		if ( $args-&gt;hierarchical )
</code></pre><pre class=''><code><span class='LineNumber'>1414</span> 			add_rewrite_tag( &quot;%$post_type%&quot;, '(.+?)', $args-&gt;query_var ? &quot;{$args-&gt;query_var}=&quot; : &quot;post_type=$post_type&amp;pagename=&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>1415</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>1416</span> 			add_rewrite_tag( &quot;%$post_type%&quot;, '([^/]+)', $args-&gt;query_var ? &quot;{$args-&gt;query_var}=&quot; : &quot;post_type=$post_type&amp;name=&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>1417</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1418</span> 		if ( $args-&gt;has_archive ) {
</code></pre><pre class=''><code><span class='LineNumber'>1419</span> 			$archive_slug = $args-&gt;has_archive === true ? $args-&gt;rewrite['slug'] : $args-&gt;has_archive;
</code></pre><pre class=''><code><span class='LineNumber'>1420</span> 			if ( $args-&gt;rewrite['with_front'] )
</code></pre><pre class=''><code><span class='LineNumber'>1421</span> 				$archive_slug = substr( $wp_rewrite-&gt;front, 1 ) . $archive_slug;
</code></pre><pre class=''><code><span class='LineNumber'>1422</span> 			else
</code></pre><pre class=''><code><span class='LineNumber'>1423</span> 				$archive_slug = $wp_rewrite-&gt;root . $archive_slug;
</code></pre><pre class=''><code><span class='LineNumber'>1424</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1425</span> 			add_rewrite_rule( &quot;{$archive_slug}/?$&quot;, &quot;index.php?post_type=$post_type&quot;, 'top' );
</code></pre><pre class=''><code><span class='LineNumber'>1426</span> 			if ( $args-&gt;rewrite['feeds'] &amp;&amp; $wp_rewrite-&gt;feeds ) {
</code></pre><pre class=''><code><span class='LineNumber'>1427</span> 				$feeds = '(' . trim( implode( '|', $wp_rewrite-&gt;feeds ) ) . ')';
</code></pre><pre class=''><code><span class='LineNumber'>1428</span> 				add_rewrite_rule( &quot;{$archive_slug}/feed/$feeds/?$&quot;, &quot;index.php?post_type=$post_type&quot; . '&amp;feed=$matches[1]', 'top' );
</code></pre><pre class=''><code><span class='LineNumber'>1429</span> 				add_rewrite_rule( &quot;{$archive_slug}/$feeds/?$&quot;, &quot;index.php?post_type=$post_type&quot; . '&amp;feed=$matches[1]', 'top' );
</code></pre><pre class=''><code><span class='LineNumber'>1430</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>1431</span> 			if ( $args-&gt;rewrite['pages'] )
</code></pre><pre class=''><code><span class='LineNumber'>1432</span> 				add_rewrite_rule( &quot;{$archive_slug}/{$wp_rewrite-&gt;pagination_base}/([0-9]{1,})/?$&quot;, &quot;index.php?post_type=$post_type&quot; . '&amp;paged=$matches[1]', 'top' );
</code></pre><pre class=''><code><span class='LineNumber'>1433</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>1434</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1435</span> 		$permastruct_args = $args-&gt;rewrite;
</code></pre><pre class=''><code><span class='LineNumber'>1436</span> 		$permastruct_args['feed'] = $permastruct_args['feeds'];
</code></pre><pre class=''><code><span class='LineNumber'>1437</span> 		add_permastruct( $post_type, &quot;{$args-&gt;rewrite['slug']}/%$post_type%&quot;, $permastruct_args );
</code></pre><pre class=''><code><span class='LineNumber'>1438</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1439</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1440</span> 	// Register the post type meta box if a custom callback was specified.
</code></pre><pre class=''><code><span class='LineNumber'>1441</span> 	if ( $args-&gt;register_meta_box_cb )
</code></pre><pre class=''><code><span class='LineNumber'>1442</span> 		add_action( 'add_meta_boxes_' . $post_type, $args-&gt;register_meta_box_cb, 10, 1 );
</code></pre><pre class=''><code><span class='LineNumber'>1443</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1444</span> 	$args-&gt;labels = get_post_type_labels( $args );
</code></pre><pre class=''><code><span class='LineNumber'>1445</span> 	$args-&gt;label = $args-&gt;labels-&gt;name;
</code></pre><pre class=''><code><span class='LineNumber'>1446</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1447</span> 	$wp_post_types[ $post_type ] = $args;
</code></pre><pre class=''><code><span class='LineNumber'>1448</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1449</span> 	add_action( 'future_' . $post_type, '_future_post_hook', 5, 2 );
</code></pre><pre class=''><code><span class='LineNumber'>1450</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1451</span> 	foreach ( $args-&gt;taxonomies as $taxonomy ) {
</code></pre><pre class=''><code><span class='LineNumber'>1452</span> 		register_taxonomy_for_object_type( $taxonomy, $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>1453</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1454</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1455</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>1456</span> 	 * Fires after a post type is registered.
</code></pre><pre class=''><code><span class='LineNumber'>1457</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1458</span> 	 * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>1459</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1460</span> 	 * @param string $post_type Post type.
</code></pre><pre class=''><code><span class='LineNumber'>1461</span> 	 * @param object $args      Arguments used to register the post type.
</code></pre><pre class=''><code><span class='LineNumber'>1462</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>1463</span> 	do_action( 'registered_post_type', $post_type, $args );
</code></pre><pre class=''><code><span class='LineNumber'>1464</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1465</span> 	return $args;
</code></pre><pre class=''><code><span class='LineNumber'>1466</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1467</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1468</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1469</span>  * Build an object with all post type capabilities out of a post type object
</code></pre><pre class=''><code><span class='LineNumber'>1470</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1471</span>  * Post type capabilities use the 'capability_type' argument as a base, if the
</code></pre><pre class=''><code><span class='LineNumber'>1472</span>  * capability is not set in the 'capabilities' argument array or if the
</code></pre><pre class=''><code><span class='LineNumber'>1473</span>  * 'capabilities' argument is not supplied.
</code></pre><pre class=''><code><span class='LineNumber'>1474</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1475</span>  * The capability_type argument can optionally be registered as an array, with
</code></pre><pre class=''><code><span class='LineNumber'>1476</span>  * the first value being singular and the second plural, e.g. array('story, 'stories')
</code></pre><pre class=''><code><span class='LineNumber'>1477</span>  * Otherwise, an 's' will be added to the value for the plural form. After
</code></pre><pre class=''><code><span class='LineNumber'>1478</span>  * registration, capability_type will always be a string of the singular value.
</code></pre><pre class=''><code><span class='LineNumber'>1479</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1480</span>  * By default, seven keys are accepted as part of the capabilities array:
</code></pre><pre class=''><code><span class='LineNumber'>1481</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1482</span>  * - edit_post, read_post, and delete_post are meta capabilities, which are then
</code></pre><pre class=''><code><span class='LineNumber'>1483</span>  *   generally mapped to corresponding primitive capabilities depending on the
</code></pre><pre class=''><code><span class='LineNumber'>1484</span>  *   context, which would be the post being edited/read/deleted and the user or
</code></pre><pre class=''><code><span class='LineNumber'>1485</span>  *   role being checked. Thus these capabilities would generally not be granted
</code></pre><pre class=''><code><span class='LineNumber'>1486</span>  *   directly to users or roles.
</code></pre><pre class=''><code><span class='LineNumber'>1487</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1488</span>  * - edit_posts - Controls whether objects of this post type can be edited.
</code></pre><pre class=''><code><span class='LineNumber'>1489</span>  * - edit_others_posts - Controls whether objects of this type owned by other users
</code></pre><pre class=''><code><span class='LineNumber'>1490</span>  *   can be edited. If the post type does not support an author, then this will
</code></pre><pre class=''><code><span class='LineNumber'>1491</span>  *   behave like edit_posts.
</code></pre><pre class=''><code><span class='LineNumber'>1492</span>  * - publish_posts - Controls publishing objects of this post type.
</code></pre><pre class=''><code><span class='LineNumber'>1493</span>  * - read_private_posts - Controls whether private objects can be read.
</code></pre><pre class=''><code><span class='LineNumber'>1494</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1495</span>  * These four primitive capabilities are checked in core in various locations.
</code></pre><pre class=''><code><span class='LineNumber'>1496</span>  * There are also seven other primitive capabilities which are not referenced
</code></pre><pre class=''><code><span class='LineNumber'>1497</span>  * directly in core, except in map_meta_cap(), which takes the three aforementioned
</code></pre><pre class=''><code><span class='LineNumber'>1498</span>  * meta capabilities and translates them into one or more primitive capabilities
</code></pre><pre class=''><code><span class='LineNumber'>1499</span>  * that must then be checked against the user or role, depending on the context.
</code></pre><pre class=''><code><span class='LineNumber'>1500</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1501</span>  * - read - Controls whether objects of this post type can be read.
</code></pre><pre class=''><code><span class='LineNumber'>1502</span>  * - delete_posts - Controls whether objects of this post type can be deleted.
</code></pre><pre class=''><code><span class='LineNumber'>1503</span>  * - delete_private_posts - Controls whether private objects can be deleted.
</code></pre><pre class=''><code><span class='LineNumber'>1504</span>  * - delete_published_posts - Controls whether published objects can be deleted.
</code></pre><pre class=''><code><span class='LineNumber'>1505</span>  * - delete_others_posts - Controls whether objects owned by other users can be
</code></pre><pre class=''><code><span class='LineNumber'>1506</span>  *   can be deleted. If the post type does not support an author, then this will
</code></pre><pre class=''><code><span class='LineNumber'>1507</span>  *   behave like delete_posts.
</code></pre><pre class=''><code><span class='LineNumber'>1508</span>  * - edit_private_posts - Controls whether private objects can be edited.
</code></pre><pre class=''><code><span class='LineNumber'>1509</span>  * - edit_published_posts - Controls whether published objects can be edited.
</code></pre><pre class=''><code><span class='LineNumber'>1510</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1511</span>  * These additional capabilities are only used in map_meta_cap(). Thus, they are
</code></pre><pre class=''><code><span class='LineNumber'>1512</span>  * only assigned by default if the post type is registered with the 'map_meta_cap'
</code></pre><pre class=''><code><span class='LineNumber'>1513</span>  * argument set to true (default is false).
</code></pre><pre class=''><code><span class='LineNumber'>1514</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1515</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1516</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1517</span>  * @see register_post_type()
</code></pre><pre class=''><code><span class='LineNumber'>1518</span>  * @see map_meta_cap()
</code></pre><pre class=''><code><span class='LineNumber'>1519</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1520</span>  * @param object $args Post type registration arguments.
</code></pre><pre class=''><code><span class='LineNumber'>1521</span>  * @return object object with all the capabilities as member variables.
</code></pre><pre class=''><code><span class='LineNumber'>1522</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1523</span> function get_post_type_capabilities( $args ) {
</code></pre><pre class=''><code><span class='LineNumber'>1524</span> 	if ( ! is_array( $args-&gt;capability_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>1525</span> 		$args-&gt;capability_type = array( $args-&gt;capability_type, $args-&gt;capability_type . 's' );
</code></pre><pre class=''><code><span class='LineNumber'>1526</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1527</span> 	// Singular base for meta capabilities, plural base for primitive capabilities.
</code></pre><pre class=''><code><span class='LineNumber'>1528</span> 	list( $singular_base, $plural_base ) = $args-&gt;capability_type;
</code></pre><pre class=''><code><span class='LineNumber'>1529</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1530</span> 	$default_capabilities = array(
</code></pre><pre class=''><code><span class='LineNumber'>1531</span> 		// Meta capabilities
</code></pre><pre class=''><code><span class='LineNumber'>1532</span> 		'edit_post'          =&gt; 'edit_'         . $singular_base,
</code></pre><pre class=''><code><span class='LineNumber'>1533</span> 		'read_post'          =&gt; 'read_'         . $singular_base,
</code></pre><pre class=''><code><span class='LineNumber'>1534</span> 		'delete_post'        =&gt; 'delete_'       . $singular_base,
</code></pre><pre class=''><code><span class='LineNumber'>1535</span> 		// Primitive capabilities used outside of map_meta_cap():
</code></pre><pre class=''><code><span class='LineNumber'>1536</span> 		'edit_posts'         =&gt; 'edit_'         . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1537</span> 		'edit_others_posts'  =&gt; 'edit_others_'  . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1538</span> 		'publish_posts'      =&gt; 'publish_'      . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1539</span> 		'read_private_posts' =&gt; 'read_private_' . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1540</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>1541</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1542</span> 	// Primitive capabilities used within map_meta_cap():
</code></pre><pre class=''><code><span class='LineNumber'>1543</span> 	if ( $args-&gt;map_meta_cap ) {
</code></pre><pre class=''><code><span class='LineNumber'>1544</span> 		$default_capabilities_for_mapping = array(
</code></pre><pre class=''><code><span class='LineNumber'>1545</span> 			'read'                   =&gt; 'read',
</code></pre><pre class=''><code><span class='LineNumber'>1546</span> 			'delete_posts'           =&gt; 'delete_'           . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1547</span> 			'delete_private_posts'   =&gt; 'delete_private_'   . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1548</span> 			'delete_published_posts' =&gt; 'delete_published_' . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1549</span> 			'delete_others_posts'    =&gt; 'delete_others_'    . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1550</span> 			'edit_private_posts'     =&gt; 'edit_private_'     . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1551</span> 			'edit_published_posts'   =&gt; 'edit_published_'   . $plural_base,
</code></pre><pre class=''><code><span class='LineNumber'>1552</span> 		);
</code></pre><pre class=''><code><span class='LineNumber'>1553</span> 		$default_capabilities = array_merge( $default_capabilities, $default_capabilities_for_mapping );
</code></pre><pre class=''><code><span class='LineNumber'>1554</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1555</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1556</span> 	$capabilities = array_merge( $default_capabilities, $args-&gt;capabilities );
</code></pre><pre class=''><code><span class='LineNumber'>1557</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1558</span> 	// Post creation capability simply maps to edit_posts by default:
</code></pre><pre class=''><code><span class='LineNumber'>1559</span> 	if ( ! isset( $capabilities['create_posts'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1560</span> 		$capabilities['create_posts'] = $capabilities['edit_posts'];
</code></pre><pre class=''><code><span class='LineNumber'>1561</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1562</span> 	// Remember meta capabilities for future reference.
</code></pre><pre class=''><code><span class='LineNumber'>1563</span> 	if ( $args-&gt;map_meta_cap )
</code></pre><pre class=''><code><span class='LineNumber'>1564</span> 		_post_type_meta_capabilities( $capabilities );
</code></pre><pre class=''><code><span class='LineNumber'>1565</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1566</span> 	return (object) $capabilities;
</code></pre><pre class=''><code><span class='LineNumber'>1567</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1568</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1569</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1570</span>  * Store or return a list of post type meta caps for map_meta_cap().
</code></pre><pre class=''><code><span class='LineNumber'>1571</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1572</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>1573</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>1574</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1575</span>  * @param null|array $capabilities Post type meta capabilities.
</code></pre><pre class=''><code><span class='LineNumber'>1576</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1577</span> function _post_type_meta_capabilities( $capabilities = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>1578</span> 	static $meta_caps = array();
</code></pre><pre class=''><code><span class='LineNumber'>1579</span> 	if ( null === $capabilities )
</code></pre><pre class=''><code><span class='LineNumber'>1580</span> 		return $meta_caps;
</code></pre><pre class=''><code><span class='LineNumber'>1581</span> 	foreach ( $capabilities as $core =&gt; $custom ) {
</code></pre><pre class=''><code><span class='LineNumber'>1582</span> 		if ( in_array( $core, array( 'read_post', 'delete_post', 'edit_post' ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>1583</span> 			$meta_caps[ $custom ] = $core;
</code></pre><pre class=''><code><span class='LineNumber'>1584</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1585</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1586</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1587</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1588</span>  * Build an object with all post type labels out of a post type object
</code></pre><pre class=''><code><span class='LineNumber'>1589</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1590</span>  * Accepted keys of the label array in the post type object:
</code></pre><pre class=''><code><span class='LineNumber'>1591</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1592</span>  * - name - general name for the post type, usually plural. The same and overridden
</code></pre><pre class=''><code><span class='LineNumber'>1593</span>  *          by $post_type_object-&gt;label. Default is Posts/Pages
</code></pre><pre class=''><code><span class='LineNumber'>1594</span>  * - singular_name - name for one object of this post type. Default is Post/Page
</code></pre><pre class=''><code><span class='LineNumber'>1595</span>  * - add_new - Default is Add New for both hierarchical and non-hierarchical types.
</code></pre><pre class=''><code><span class='LineNumber'>1596</span>  *             When internationalizing this string, please use a gettext context
</code></pre><pre class=''><code><span class='LineNumber'>1597</span>  *             {@see http://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context}
</code></pre><pre class=''><code><span class='LineNumber'>1598</span>  *             matching your post type. Example: &lt;code&gt;_x('Add New', 'product');&lt;/code&gt;.
</code></pre><pre class=''><code><span class='LineNumber'>1599</span>  * - add_new_item - Default is Add New Post/Add New Page.
</code></pre><pre class=''><code><span class='LineNumber'>1600</span>  * - edit_item - Default is Edit Post/Edit Page.
</code></pre><pre class=''><code><span class='LineNumber'>1601</span>  * - new_item - Default is New Post/New Page.
</code></pre><pre class=''><code><span class='LineNumber'>1602</span>  * - view_item - Default is View Post/View Page.
</code></pre><pre class=''><code><span class='LineNumber'>1603</span>  * - search_items - Default is Search Posts/Search Pages.
</code></pre><pre class=''><code><span class='LineNumber'>1604</span>  * - not_found - Default is No posts found/No pages found.
</code></pre><pre class=''><code><span class='LineNumber'>1605</span>  * - not_found_in_trash - Default is No posts found in Trash/No pages found in Trash.
</code></pre><pre class=''><code><span class='LineNumber'>1606</span>  * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical
</code></pre><pre class=''><code><span class='LineNumber'>1607</span>  *                       ones the default is 'Parent Page:'.
</code></pre><pre class=''><code><span class='LineNumber'>1608</span>  * - all_items - String for the submenu. Default is All Posts/All Pages.
</code></pre><pre class=''><code><span class='LineNumber'>1609</span>  * - menu_name - Default is the same as &lt;code&gt;name&lt;/code&gt;.
</code></pre><pre class=''><code><span class='LineNumber'>1610</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1611</span>  * Above, the first default value is for non-hierarchical post types (like posts)
</code></pre><pre class=''><code><span class='LineNumber'>1612</span>  * and the second one is for hierarchical post types (like pages).
</code></pre><pre class=''><code><span class='LineNumber'>1613</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1614</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1615</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>1616</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1617</span>  * @param object $post_type_object Post type object.
</code></pre><pre class=''><code><span class='LineNumber'>1618</span>  * @return object object with all the labels as member variables.
</code></pre><pre class=''><code><span class='LineNumber'>1619</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1620</span> function get_post_type_labels( $post_type_object ) {
</code></pre><pre class=''><code><span class='LineNumber'>1621</span> 	$nohier_vs_hier_defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>1622</span> 		'name' =&gt; array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),
</code></pre><pre class=''><code><span class='LineNumber'>1623</span> 		'singular_name' =&gt; array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),
</code></pre><pre class=''><code><span class='LineNumber'>1624</span> 		'add_new' =&gt; array( _x('Add New', 'post'), _x('Add New', 'page') ),
</code></pre><pre class=''><code><span class='LineNumber'>1625</span> 		'add_new_item' =&gt; array( __('Add New Post'), __('Add New Page') ),
</code></pre><pre class=''><code><span class='LineNumber'>1626</span> 		'edit_item' =&gt; array( __('Edit Post'), __('Edit Page') ),
</code></pre><pre class=''><code><span class='LineNumber'>1627</span> 		'new_item' =&gt; array( __('New Post'), __('New Page') ),
</code></pre><pre class=''><code><span class='LineNumber'>1628</span> 		'view_item' =&gt; array( __('View Post'), __('View Page') ),
</code></pre><pre class=''><code><span class='LineNumber'>1629</span> 		'search_items' =&gt; array( __('Search Posts'), __('Search Pages') ),
</code></pre><pre class=''><code><span class='LineNumber'>1630</span> 		'not_found' =&gt; array( __('No posts found.'), __('No pages found.') ),
</code></pre><pre class=''><code><span class='LineNumber'>1631</span> 		'not_found_in_trash' =&gt; array( __('No posts found in Trash.'), __('No pages found in Trash.') ),
</code></pre><pre class=''><code><span class='LineNumber'>1632</span> 		'parent_item_colon' =&gt; array( null, __('Parent Page:') ),
</code></pre><pre class=''><code><span class='LineNumber'>1633</span> 		'all_items' =&gt; array( __( 'All Posts' ), __( 'All Pages' ) )
</code></pre><pre class=''><code><span class='LineNumber'>1634</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>1635</span> 	$nohier_vs_hier_defaults['menu_name'] = $nohier_vs_hier_defaults['name'];
</code></pre><pre class=''><code><span class='LineNumber'>1636</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1637</span> 	$labels = _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );
</code></pre><pre class=''><code><span class='LineNumber'>1638</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1639</span> 	$post_type = $post_type_object-&gt;name;
</code></pre><pre class=''><code><span class='LineNumber'>1640</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1641</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>1642</span> 	 * Filter the labels of a specific post type.
</code></pre><pre class=''><code><span class='LineNumber'>1643</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1644</span> 	 * The dynamic portion of the hook name, $post_type, refers to
</code></pre><pre class=''><code><span class='LineNumber'>1645</span> 	 * the post type slug.
</code></pre><pre class=''><code><span class='LineNumber'>1646</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1647</span> 	 * @since 3.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1648</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1649</span> 	 * @see get_post_type_labels() for the full list of labels.
</code></pre><pre class=''><code><span class='LineNumber'>1650</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>1651</span> 	 * @param array $labels Array of labels for the given post type.
</code></pre><pre class=''><code><span class='LineNumber'>1652</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>1653</span> 	return apply_filters( &quot;post_type_labels_{$post_type}&quot;, $labels );
</code></pre><pre class=''><code><span class='LineNumber'>1654</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1655</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1656</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1657</span>  * Build an object with custom-something object (post type, taxonomy) labels
</code></pre><pre class=''><code><span class='LineNumber'>1658</span>  * out of a custom-something object
</code></pre><pre class=''><code><span class='LineNumber'>1659</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1660</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1661</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>1662</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1663</span>  * @param object $object                  A custom-something object.
</code></pre><pre class=''><code><span class='LineNumber'>1664</span>  * @param array  $nohier_vs_hier_defaults Hierarchical vs non-hierarchical default labels.
</code></pre><pre class=''><code><span class='LineNumber'>1665</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1666</span> function _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {
</code></pre><pre class=''><code><span class='LineNumber'>1667</span> 	$object-&gt;labels = (array) $object-&gt;labels;
</code></pre><pre class=''><code><span class='LineNumber'>1668</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1669</span> 	if ( isset( $object-&gt;label ) &amp;&amp; empty( $object-&gt;labels['name'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1670</span> 		$object-&gt;labels['name'] = $object-&gt;label;
</code></pre><pre class=''><code><span class='LineNumber'>1671</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1672</span> 	if ( !isset( $object-&gt;labels['singular_name'] ) &amp;&amp; isset( $object-&gt;labels['name'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1673</span> 		$object-&gt;labels['singular_name'] = $object-&gt;labels['name'];
</code></pre><pre class=''><code><span class='LineNumber'>1674</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1675</span> 	if ( ! isset( $object-&gt;labels['name_admin_bar'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1676</span> 		$object-&gt;labels['name_admin_bar'] = isset( $object-&gt;labels['singular_name'] ) ? $object-&gt;labels['singular_name'] : $object-&gt;name;
</code></pre><pre class=''><code><span class='LineNumber'>1677</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1678</span> 	if ( !isset( $object-&gt;labels['menu_name'] ) &amp;&amp; isset( $object-&gt;labels['name'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1679</span> 		$object-&gt;labels['menu_name'] = $object-&gt;labels['name'];
</code></pre><pre class=''><code><span class='LineNumber'>1680</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1681</span> 	if ( !isset( $object-&gt;labels['all_items'] ) &amp;&amp; isset( $object-&gt;labels['menu_name'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1682</span> 		$object-&gt;labels['all_items'] = $object-&gt;labels['menu_name'];
</code></pre><pre class=''><code><span class='LineNumber'>1683</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1684</span> 	foreach ( $nohier_vs_hier_defaults as $key =&gt; $value )
</code></pre><pre class=''><code><span class='LineNumber'>1685</span> 			$defaults[$key] = $object-&gt;hierarchical ? $value[1] : $value[0];
</code></pre><pre class=''><code><span class='LineNumber'>1686</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1687</span> 	$labels = array_merge( $defaults, $object-&gt;labels );
</code></pre><pre class=''><code><span class='LineNumber'>1688</span> 	return (object)$labels;
</code></pre><pre class=''><code><span class='LineNumber'>1689</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1690</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1691</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1692</span>  * Add submenus for post types.
</code></pre><pre class=''><code><span class='LineNumber'>1693</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1694</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>1695</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>1696</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1697</span> function _add_post_type_submenus() {
</code></pre><pre class=''><code><span class='LineNumber'>1698</span> 	foreach ( get_post_types( array( 'show_ui' =&gt; true ) ) as $ptype ) {
</code></pre><pre class=''><code><span class='LineNumber'>1699</span> 		$ptype_obj = get_post_type_object( $ptype );
</code></pre><pre class=''><code><span class='LineNumber'>1700</span> 		// Sub-menus only.
</code></pre><pre class=''><code><span class='LineNumber'>1701</span> 		if ( ! $ptype_obj-&gt;show_in_menu || $ptype_obj-&gt;show_in_menu === true )
</code></pre><pre class=''><code><span class='LineNumber'>1702</span> 			continue;
</code></pre><pre class=''><code><span class='LineNumber'>1703</span> 		add_submenu_page( $ptype_obj-&gt;show_in_menu, $ptype_obj-&gt;labels-&gt;name, $ptype_obj-&gt;labels-&gt;all_items, $ptype_obj-&gt;cap-&gt;edit_posts, &quot;edit.php?post_type=$ptype&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>1704</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1705</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1706</span> add_action( 'admin_menu', '_add_post_type_submenus' );
</code></pre><pre class=''><code><span class='LineNumber'>1707</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1708</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1709</span>  * Register support of certain features for a post type.
</code></pre><pre class=''><code><span class='LineNumber'>1710</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1711</span>  * All core features are directly associated with a functional area of the edit
</code></pre><pre class=''><code><span class='LineNumber'>1712</span>  * screen, such as the editor or a meta box. Features include: 'title', 'editor',
</code></pre><pre class=''><code><span class='LineNumber'>1713</span>  * 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes',
</code></pre><pre class=''><code><span class='LineNumber'>1714</span>  * 'thumbnail', 'custom-fields', and 'post-formats'.
</code></pre><pre class=''><code><span class='LineNumber'>1715</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1716</span>  * Additionally, the 'revisions' feature dictates whether the post type will
</code></pre><pre class=''><code><span class='LineNumber'>1717</span>  * store revisions, and the 'comments' feature dictates whether the comments
</code></pre><pre class=''><code><span class='LineNumber'>1718</span>  * count will show on the edit screen.
</code></pre><pre class=''><code><span class='LineNumber'>1719</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1720</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1721</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1722</span>  * @param string       $post_type The post type for which to add the feature.
</code></pre><pre class=''><code><span class='LineNumber'>1723</span>  * @param string|array $feature   The feature being added, accepts an array of
</code></pre><pre class=''><code><span class='LineNumber'>1724</span>  *                                feature strings or a single string.
</code></pre><pre class=''><code><span class='LineNumber'>1725</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1726</span> function add_post_type_support( $post_type, $feature ) {
</code></pre><pre class=''><code><span class='LineNumber'>1727</span> 	global $_wp_post_type_features;
</code></pre><pre class=''><code><span class='LineNumber'>1728</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1729</span> 	$features = (array) $feature;
</code></pre><pre class=''><code><span class='LineNumber'>1730</span> 	foreach ($features as $feature) {
</code></pre><pre class=''><code><span class='LineNumber'>1731</span> 		if ( func_num_args() == 2 )
</code></pre><pre class=''><code><span class='LineNumber'>1732</span> 			$_wp_post_type_features[$post_type][$feature] = true;
</code></pre><pre class=''><code><span class='LineNumber'>1733</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>1734</span> 			$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );
</code></pre><pre class=''><code><span class='LineNumber'>1735</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>1736</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1737</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1738</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1739</span>  * Remove support for a feature from a post type.
</code></pre><pre class=''><code><span class='LineNumber'>1740</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1741</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1742</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1743</span>  * @param string $post_type The post type for which to remove the feature.
</code></pre><pre class=''><code><span class='LineNumber'>1744</span>  * @param string $feature   The feature being removed.
</code></pre><pre class=''><code><span class='LineNumber'>1745</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1746</span> function remove_post_type_support( $post_type, $feature ) {
</code></pre><pre class=''><code><span class='LineNumber'>1747</span> 	global $_wp_post_type_features;
</code></pre><pre class=''><code><span class='LineNumber'>1748</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1749</span> 	if ( isset( $_wp_post_type_features[$post_type][$feature] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1750</span> 		unset( $_wp_post_type_features[$post_type][$feature] );
</code></pre><pre class=''><code><span class='LineNumber'>1751</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1752</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1753</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1754</span>  * Get all the post type features
</code></pre><pre class=''><code><span class='LineNumber'>1755</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1756</span>  * @since 3.4.0
</code></pre><pre class=''><code><span class='LineNumber'>1757</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1758</span>  * @param string $post_type The post type.
</code></pre><pre class=''><code><span class='LineNumber'>1759</span>  * @return array Post type supports list.
</code></pre><pre class=''><code><span class='LineNumber'>1760</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1761</span> function get_all_post_type_supports( $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>1762</span> 	global $_wp_post_type_features;
</code></pre><pre class=''><code><span class='LineNumber'>1763</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1764</span> 	if ( isset( $_wp_post_type_features[$post_type] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1765</span> 		return $_wp_post_type_features[$post_type];
</code></pre><pre class=''><code><span class='LineNumber'>1766</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1767</span> 	return array();
</code></pre><pre class=''><code><span class='LineNumber'>1768</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1769</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1770</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1771</span>  * Check a post type's support for a given feature.
</code></pre><pre class=''><code><span class='LineNumber'>1772</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1773</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>1774</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1775</span>  * @param string $post_type The post type being checked.
</code></pre><pre class=''><code><span class='LineNumber'>1776</span>  * @param string $feature the feature being checked.
</code></pre><pre class=''><code><span class='LineNumber'>1777</span>  * @return bool Whether the post type supports the given feature.
</code></pre><pre class=''><code><span class='LineNumber'>1778</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1779</span> function post_type_supports( $post_type, $feature ) {
</code></pre><pre class=''><code><span class='LineNumber'>1780</span> 	global $_wp_post_type_features;
</code></pre><pre class=''><code><span class='LineNumber'>1781</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1782</span> 	return ( isset( $_wp_post_type_features[$post_type][$feature] ) );
</code></pre><pre class=''><code><span class='LineNumber'>1783</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1784</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1785</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1786</span>  * Update the post type for the post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1787</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1788</span>  * The page or post cache will be cleaned for the post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1789</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1790</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1791</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1792</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>1793</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1794</span>  * @param int    $post_id   Optional. Post ID to change post type. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>1795</span>  * @param string $post_type Optional. Post type. Accepts 'post' or 'page' to
</code></pre><pre class=''><code><span class='LineNumber'>1796</span>  *                          name a few. Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>1797</span>  * @return int Amount of rows changed. Should be 1 for success and 0 for failure.
</code></pre><pre class=''><code><span class='LineNumber'>1798</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1799</span> function set_post_type( $post_id = 0, $post_type = 'post' ) {
</code></pre><pre class=''><code><span class='LineNumber'>1800</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>1801</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1802</span> 	$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');
</code></pre><pre class=''><code><span class='LineNumber'>1803</span> 	$return = $wpdb-&gt;update( $wpdb-&gt;posts, array('post_type' =&gt; $post_type), array('ID' =&gt; $post_id) );
</code></pre><pre class=''><code><span class='LineNumber'>1804</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1805</span> 	clean_post_cache( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>1806</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1807</span> 	return $return;
</code></pre><pre class=''><code><span class='LineNumber'>1808</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1809</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1810</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1811</span>  * Retrieve list of latest posts or posts matching criteria.
</code></pre><pre class=''><code><span class='LineNumber'>1812</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1813</span>  * The defaults are as follows:
</code></pre><pre class=''><code><span class='LineNumber'>1814</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1815</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>1816</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1817</span>  * @see WP_Query::parse_query()
</code></pre><pre class=''><code><span class='LineNumber'>1818</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1819</span>  * @param array $args {
</code></pre><pre class=''><code><span class='LineNumber'>1820</span>  *     Optional. Arguments to retrieve posts. {@see WP_Query::parse_query()} for more
</code></pre><pre class=''><code><span class='LineNumber'>1821</span>  *     available arguments.
</code></pre><pre class=''><code><span class='LineNumber'>1822</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1823</span>  *     @type int        $numberposts      Total number of posts to retrieve. Is an alias of $posts_per_page
</code></pre><pre class=''><code><span class='LineNumber'>1824</span>  *                                        in WP_Query. Accepts 1+ and -1 for all. Default 5.
</code></pre><pre class=''><code><span class='LineNumber'>1825</span>  *     @type int        $offset           The number of posts to offset before retrieval. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>1826</span>  *     @type int|string $category         Category ID or comma-separated list of IDs (this or any children).
</code></pre><pre class=''><code><span class='LineNumber'>1827</span>  *                                        Is an alias of $cat in WP_Query. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>1828</span>  *     @type string     $orderby          Which field to order posts by. Accepts post fields. Default 'date'.
</code></pre><pre class=''><code><span class='LineNumber'>1829</span>  *     @type array      $include          An array of post IDs to retrieve, sticky posts will be included.
</code></pre><pre class=''><code><span class='LineNumber'>1830</span>  *                                        Is an alias of $post__in in WP_Query. Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>1831</span>  *     @type array      $exclude          An array of post IDs not to retrieve. Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>1832</span>  *     @type string     $meta_key         Custom field key. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>1833</span>  *     @type mixed      $meta_value       Custom field value. Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>1834</span>  *     @type string     $post_type        Post type. Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>1835</span>  *     @type bool       $suppress_filters Whether to suppress filters. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>1836</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>1837</span>  * @return array List of posts.
</code></pre><pre class=''><code><span class='LineNumber'>1838</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1839</span> function get_posts( $args = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>1840</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>1841</span> 		'numberposts' =&gt; 5, 'offset' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>1842</span> 		'category' =&gt; 0, 'orderby' =&gt; 'date',
</code></pre><pre class=''><code><span class='LineNumber'>1843</span> 		'order' =&gt; 'DESC', 'include' =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>1844</span> 		'exclude' =&gt; array(), 'meta_key' =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>1845</span> 		'meta_value' =&gt;'', 'post_type' =&gt; 'post',
</code></pre><pre class=''><code><span class='LineNumber'>1846</span> 		'suppress_filters' =&gt; true
</code></pre><pre class=''><code><span class='LineNumber'>1847</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>1848</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1849</span> 	$r = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>1850</span> 	if ( empty( $r['post_status'] ) )
</code></pre><pre class=''><code><span class='LineNumber'>1851</span> 		$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';
</code></pre><pre class=''><code><span class='LineNumber'>1852</span> 	if ( ! empty($r['numberposts']) &amp;&amp; empty($r['posts_per_page']) )
</code></pre><pre class=''><code><span class='LineNumber'>1853</span> 		$r['posts_per_page'] = $r['numberposts'];
</code></pre><pre class=''><code><span class='LineNumber'>1854</span> 	if ( ! empty($r['category']) )
</code></pre><pre class=''><code><span class='LineNumber'>1855</span> 		$r['cat'] = $r['category'];
</code></pre><pre class=''><code><span class='LineNumber'>1856</span> 	if ( ! empty($r['include']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>1857</span> 		$incposts = wp_parse_id_list( $r['include'] );
</code></pre><pre class=''><code><span class='LineNumber'>1858</span> 		$r['posts_per_page'] = count($incposts);  // only the number of posts included
</code></pre><pre class=''><code><span class='LineNumber'>1859</span> 		$r['post__in'] = $incposts;
</code></pre><pre class=''><code><span class='LineNumber'>1860</span> 	} elseif ( ! empty($r['exclude']) )
</code></pre><pre class=''><code><span class='LineNumber'>1861</span> 		$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );
</code></pre><pre class=''><code><span class='LineNumber'>1862</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1863</span> 	$r['ignore_sticky_posts'] = true;
</code></pre><pre class=''><code><span class='LineNumber'>1864</span> 	$r['no_found_rows'] = true;
</code></pre><pre class=''><code><span class='LineNumber'>1865</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1866</span> 	$get_posts = new WP_Query;
</code></pre><pre class=''><code><span class='LineNumber'>1867</span> 	return $get_posts-&gt;query($r);
</code></pre><pre class=''><code><span class='LineNumber'>1868</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1869</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1870</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1871</span> //
</code></pre><pre class=''><code><span class='LineNumber'>1872</span> // Post meta functions
</code></pre><pre class=''><code><span class='LineNumber'>1873</span> //
</code></pre><pre class=''><code><span class='LineNumber'>1874</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1875</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1876</span>  * Add meta data field to a post.
</code></pre><pre class=''><code><span class='LineNumber'>1877</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1878</span>  * Post meta data is called &quot;Custom Fields&quot; on the Administration Screen.
</code></pre><pre class=''><code><span class='LineNumber'>1879</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1880</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1881</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1882</span>  * @param int    $post_id    Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1883</span>  * @param string $meta_key   Metadata name.
</code></pre><pre class=''><code><span class='LineNumber'>1884</span>  * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>1885</span>  * @param bool   $unique     Optional. Whether the same key should not be added.
</code></pre><pre class=''><code><span class='LineNumber'>1886</span>  *                           Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1887</span>  * @return int|bool Meta ID on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>1888</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1889</span> function add_post_meta( $post_id, $meta_key, $meta_value, $unique = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>1890</span> 	// Make sure meta is added to the post, not a revision.
</code></pre><pre class=''><code><span class='LineNumber'>1891</span> 	if ( $the_post = wp_is_post_revision($post_id) )
</code></pre><pre class=''><code><span class='LineNumber'>1892</span> 		$post_id = $the_post;
</code></pre><pre class=''><code><span class='LineNumber'>1893</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1894</span> 	return add_metadata('post', $post_id, $meta_key, $meta_value, $unique);
</code></pre><pre class=''><code><span class='LineNumber'>1895</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1896</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1897</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1898</span>  * Remove metadata matching criteria from a post.
</code></pre><pre class=''><code><span class='LineNumber'>1899</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1900</span>  * You can match based on the key, or key and value. Removing based on key and
</code></pre><pre class=''><code><span class='LineNumber'>1901</span>  * value, will keep from removing duplicate metadata with the same key. It also
</code></pre><pre class=''><code><span class='LineNumber'>1902</span>  * allows removing all metadata matching key, if needed.
</code></pre><pre class=''><code><span class='LineNumber'>1903</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1904</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1905</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1906</span>  * @param int    $post_id    Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1907</span>  * @param string $meta_key   Metadata name.
</code></pre><pre class=''><code><span class='LineNumber'>1908</span>  * @param mixed  $meta_value Optional. Metadata value. Must be serializable if
</code></pre><pre class=''><code><span class='LineNumber'>1909</span>  *                           non-scalar. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>1910</span>  * @return bool True on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>1911</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1912</span> function delete_post_meta( $post_id, $meta_key, $meta_value = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>1913</span> 	// Make sure meta is added to the post, not a revision.
</code></pre><pre class=''><code><span class='LineNumber'>1914</span> 	if ( $the_post = wp_is_post_revision($post_id) )
</code></pre><pre class=''><code><span class='LineNumber'>1915</span> 		$post_id = $the_post;
</code></pre><pre class=''><code><span class='LineNumber'>1916</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1917</span> 	return delete_metadata('post', $post_id, $meta_key, $meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>1918</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1919</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1920</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1921</span>  * Retrieve post meta field for a post.
</code></pre><pre class=''><code><span class='LineNumber'>1922</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1923</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1924</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1925</span>  * @param int    $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1926</span>  * @param string $key     Optional. The meta key to retrieve. By default, returns
</code></pre><pre class=''><code><span class='LineNumber'>1927</span>  *                        data for all keys. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>1928</span>  * @param bool   $single  Optional. Whether to return a single value. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>1929</span>  * @return mixed Will be an array if $single is false. Will be value of meta data
</code></pre><pre class=''><code><span class='LineNumber'>1930</span>  *               field if $single is true.
</code></pre><pre class=''><code><span class='LineNumber'>1931</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1932</span> function get_post_meta( $post_id, $key = '', $single = false ) {
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>1933</span> 	return get_metadata('post', $post_id, $key, $single);
</code></pre><pre class=''><code><span class='LineNumber'>1934</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1935</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1936</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1937</span>  * Update post meta field based on post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1938</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1939</span>  * Use the $prev_value parameter to differentiate between meta fields with the
</code></pre><pre class=''><code><span class='LineNumber'>1940</span>  * same key and post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1941</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1942</span>  * If the meta field for the post does not exist, it will be added.
</code></pre><pre class=''><code><span class='LineNumber'>1943</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1944</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>1945</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1946</span>  * @param int    $post_id    Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1947</span>  * @param string $meta_key   Metadata key.
</code></pre><pre class=''><code><span class='LineNumber'>1948</span>  * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
</code></pre><pre class=''><code><span class='LineNumber'>1949</span>  * @param mixed  $prev_value Optional. Previous value to check before removing.
</code></pre><pre class=''><code><span class='LineNumber'>1950</span>  *                           Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>1951</span>  * @return int|bool Meta ID if the key didn't exist, true on successful update,
</code></pre><pre class=''><code><span class='LineNumber'>1952</span>  *                  false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>1953</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1954</span> function update_post_meta( $post_id, $meta_key, $meta_value, $prev_value = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>1955</span> 	// Make sure meta is added to the post, not a revision.
</code></pre><pre class=''><code><span class='LineNumber'>1956</span> 	if ( $the_post = wp_is_post_revision($post_id) )
</code></pre><pre class=''><code><span class='LineNumber'>1957</span> 		$post_id = $the_post;
</code></pre><pre class=''><code><span class='LineNumber'>1958</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1959</span> 	return update_metadata('post', $post_id, $meta_key, $meta_value, $prev_value);
</code></pre><pre class=''><code><span class='LineNumber'>1960</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1961</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1962</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1963</span>  * Delete everything from post meta matching meta key.
</code></pre><pre class=''><code><span class='LineNumber'>1964</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1965</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>1966</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1967</span>  * @param string $post_meta_key Key to search for when deleting.
</code></pre><pre class=''><code><span class='LineNumber'>1968</span>  * @return bool Whether the post meta key was deleted from the database.
</code></pre><pre class=''><code><span class='LineNumber'>1969</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1970</span> function delete_post_meta_by_key( $post_meta_key ) {
</code></pre><pre class=''><code><span class='LineNumber'>1971</span> 	return delete_metadata( 'post', null, $post_meta_key, '', true );
</code></pre><pre class=''><code><span class='LineNumber'>1972</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1973</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1974</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1975</span>  * Retrieve post meta fields, based on post ID.
</code></pre><pre class=''><code><span class='LineNumber'>1976</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1977</span>  * The post meta fields are retrieved from the cache where possible,
</code></pre><pre class=''><code><span class='LineNumber'>1978</span>  * so the function is optimized to be called more than once.
</code></pre><pre class=''><code><span class='LineNumber'>1979</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1980</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>1981</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1982</span>  * @param int $post_id Optional. Post ID. Default is ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>1983</span>  * @return array Post meta for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>1984</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>1985</span> function get_post_custom( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>1986</span> 	$post_id = absint( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>1987</span> 	if ( ! $post_id )
</code></pre><pre class=''><code><span class='LineNumber'>1988</span> 		$post_id = get_the_ID();
</code></pre><pre class=''><code><span class='LineNumber'>1989</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1990</span> 	return get_post_meta( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>1991</span> }
</code></pre><pre class=''><code><span class='LineNumber'>1992</span> 
</code></pre><pre class=''><code><span class='LineNumber'>1993</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>1994</span>  * Retrieve meta field names for a post.
</code></pre><pre class=''><code><span class='LineNumber'>1995</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1996</span>  * If there are no meta fields, then nothing (null) will be returned.
</code></pre><pre class=''><code><span class='LineNumber'>1997</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>1998</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>1999</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2000</span>  * @param int $post_id Optional. Post ID. Default is ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2001</span>  * @return array|null Either array of the keys, or null if keys could not be
</code></pre><pre class=''><code><span class='LineNumber'>2002</span>  *                    retrieved.
</code></pre><pre class=''><code><span class='LineNumber'>2003</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2004</span> function get_post_custom_keys( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>2005</span> 	$custom = get_post_custom( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2006</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2007</span> 	if ( !is_array($custom) )
</code></pre><pre class=''><code><span class='LineNumber'>2008</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2009</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2010</span> 	if ( $keys = array_keys($custom) )
</code></pre><pre class=''><code><span class='LineNumber'>2011</span> 		return $keys;
</code></pre><pre class=''><code><span class='LineNumber'>2012</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2013</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2014</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2015</span>  * Retrieve values for a custom post field.
</code></pre><pre class=''><code><span class='LineNumber'>2016</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2017</span>  * The parameters must not be considered optional. All of the post meta fields
</code></pre><pre class=''><code><span class='LineNumber'>2018</span>  * will be retrieved and only the meta field key values returned.
</code></pre><pre class=''><code><span class='LineNumber'>2019</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2020</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>2021</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2022</span>  * @param string $key     Optional. Meta field key. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2023</span>  * @param int    $post_id Optional. Post ID. Default is ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2024</span>  * @return array Meta field values.
</code></pre><pre class=''><code><span class='LineNumber'>2025</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2026</span> function get_post_custom_values( $key = '', $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>2027</span> 	if ( !$key )
</code></pre><pre class=''><code><span class='LineNumber'>2028</span> 		return null;
</code></pre><pre class=''><code><span class='LineNumber'>2029</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2030</span> 	$custom = get_post_custom($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>2031</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2032</span> 	return isset($custom[$key]) ? $custom[$key] : null;
</code></pre><pre class=''><code><span class='LineNumber'>2033</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2034</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2035</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2036</span>  * Check if post is sticky.
</code></pre><pre class=''><code><span class='LineNumber'>2037</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2038</span>  * Sticky posts should remain at the top of The Loop. If the post ID is not
</code></pre><pre class=''><code><span class='LineNumber'>2039</span>  * given, then The Loop ID for the current post will be used.
</code></pre><pre class=''><code><span class='LineNumber'>2040</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2041</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2042</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2043</span>  * @param int $post_id Optional. Post ID. Default is ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2044</span>  * @return bool Whether post is sticky.
</code></pre><pre class=''><code><span class='LineNumber'>2045</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2046</span> function is_sticky( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>2047</span> 	$post_id = absint( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2048</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2049</span> 	if ( ! $post_id )
</code></pre><pre class=''><code><span class='LineNumber'>2050</span> 		$post_id = get_the_ID();
</code></pre><pre class=''><code><span class='LineNumber'>2051</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2052</span> 	$stickies = get_option( 'sticky_posts' );
</code></pre><pre class=''><code><span class='LineNumber'>2053</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2054</span> 	if ( ! is_array( $stickies ) )
</code></pre><pre class=''><code><span class='LineNumber'>2055</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>2056</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2057</span> 	if ( in_array( $post_id, $stickies ) )
</code></pre><pre class=''><code><span class='LineNumber'>2058</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>2059</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2060</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>2061</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2062</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2063</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2064</span>  * Sanitize every post field.
</code></pre><pre class=''><code><span class='LineNumber'>2065</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2066</span>  * If the context is 'raw', then the post object or array will get minimal
</code></pre><pre class=''><code><span class='LineNumber'>2067</span>  * sanitization of the integer fields.
</code></pre><pre class=''><code><span class='LineNumber'>2068</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2069</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2070</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2071</span>  * @see sanitize_post_field()
</code></pre><pre class=''><code><span class='LineNumber'>2072</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2073</span>  * @param object|WP_Post|array $post    The Post Object or Array
</code></pre><pre class=''><code><span class='LineNumber'>2074</span>  * @param string               $context Optional. How to sanitize post fields.
</code></pre><pre class=''><code><span class='LineNumber'>2075</span>  *                                      Accepts 'raw', 'edit', 'db', or 'display'.
</code></pre><pre class=''><code><span class='LineNumber'>2076</span>  *                                      Default 'display'.
</code></pre><pre class=''><code><span class='LineNumber'>2077</span>  * @return object|WP_Post|array The now sanitized Post Object or Array (will be the
</code></pre><pre class=''><code><span class='LineNumber'>2078</span>  *                              same type as $post).
</code></pre><pre class=''><code><span class='LineNumber'>2079</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2080</span> function sanitize_post( $post, $context = 'display' ) {
</code></pre><pre class=''><code><span class='LineNumber'>2081</span> 	if ( is_object($post) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2082</span> 		// Check if post already filtered for this context.
</code></pre><pre class=''><code><span class='LineNumber'>2083</span> 		if ( isset($post-&gt;filter) &amp;&amp; $context == $post-&gt;filter )
</code></pre><pre class=''><code><span class='LineNumber'>2084</span> 			return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2085</span> 		if ( !isset($post-&gt;ID) )
</code></pre><pre class=''><code><span class='LineNumber'>2086</span> 			$post-&gt;ID = 0;
</code></pre><pre class=''><code><span class='LineNumber'>2087</span> 		foreach ( array_keys(get_object_vars($post)) as $field )
</code></pre><pre class=''><code><span class='LineNumber'>2088</span> 			$post-&gt;$field = sanitize_post_field($field, $post-&gt;$field, $post-&gt;ID, $context);
</code></pre><pre class=''><code><span class='LineNumber'>2089</span> 		$post-&gt;filter = $context;
</code></pre><pre class=''><code><span class='LineNumber'>2090</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>2091</span> 		// Check if post already filtered for this context.
</code></pre><pre class=''><code><span class='LineNumber'>2092</span> 		if ( isset($post['filter']) &amp;&amp; $context == $post['filter'] )
</code></pre><pre class=''><code><span class='LineNumber'>2093</span> 			return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2094</span> 		if ( !isset($post['ID']) )
</code></pre><pre class=''><code><span class='LineNumber'>2095</span> 			$post['ID'] = 0;
</code></pre><pre class=''><code><span class='LineNumber'>2096</span> 		foreach ( array_keys($post) as $field )
</code></pre><pre class=''><code><span class='LineNumber'>2097</span> 			$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);
</code></pre><pre class=''><code><span class='LineNumber'>2098</span> 		$post['filter'] = $context;
</code></pre><pre class=''><code><span class='LineNumber'>2099</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2100</span> 	return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2101</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2102</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2103</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2104</span>  * Sanitize post field based on context.
</code></pre><pre class=''><code><span class='LineNumber'>2105</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2106</span>  * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and
</code></pre><pre class=''><code><span class='LineNumber'>2107</span>  * 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts
</code></pre><pre class=''><code><span class='LineNumber'>2108</span>  * are treated like 'display' when calling filters.
</code></pre><pre class=''><code><span class='LineNumber'>2109</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2110</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2111</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2112</span>  * @param string $field   The Post Object field name.
</code></pre><pre class=''><code><span class='LineNumber'>2113</span>  * @param mixed  $value   The Post Object value.
</code></pre><pre class=''><code><span class='LineNumber'>2114</span>  * @param int    $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2115</span>  * @param string $context How to sanitize post fields. Looks for 'raw', 'edit',
</code></pre><pre class=''><code><span class='LineNumber'>2116</span>  *                        'db', 'display', 'attribute' and 'js'.
</code></pre><pre class=''><code><span class='LineNumber'>2117</span>  * @return mixed Sanitized value.
</code></pre><pre class=''><code><span class='LineNumber'>2118</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2119</span> function sanitize_post_field($field, $value, $post_id, $context) {
</code></pre><pre class=''><code><span class='LineNumber'>2120</span> 	$int_fields = array('ID', 'post_parent', 'menu_order');
</code></pre><pre class=''><code><span class='LineNumber'>2121</span> 	if ( in_array($field, $int_fields) )
</code></pre><pre class=''><code><span class='LineNumber'>2122</span> 		$value = (int) $value;
</code></pre><pre class=''><code><span class='LineNumber'>2123</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2124</span> 	// Fields which contain arrays of integers.
</code></pre><pre class=''><code><span class='LineNumber'>2125</span> 	$array_int_fields = array( 'ancestors' );
</code></pre><pre class=''><code><span class='LineNumber'>2126</span> 	if ( in_array($field, $array_int_fields) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2127</span> 		$value = array_map( 'absint', $value);
</code></pre><pre class=''><code><span class='LineNumber'>2128</span> 		return $value;
</code></pre><pre class=''><code><span class='LineNumber'>2129</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2130</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2131</span> 	if ( 'raw' == $context )
</code></pre><pre class=''><code><span class='LineNumber'>2132</span> 		return $value;
</code></pre><pre class=''><code><span class='LineNumber'>2133</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2134</span> 	$prefixed = false;
</code></pre><pre class=''><code><span class='LineNumber'>2135</span> 	if ( false !== strpos($field, 'post_') ) {
</code></pre><pre class=''><code><span class='LineNumber'>2136</span> 		$prefixed = true;
</code></pre><pre class=''><code><span class='LineNumber'>2137</span> 		$field_no_prefix = str_replace('post_', '', $field);
</code></pre><pre class=''><code><span class='LineNumber'>2138</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2139</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2140</span> 	if ( 'edit' == $context ) {
</code></pre><pre class=''><code><span class='LineNumber'>2141</span> 		$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');
</code></pre><pre class=''><code><span class='LineNumber'>2142</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2143</span> 		if ( $prefixed ) {
</code></pre><pre class=''><code><span class='LineNumber'>2144</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2145</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2146</span> 			 * Filter the value of a specific post field to edit.
</code></pre><pre class=''><code><span class='LineNumber'>2147</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2148</span> 			 * The dynamic portion of the hook name, $field, refers to the post
</code></pre><pre class=''><code><span class='LineNumber'>2149</span> 			 * field name.
</code></pre><pre class=''><code><span class='LineNumber'>2150</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2151</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2152</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2153</span> 			 * @param mixed $value   Value of the post field.
</code></pre><pre class=''><code><span class='LineNumber'>2154</span> 			 * @param int   $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2155</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2156</span> 			$value = apply_filters( &quot;edit_{$field}&quot;, $value, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2158</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2159</span> 			 * Filter the value of a specific post field to edit.
</code></pre><pre class=''><code><span class='LineNumber'>2160</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2161</span> 			 * The dynamic portion of the hook name, $field_no_prefix, refers to
</code></pre><pre class=''><code><span class='LineNumber'>2162</span> 			 * the post field name.
</code></pre><pre class=''><code><span class='LineNumber'>2163</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2164</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2165</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2166</span> 			 * @param mixed $value   Value of the post field.
</code></pre><pre class=''><code><span class='LineNumber'>2167</span> 			 * @param int   $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2168</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2169</span> 			$value = apply_filters( &quot;{$field_no_prefix}_edit_pre&quot;, $value, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2170</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>2171</span> 			$value = apply_filters( &quot;edit_post_{$field}&quot;, $value, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2172</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2173</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2174</span> 		if ( in_array($field, $format_to_edit) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2175</span> 			if ( 'post_content' == $field )
</code></pre><pre class=''><code><span class='LineNumber'>2176</span> 				$value = format_to_edit($value, user_can_richedit());
</code></pre><pre class=''><code><span class='LineNumber'>2177</span> 			else
</code></pre><pre class=''><code><span class='LineNumber'>2178</span> 				$value = format_to_edit($value);
</code></pre><pre class=''><code><span class='LineNumber'>2179</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>2180</span> 			$value = esc_attr($value);
</code></pre><pre class=''><code><span class='LineNumber'>2181</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2182</span> 	} else if ( 'db' == $context ) {
</code></pre><pre class=''><code><span class='LineNumber'>2183</span> 		if ( $prefixed ) {
</code></pre><pre class=''><code><span class='LineNumber'>2184</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2185</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2186</span> 			 * Filter the value of a specific post field before saving.
</code></pre><pre class=''><code><span class='LineNumber'>2187</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2188</span> 			 * The dynamic portion of the hook name, $field, refers to the post
</code></pre><pre class=''><code><span class='LineNumber'>2189</span> 			 * field name.
</code></pre><pre class=''><code><span class='LineNumber'>2190</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2191</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2192</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2193</span> 			 * @param mixed $value Value of the post field.
</code></pre><pre class=''><code><span class='LineNumber'>2194</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2195</span> 			$value = apply_filters( &quot;pre_{$field}&quot;, $value );
</code></pre><pre class=''><code><span class='LineNumber'>2196</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2197</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2198</span> 			 * Filter the value of a specific field before saving.
</code></pre><pre class=''><code><span class='LineNumber'>2199</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2200</span> 			 * The dynamic portion of the hook name, $field_no_prefix, refers
</code></pre><pre class=''><code><span class='LineNumber'>2201</span> 			 * to the post field name.
</code></pre><pre class=''><code><span class='LineNumber'>2202</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2203</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2204</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2205</span> 			 * @param mixed $value Value of the post field.
</code></pre><pre class=''><code><span class='LineNumber'>2206</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2207</span> 			$value = apply_filters( &quot;{$field_no_prefix}_save_pre&quot;, $value );
</code></pre><pre class=''><code><span class='LineNumber'>2208</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>2209</span> 			$value = apply_filters( &quot;pre_post_{$field}&quot;, $value );
</code></pre><pre class=''><code><span class='LineNumber'>2210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2211</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2212</span> 			 * Filter the value of a specific post field before saving.
</code></pre><pre class=''><code><span class='LineNumber'>2213</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2214</span> 			 * The dynamic portion of the hook name, $field, refers to the post
</code></pre><pre class=''><code><span class='LineNumber'>2215</span> 			 * field name.
</code></pre><pre class=''><code><span class='LineNumber'>2216</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2217</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2218</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2219</span> 			 * @param mixed $value Value of the post field.
</code></pre><pre class=''><code><span class='LineNumber'>2220</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2221</span> 			$value = apply_filters( &quot;{$field}_pre&quot;, $value );
</code></pre><pre class=''><code><span class='LineNumber'>2222</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2223</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>2224</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2225</span> 		// Use display filters by default.
</code></pre><pre class=''><code><span class='LineNumber'>2226</span> 		if ( $prefixed ) {
</code></pre><pre class=''><code><span class='LineNumber'>2227</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2228</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>2229</span> 			 * Filter the value of a specific post field for display.
</code></pre><pre class=''><code><span class='LineNumber'>2230</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2231</span> 			 * The dynamic portion of the hook name, $field, refers to the post
</code></pre><pre class=''><code><span class='LineNumber'>2232</span> 			 * field name.
</code></pre><pre class=''><code><span class='LineNumber'>2233</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2234</span> 			 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2235</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>2236</span> 			 * @param mixed  $value   Value of the prefixed post field.
</code></pre><pre class=''><code><span class='LineNumber'>2237</span> 			 * @param int    $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2238</span> 			 * @param string $context Context for how to sanitize the field. Possible
</code></pre><pre class=''><code><span class='LineNumber'>2239</span> 			 *                        values include 'raw', 'edit', 'db', 'display',
</code></pre><pre class=''><code><span class='LineNumber'>2240</span> 			 *                        'attribute' and 'js'.
</code></pre><pre class=''><code><span class='LineNumber'>2241</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>2242</span> 			$value = apply_filters( $field, $value, $post_id, $context );
</code></pre><pre class=''><code><span class='LineNumber'>2243</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>2244</span> 			$value = apply_filters( &quot;post_{$field}&quot;, $value, $post_id, $context );
</code></pre><pre class=''><code><span class='LineNumber'>2245</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2246</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2247</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2248</span> 	if ( 'attribute' == $context )
</code></pre><pre class=''><code><span class='LineNumber'>2249</span> 		$value = esc_attr($value);
</code></pre><pre class=''><code><span class='LineNumber'>2250</span> 	else if ( 'js' == $context )
</code></pre><pre class=''><code><span class='LineNumber'>2251</span> 		$value = esc_js($value);
</code></pre><pre class=''><code><span class='LineNumber'>2252</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2253</span> 	return $value;
</code></pre><pre class=''><code><span class='LineNumber'>2254</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2255</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2256</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2257</span>  * Make a post sticky.
</code></pre><pre class=''><code><span class='LineNumber'>2258</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2259</span>  * Sticky posts should be displayed at the top of the front page.
</code></pre><pre class=''><code><span class='LineNumber'>2260</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2261</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2262</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2263</span>  * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2264</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2265</span> function stick_post( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>2266</span> 	$stickies = get_option('sticky_posts');
</code></pre><pre class=''><code><span class='LineNumber'>2267</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2268</span> 	if ( !is_array($stickies) )
</code></pre><pre class=''><code><span class='LineNumber'>2269</span> 		$stickies = array($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>2270</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2271</span> 	if ( ! in_array($post_id, $stickies) )
</code></pre><pre class=''><code><span class='LineNumber'>2272</span> 		$stickies[] = $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>2273</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2274</span> 	update_option('sticky_posts', $stickies);
</code></pre><pre class=''><code><span class='LineNumber'>2275</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2276</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2277</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2278</span>  * Un-stick a post.
</code></pre><pre class=''><code><span class='LineNumber'>2279</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2280</span>  * Sticky posts should be displayed at the top of the front page.
</code></pre><pre class=''><code><span class='LineNumber'>2281</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2282</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2283</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2284</span>  * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2285</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2286</span> function unstick_post( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>2287</span> 	$stickies = get_option('sticky_posts');
</code></pre><pre class=''><code><span class='LineNumber'>2288</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2289</span> 	if ( !is_array($stickies) )
</code></pre><pre class=''><code><span class='LineNumber'>2290</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2291</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2292</span> 	if ( ! in_array($post_id, $stickies) )
</code></pre><pre class=''><code><span class='LineNumber'>2293</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2294</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2295</span> 	$offset = array_search($post_id, $stickies);
</code></pre><pre class=''><code><span class='LineNumber'>2296</span> 	if ( false === $offset )
</code></pre><pre class=''><code><span class='LineNumber'>2297</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2298</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2299</span> 	array_splice($stickies, $offset, 1);
</code></pre><pre class=''><code><span class='LineNumber'>2300</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2301</span> 	update_option('sticky_posts', $stickies);
</code></pre><pre class=''><code><span class='LineNumber'>2302</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2303</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2304</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2305</span>  * Return the cache key for wp_count_posts() based on the passed arguments.
</code></pre><pre class=''><code><span class='LineNumber'>2306</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2307</span>  * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2308</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2309</span>  * @param string $type Optional. Post type to retrieve count Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>2310</span>  * @param string $perm Optional. 'readable' or empty. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2311</span>  * @return string The cache key.
</code></pre><pre class=''><code><span class='LineNumber'>2312</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2313</span> function _count_posts_cache_key( $type = 'post', $perm = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>2314</span> 	$cache_key = 'posts-' . $type;
</code></pre><pre class=''><code><span class='LineNumber'>2315</span> 	if ( 'readable' == $perm &amp;&amp; is_user_logged_in() ) {
</code></pre><pre class=''><code><span class='LineNumber'>2316</span> 		$post_type_object = get_post_type_object( $type );
</code></pre><pre class=''><code><span class='LineNumber'>2317</span> 		if ( $post_type_object &amp;&amp; ! current_user_can( $post_type_object-&gt;cap-&gt;read_private_posts ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2318</span> 			$cache_key .= '_' . $perm . '_' . get_current_user_id();
</code></pre><pre class=''><code><span class='LineNumber'>2319</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2320</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2321</span> 	return $cache_key;
</code></pre><pre class=''><code><span class='LineNumber'>2322</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2323</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2324</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2325</span>  * Count number of posts of a post type and if user has permissions to view.
</code></pre><pre class=''><code><span class='LineNumber'>2326</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2327</span>  * This function provides an efficient method of finding the amount of post's
</code></pre><pre class=''><code><span class='LineNumber'>2328</span>  * type a blog has. Another method is to count the amount of items in
</code></pre><pre class=''><code><span class='LineNumber'>2329</span>  * get_posts(), but that method has a lot of overhead with doing so. Therefore,
</code></pre><pre class=''><code><span class='LineNumber'>2330</span>  * when developing for 2.5+, use this function instead.
</code></pre><pre class=''><code><span class='LineNumber'>2331</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2332</span>  * The $perm parameter checks for 'readable' value and if the user can read
</code></pre><pre class=''><code><span class='LineNumber'>2333</span>  * private posts, it will display that for the user that is signed in.
</code></pre><pre class=''><code><span class='LineNumber'>2334</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2335</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>2336</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2337</span>  * @param string $type Optional. Post type to retrieve count. Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>2338</span>  * @param string $perm Optional. 'readable' or empty. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2339</span>  * @return object Number of posts for each status.
</code></pre><pre class=''><code><span class='LineNumber'>2340</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2341</span> function wp_count_posts( $type = 'post', $perm = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>2342</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>2343</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2344</span> 	if ( ! post_type_exists( $type ) )
</code></pre><pre class=''><code><span class='LineNumber'>2345</span> 		return new stdClass;
</code></pre><pre class=''><code><span class='LineNumber'>2346</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2347</span> 	$cache_key = _count_posts_cache_key( $type, $perm );
</code></pre><pre class=''><code><span class='LineNumber'>2348</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2349</span> 	$query = &quot;SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb-&gt;posts} WHERE post_type = %s&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2350</span> 	if ( 'readable' == $perm &amp;&amp; is_user_logged_in() ) {
</code></pre><pre class=''><code><span class='LineNumber'>2351</span> 		$post_type_object = get_post_type_object($type);
</code></pre><pre class=''><code><span class='LineNumber'>2352</span> 		if ( ! current_user_can( $post_type_object-&gt;cap-&gt;read_private_posts ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2353</span> 			$query .= $wpdb-&gt;prepare( &quot; AND (post_status != 'private' OR ( post_author = %d AND post_status = 'private' ))&quot;,
</code></pre><pre class=''><code><span class='LineNumber'>2354</span> 				get_current_user_id()
</code></pre><pre class=''><code><span class='LineNumber'>2355</span> 			);
</code></pre><pre class=''><code><span class='LineNumber'>2356</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2357</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2358</span> 	$query .= ' GROUP BY post_status';
</code></pre><pre class=''><code><span class='LineNumber'>2359</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2360</span> 	$counts = wp_cache_get( $cache_key, 'counts' );
</code></pre><pre class=''><code><span class='LineNumber'>2361</span> 	if ( false === $counts ) {
</code></pre><pre class=''><code><span class='LineNumber'>2362</span> 		$results = (array) $wpdb-&gt;get_results( $wpdb-&gt;prepare( $query, $type ), ARRAY_A );
</code></pre><pre class=''><code><span class='LineNumber'>2363</span> 		$counts = array_fill_keys( get_post_stati(), 0 );
</code></pre><pre class=''><code><span class='LineNumber'>2364</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2365</span> 		foreach ( $results as $row )
</code></pre><pre class=''><code><span class='LineNumber'>2366</span> 			$counts[ $row['post_status'] ] = $row['num_posts'];
</code></pre><pre class=''><code><span class='LineNumber'>2367</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2368</span> 		$counts = (object) $counts;
</code></pre><pre class=''><code><span class='LineNumber'>2369</span> 		wp_cache_set( $cache_key, $counts, 'counts' );
</code></pre><pre class=''><code><span class='LineNumber'>2370</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2371</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2372</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2373</span> 	 * Modify returned post counts by status for the current post type.
</code></pre><pre class=''><code><span class='LineNumber'>2374</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2375</span> 	 * @since 3.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2376</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2377</span> 	 * @param object $counts An object containing the current post_type's post
</code></pre><pre class=''><code><span class='LineNumber'>2378</span> 	 *                       counts by status.
</code></pre><pre class=''><code><span class='LineNumber'>2379</span> 	 * @param string $type   Post type.
</code></pre><pre class=''><code><span class='LineNumber'>2380</span> 	 * @param string $perm   The permission to determine if the posts are 'readable'
</code></pre><pre class=''><code><span class='LineNumber'>2381</span> 	 *                       by the current user.
</code></pre><pre class=''><code><span class='LineNumber'>2382</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2383</span> 	return apply_filters( 'wp_count_posts', $counts, $type, $perm );
</code></pre><pre class=''><code><span class='LineNumber'>2384</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2385</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2386</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2387</span>  * Count number of attachments for the mime type(s).
</code></pre><pre class=''><code><span class='LineNumber'>2388</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2389</span>  * If you set the optional mime_type parameter, then an array will still be
</code></pre><pre class=''><code><span class='LineNumber'>2390</span>  * returned, but will only have the item you are looking for. It does not give
</code></pre><pre class=''><code><span class='LineNumber'>2391</span>  * you the number of attachments that are children of a post. You can get that
</code></pre><pre class=''><code><span class='LineNumber'>2392</span>  * by counting the number of children that post has.
</code></pre><pre class=''><code><span class='LineNumber'>2393</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2394</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>2395</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2396</span>  * @param string|array $mime_type Optional. Array or comma-separated list of
</code></pre><pre class=''><code><span class='LineNumber'>2397</span>  *                                MIME patterns. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2398</span>  * @return object An object containing the attachment counts by mime type.
</code></pre><pre class=''><code><span class='LineNumber'>2399</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2400</span> function wp_count_attachments( $mime_type = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>2401</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>2402</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2403</span> 	$and = wp_post_mime_type_where( $mime_type );
</code></pre><pre class=''><code><span class='LineNumber'>2404</span> 	$count = $wpdb-&gt;get_results( &quot;SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb-&gt;posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type&quot;, ARRAY_A );
</code></pre><pre class=''><code><span class='LineNumber'>2405</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2406</span> 	$counts = array();
</code></pre><pre class=''><code><span class='LineNumber'>2407</span> 	foreach( (array) $count as $row ) {
</code></pre><pre class=''><code><span class='LineNumber'>2408</span> 		$counts[ $row['post_mime_type'] ] = $row['num_posts'];
</code></pre><pre class=''><code><span class='LineNumber'>2409</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2410</span> 	$counts['trash'] = $wpdb-&gt;get_var( &quot;SELECT COUNT( * ) FROM $wpdb-&gt;posts WHERE post_type = 'attachment' AND post_status = 'trash' $and&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>2411</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2412</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2413</span> 	 * Modify returned attachment counts by mime type.
</code></pre><pre class=''><code><span class='LineNumber'>2414</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2415</span> 	 * @since 3.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2416</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2417</span> 	 * @param object $counts    An object containing the attachment counts by
</code></pre><pre class=''><code><span class='LineNumber'>2418</span> 	 *                          mime type.
</code></pre><pre class=''><code><span class='LineNumber'>2419</span> 	 * @param string $mime_type The mime type pattern used to filter the attachments
</code></pre><pre class=''><code><span class='LineNumber'>2420</span> 	 *                          counted.
</code></pre><pre class=''><code><span class='LineNumber'>2421</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2422</span> 	return apply_filters( 'wp_count_attachments', (object) $counts, $mime_type );
</code></pre><pre class=''><code><span class='LineNumber'>2423</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2424</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2425</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2426</span>  * Get default post mime types.
</code></pre><pre class=''><code><span class='LineNumber'>2427</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2428</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2429</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2430</span>  * @return array List of post mime types.
</code></pre><pre class=''><code><span class='LineNumber'>2431</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2432</span> function get_post_mime_types() {
</code></pre><pre class=''><code><span class='LineNumber'>2433</span> 	$post_mime_types = array(	//	array( adj, noun )
</code></pre><pre class=''><code><span class='LineNumber'>2434</span> 		'image' =&gt; array(__('Images'), __('Manage Images'), _n_noop('Image &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Images &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;')),
</code></pre><pre class=''><code><span class='LineNumber'>2435</span> 		'audio' =&gt; array(__('Audio'), __('Manage Audio'), _n_noop('Audio &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Audio &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;')),
</code></pre><pre class=''><code><span class='LineNumber'>2436</span> 		'video' =&gt; array(__('Video'), __('Manage Video'), _n_noop('Video &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;', 'Video &lt;span class=&quot;count&quot;&gt;(%s)&lt;/span&gt;')),
</code></pre><pre class=''><code><span class='LineNumber'>2437</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>2438</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2439</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2440</span> 	 * Filter the default list of post mime types.
</code></pre><pre class=''><code><span class='LineNumber'>2441</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2442</span> 	 * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>2443</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2444</span> 	 * @param array $post_mime_types Default list of post mime types.
</code></pre><pre class=''><code><span class='LineNumber'>2445</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2446</span> 	return apply_filters( 'post_mime_types', $post_mime_types );
</code></pre><pre class=''><code><span class='LineNumber'>2447</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2448</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2449</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2450</span>  * Check a MIME-Type against a list.
</code></pre><pre class=''><code><span class='LineNumber'>2451</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2452</span>  * If the wildcard_mime_types parameter is a string, it must be comma separated
</code></pre><pre class=''><code><span class='LineNumber'>2453</span>  * list. If the real_mime_types is a string, it is also comma separated to
</code></pre><pre class=''><code><span class='LineNumber'>2454</span>  * create the list.
</code></pre><pre class=''><code><span class='LineNumber'>2455</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2456</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>2457</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2458</span>  * @param string|array $wildcard_mime_types Mime types, e.g. audio/mpeg or image (same as image/*)
</code></pre><pre class=''><code><span class='LineNumber'>2459</span>  *                                          or flash (same as *flash*).
</code></pre><pre class=''><code><span class='LineNumber'>2460</span>  * @param string|array $real_mime_types     Real post mime type values.
</code></pre><pre class=''><code><span class='LineNumber'>2461</span>  * @return array array(wildcard=&gt;array(real types)).
</code></pre><pre class=''><code><span class='LineNumber'>2462</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2463</span> function wp_match_mime_types( $wildcard_mime_types, $real_mime_types ) {
</code></pre><pre class=''><code><span class='LineNumber'>2464</span> 	$matches = array();
</code></pre><pre class=''><code><span class='LineNumber'>2465</span> 	if ( is_string( $wildcard_mime_types ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2466</span> 		$wildcard_mime_types = array_map( 'trim', explode( ',', $wildcard_mime_types ) );
</code></pre><pre class=''><code><span class='LineNumber'>2467</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2468</span> 	if ( is_string( $real_mime_types ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2469</span> 		$real_mime_types = array_map( 'trim', explode( ',', $real_mime_types ) );
</code></pre><pre class=''><code><span class='LineNumber'>2470</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2471</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2472</span> 	$patternses = array();
</code></pre><pre class=''><code><span class='LineNumber'>2473</span> 	$wild = '[-._a-z0-9]*';
</code></pre><pre class=''><code><span class='LineNumber'>2474</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2475</span> 	foreach ( (array) $wildcard_mime_types as $type ) {
</code></pre><pre class=''><code><span class='LineNumber'>2476</span> 		$regex = str_replace( '__wildcard__', $wild, preg_quote( str_replace( '*', '__wildcard__', $type ) ) );
</code></pre><pre class=''><code><span class='LineNumber'>2477</span> 		$patternses[1][$type] = &quot;^$regex$&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2478</span> 		if ( false === strpos($type, '/') ) {
</code></pre><pre class=''><code><span class='LineNumber'>2479</span> 			$patternses[2][$type] = &quot;^$regex/&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2480</span> 			$patternses[3][$type] = $regex;
</code></pre><pre class=''><code><span class='LineNumber'>2481</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2482</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2483</span> 	asort( $patternses );
</code></pre><pre class=''><code><span class='LineNumber'>2484</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2485</span> 	foreach ( $patternses as $patterns ) {
</code></pre><pre class=''><code><span class='LineNumber'>2486</span> 		foreach ( $patterns as $type =&gt; $pattern ) {
</code></pre><pre class=''><code><span class='LineNumber'>2487</span> 			foreach ( (array) $real_mime_types as $real ) {
</code></pre><pre class=''><code><span class='LineNumber'>2488</span> 				if ( preg_match( &quot;#$pattern#&quot;, $real ) &amp;&amp; ( empty( $matches[$type] ) || false === array_search( $real, $matches[$type] ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2489</span> 					$matches[$type][] = $real;
</code></pre><pre class=''><code><span class='LineNumber'>2490</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>2491</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>2492</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2493</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2494</span> 	return $matches;
</code></pre><pre class=''><code><span class='LineNumber'>2495</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2496</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2497</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2498</span>  * Convert MIME types into SQL.
</code></pre><pre class=''><code><span class='LineNumber'>2499</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2500</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>2501</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2502</span>  * @param string|array $post_mime_types List of mime types or comma separated string
</code></pre><pre class=''><code><span class='LineNumber'>2503</span>  *                                      of mime types.
</code></pre><pre class=''><code><span class='LineNumber'>2504</span>  * @param string       $table_alias     Optional. Specify a table alias, if needed.
</code></pre><pre class=''><code><span class='LineNumber'>2505</span>  *                                      Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2506</span>  * @return string The SQL AND clause for mime searching.
</code></pre><pre class=''><code><span class='LineNumber'>2507</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2508</span> function wp_post_mime_type_where( $post_mime_types, $table_alias = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>2509</span> 	$where = '';
</code></pre><pre class=''><code><span class='LineNumber'>2510</span> 	$wildcards = array('', '%', '%/%');
</code></pre><pre class=''><code><span class='LineNumber'>2511</span> 	if ( is_string($post_mime_types) )
</code></pre><pre class=''><code><span class='LineNumber'>2512</span> 		$post_mime_types = array_map('trim', explode(',', $post_mime_types));
</code></pre><pre class=''><code><span class='LineNumber'>2513</span> 	foreach ( (array) $post_mime_types as $mime_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>2514</span> 		$mime_type = preg_replace('/\s/', '', $mime_type);
</code></pre><pre class=''><code><span class='LineNumber'>2515</span> 		$slashpos = strpos($mime_type, '/');
</code></pre><pre class=''><code><span class='LineNumber'>2516</span> 		if ( false !== $slashpos ) {
</code></pre><pre class=''><code><span class='LineNumber'>2517</span> 			$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));
</code></pre><pre class=''><code><span class='LineNumber'>2518</span> 			$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));
</code></pre><pre class=''><code><span class='LineNumber'>2519</span> 			if ( empty($mime_subgroup) )
</code></pre><pre class=''><code><span class='LineNumber'>2520</span> 				$mime_subgroup = '*';
</code></pre><pre class=''><code><span class='LineNumber'>2521</span> 			else
</code></pre><pre class=''><code><span class='LineNumber'>2522</span> 				$mime_subgroup = str_replace('/', '', $mime_subgroup);
</code></pre><pre class=''><code><span class='LineNumber'>2523</span> 			$mime_pattern = &quot;$mime_group/$mime_subgroup&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2524</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>2525</span> 			$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);
</code></pre><pre class=''><code><span class='LineNumber'>2526</span> 			if ( false === strpos($mime_pattern, '*') )
</code></pre><pre class=''><code><span class='LineNumber'>2527</span> 				$mime_pattern .= '/*';
</code></pre><pre class=''><code><span class='LineNumber'>2528</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2529</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2530</span> 		$mime_pattern = preg_replace('/\*+/', '%', $mime_pattern);
</code></pre><pre class=''><code><span class='LineNumber'>2531</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2532</span> 		if ( in_array( $mime_type, $wildcards ) )
</code></pre><pre class=''><code><span class='LineNumber'>2533</span> 			return '';
</code></pre><pre class=''><code><span class='LineNumber'>2534</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2535</span> 		if ( false !== strpos($mime_pattern, '%') )
</code></pre><pre class=''><code><span class='LineNumber'>2536</span> 			$wheres[] = empty($table_alias) ? &quot;post_mime_type LIKE '$mime_pattern'&quot; : &quot;$table_alias.post_mime_type LIKE '$mime_pattern'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2537</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>2538</span> 			$wheres[] = empty($table_alias) ? &quot;post_mime_type = '$mime_pattern'&quot; : &quot;$table_alias.post_mime_type = '$mime_pattern'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>2539</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2540</span> 	if ( !empty($wheres) )
</code></pre><pre class=''><code><span class='LineNumber'>2541</span> 		$where = ' AND (' . join(' OR ', $wheres) . ') ';
</code></pre><pre class=''><code><span class='LineNumber'>2542</span> 	return $where;
</code></pre><pre class=''><code><span class='LineNumber'>2543</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2544</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2545</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2546</span>  * Trash or delete a post or page.
</code></pre><pre class=''><code><span class='LineNumber'>2547</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2548</span>  * When the post and page is permanently deleted, everything that is tied to
</code></pre><pre class=''><code><span class='LineNumber'>2549</span>  * it is deleted also. This includes comments, post meta fields, and terms
</code></pre><pre class=''><code><span class='LineNumber'>2550</span>  * associated with the post.
</code></pre><pre class=''><code><span class='LineNumber'>2551</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2552</span>  * The post or page is moved to trash instead of permanently deleted unless
</code></pre><pre class=''><code><span class='LineNumber'>2553</span>  * trash is disabled, item is already in the trash, or $force_delete is true.
</code></pre><pre class=''><code><span class='LineNumber'>2554</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2555</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>2556</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2557</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>2558</span>  * @see wp_delete_attachment()
</code></pre><pre class=''><code><span class='LineNumber'>2559</span>  * @see wp_trash_post()
</code></pre><pre class=''><code><span class='LineNumber'>2560</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2561</span>  * @param int  $postid       Optional. Post ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>2562</span>  * @param bool $force_delete Optional. Whether to bypass trash and force deletion.
</code></pre><pre class=''><code><span class='LineNumber'>2563</span>  *                           Default false.
</code></pre><pre class=''><code><span class='LineNumber'>2564</span>  * @return array|bool|WP_Post False on failure.
</code></pre><pre class=''><code><span class='LineNumber'>2565</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2566</span> function wp_delete_post( $postid = 0, $force_delete = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>2567</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>2568</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2569</span> 	if ( !$post = $wpdb-&gt;get_row($wpdb-&gt;prepare(&quot;SELECT * FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $postid)) )
</code></pre><pre class=''><code><span class='LineNumber'>2570</span> 		return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2571</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2572</span> 	if ( !$force_delete &amp;&amp; ( $post-&gt;post_type == 'post' || $post-&gt;post_type == 'page') &amp;&amp; get_post_status( $postid ) != 'trash' &amp;&amp; EMPTY_TRASH_DAYS )
</code></pre><pre class=''><code><span class='LineNumber'>2573</span> 			return wp_trash_post($postid);
</code></pre><pre class=''><code><span class='LineNumber'>2574</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2575</span> 	if ( $post-&gt;post_type == 'attachment' )
</code></pre><pre class=''><code><span class='LineNumber'>2576</span> 		return wp_delete_attachment( $postid, $force_delete );
</code></pre><pre class=''><code><span class='LineNumber'>2577</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2578</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2579</span> 	 * Fires before a post is deleted, at the start of wp_delete_post().
</code></pre><pre class=''><code><span class='LineNumber'>2580</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2581</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>2582</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2583</span> 	 * @see wp_delete_post()
</code></pre><pre class=''><code><span class='LineNumber'>2584</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2585</span> 	 * @param int $postid Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2586</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2587</span> 	do_action( 'before_delete_post', $postid );
</code></pre><pre class=''><code><span class='LineNumber'>2588</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2589</span> 	delete_post_meta($postid,'_wp_trash_meta_status');
</code></pre><pre class=''><code><span class='LineNumber'>2590</span> 	delete_post_meta($postid,'_wp_trash_meta_time');
</code></pre><pre class=''><code><span class='LineNumber'>2591</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2592</span> 	wp_delete_object_term_relationships($postid, get_object_taxonomies($post-&gt;post_type));
</code></pre><pre class=''><code><span class='LineNumber'>2593</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2594</span> 	$parent_data = array( 'post_parent' =&gt; $post-&gt;post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>2595</span> 	$parent_where = array( 'post_parent' =&gt; $postid );
</code></pre><pre class=''><code><span class='LineNumber'>2596</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2597</span> 	if ( is_post_type_hierarchical( $post-&gt;post_type ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2598</span> 		// Point children of this page to its parent, also clean the cache of affected children.
</code></pre><pre class=''><code><span class='LineNumber'>2599</span> 		$children_query = $wpdb-&gt;prepare( &quot;SELECT * FROM $wpdb-&gt;posts WHERE post_parent = %d AND post_type = %s&quot;, $postid, $post-&gt;post_type );
</code></pre><pre class=''><code><span class='LineNumber'>2600</span> 		$children = $wpdb-&gt;get_results( $children_query );
</code></pre><pre class=''><code><span class='LineNumber'>2601</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2602</span> 		$wpdb-&gt;update( $wpdb-&gt;posts, $parent_data, $parent_where + array( 'post_type' =&gt; $post-&gt;post_type ) );
</code></pre><pre class=''><code><span class='LineNumber'>2603</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2604</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2605</span> 	// Do raw query. wp_get_post_revisions() is filtered.
</code></pre><pre class=''><code><span class='LineNumber'>2606</span> 	$revision_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT ID FROM $wpdb-&gt;posts WHERE post_parent = %d AND post_type = 'revision'&quot;, $postid ) );
</code></pre><pre class=''><code><span class='LineNumber'>2607</span> 	// Use wp_delete_post (via wp_delete_post_revision) again. Ensures any meta/misplaced data gets cleaned up.
</code></pre><pre class=''><code><span class='LineNumber'>2608</span> 	foreach ( $revision_ids as $revision_id )
</code></pre><pre class=''><code><span class='LineNumber'>2609</span> 		wp_delete_post_revision( $revision_id );
</code></pre><pre class=''><code><span class='LineNumber'>2610</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2611</span> 	// Point all attachments to this post up one level.
</code></pre><pre class=''><code><span class='LineNumber'>2612</span> 	$wpdb-&gt;update( $wpdb-&gt;posts, $parent_data, $parent_where + array( 'post_type' =&gt; 'attachment' ) );
</code></pre><pre class=''><code><span class='LineNumber'>2613</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2614</span> 	$comment_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT comment_ID FROM $wpdb-&gt;comments WHERE comment_post_ID = %d&quot;, $postid ));
</code></pre><pre class=''><code><span class='LineNumber'>2615</span> 	foreach ( $comment_ids as $comment_id )
</code></pre><pre class=''><code><span class='LineNumber'>2616</span> 		wp_delete_comment( $comment_id, true );
</code></pre><pre class=''><code><span class='LineNumber'>2617</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2618</span> 	$post_meta_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT meta_id FROM $wpdb-&gt;postmeta WHERE post_id = %d &quot;, $postid ));
</code></pre><pre class=''><code><span class='LineNumber'>2619</span> 	foreach ( $post_meta_ids as $mid )
</code></pre><pre class=''><code><span class='LineNumber'>2620</span> 		delete_metadata_by_mid( 'post', $mid );
</code></pre><pre class=''><code><span class='LineNumber'>2621</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2622</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2623</span> 	 * Fires immediately before a post is deleted from the database.
</code></pre><pre class=''><code><span class='LineNumber'>2624</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2625</span> 	 * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>2626</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2627</span> 	 * @param int $postid Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2628</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2629</span> 	do_action( 'delete_post', $postid );
</code></pre><pre class=''><code><span class='LineNumber'>2630</span> 	$result = $wpdb-&gt;delete( $wpdb-&gt;posts, array( 'ID' =&gt; $postid ) );
</code></pre><pre class=''><code><span class='LineNumber'>2631</span> 	if ( ! $result ) {
</code></pre><pre class=''><code><span class='LineNumber'>2632</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>2633</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2634</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2635</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2636</span> 	 * Fires immediately after a post is deleted from the database.
</code></pre><pre class=''><code><span class='LineNumber'>2637</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2638</span> 	 * @since 2.2.0
</code></pre><pre class=''><code><span class='LineNumber'>2639</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2640</span> 	 * @param int $postid Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2641</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2642</span> 	do_action( 'deleted_post', $postid );
</code></pre><pre class=''><code><span class='LineNumber'>2643</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2644</span> 	clean_post_cache( $post );
</code></pre><pre class=''><code><span class='LineNumber'>2645</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2646</span> 	if ( is_post_type_hierarchical( $post-&gt;post_type ) &amp;&amp; $children ) {
</code></pre><pre class=''><code><span class='LineNumber'>2647</span> 		foreach ( $children as $child )
</code></pre><pre class=''><code><span class='LineNumber'>2648</span> 			clean_post_cache( $child );
</code></pre><pre class=''><code><span class='LineNumber'>2649</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2650</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2651</span> 	wp_clear_scheduled_hook('publish_future_post', array( $postid ) );
</code></pre><pre class=''><code><span class='LineNumber'>2652</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2653</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2654</span> 	 * Fires after a post is deleted, at the conclusion of wp_delete_post().
</code></pre><pre class=''><code><span class='LineNumber'>2655</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2656</span> 	 * @since 3.2.0
</code></pre><pre class=''><code><span class='LineNumber'>2657</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2658</span> 	 * @see wp_delete_post()
</code></pre><pre class=''><code><span class='LineNumber'>2659</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2660</span> 	 * @param int $postid Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2661</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2662</span> 	do_action( 'after_delete_post', $postid );
</code></pre><pre class=''><code><span class='LineNumber'>2663</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2664</span> 	return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2665</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2666</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2667</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2668</span>  * Reset the page_on_front, show_on_front, and page_for_post settings when
</code></pre><pre class=''><code><span class='LineNumber'>2669</span>  * a linked page is deleted or trashed.
</code></pre><pre class=''><code><span class='LineNumber'>2670</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2671</span>  * Also ensures the post is no longer sticky.
</code></pre><pre class=''><code><span class='LineNumber'>2672</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2673</span>  * @since 3.7.0
</code></pre><pre class=''><code><span class='LineNumber'>2674</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>2675</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2676</span>  * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2677</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2678</span> function _reset_front_page_settings_for_post( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>2679</span> 	$post = get_post( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2680</span> 	if ( 'page' == $post-&gt;post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>2681</span> 	 	/*
</code></pre><pre class=''><code><span class='LineNumber'>2682</span> 	 	 * If the page is defined in option page_on_front or post_for_posts,
</code></pre><pre class=''><code><span class='LineNumber'>2683</span> 	 	 * adjust the corresponding options.
</code></pre><pre class=''><code><span class='LineNumber'>2684</span> 	 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2685</span> 		if ( get_option( 'page_on_front' ) == $post-&gt;ID ) {
</code></pre><pre class=''><code><span class='LineNumber'>2686</span> 			update_option( 'show_on_front', 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>2687</span> 			update_option( 'page_on_front', 0 );
</code></pre><pre class=''><code><span class='LineNumber'>2688</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2689</span> 		if ( get_option( 'page_for_posts' ) == $post-&gt;ID ) {
</code></pre><pre class=''><code><span class='LineNumber'>2690</span> 			delete_option( 'page_for_posts', 0 );
</code></pre><pre class=''><code><span class='LineNumber'>2691</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>2692</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2693</span> 	unstick_post( $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>2694</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2695</span> add_action( 'before_delete_post', '_reset_front_page_settings_for_post' );
</code></pre><pre class=''><code><span class='LineNumber'>2696</span> add_action( 'wp_trash_post',      '_reset_front_page_settings_for_post' );
</code></pre><pre class=''><code><span class='LineNumber'>2697</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2698</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2699</span>  * Move a post or page to the Trash
</code></pre><pre class=''><code><span class='LineNumber'>2700</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2701</span>  * If trash is disabled, the post or page is permanently deleted.
</code></pre><pre class=''><code><span class='LineNumber'>2702</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2703</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2704</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2705</span>  * @see wp_delete_post()
</code></pre><pre class=''><code><span class='LineNumber'>2706</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2707</span>  * @param int $post_id Optional. Post ID. Default is ID of the global $post
</code></pre><pre class=''><code><span class='LineNumber'>2708</span>  *                     if EMPTY_TRASH_DAYS equals true.
</code></pre><pre class=''><code><span class='LineNumber'>2709</span>  * @return bool|array Post data array, otherwise false.
</code></pre><pre class=''><code><span class='LineNumber'>2710</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2711</span> function wp_trash_post( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>2712</span> 	if ( !EMPTY_TRASH_DAYS )
</code></pre><pre class=''><code><span class='LineNumber'>2713</span> 		return wp_delete_post($post_id, true);
</code></pre><pre class=''><code><span class='LineNumber'>2714</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2715</span> 	if ( !$post = get_post($post_id, ARRAY_A) )
</code></pre><pre class=''><code><span class='LineNumber'>2716</span> 		return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2717</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2718</span> 	if ( $post['post_status'] == 'trash' )
</code></pre><pre class=''><code><span class='LineNumber'>2719</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>2720</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2721</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2722</span> 	 * Fires before a post is sent to the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2723</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2724</span> 	 * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2725</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2726</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2727</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2728</span> 	do_action( 'wp_trash_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2729</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2730</span> 	add_post_meta($post_id,'_wp_trash_meta_status', $post['post_status']);
</code></pre><pre class=''><code><span class='LineNumber'>2731</span> 	add_post_meta($post_id,'_wp_trash_meta_time', time());
</code></pre><pre class=''><code><span class='LineNumber'>2732</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2733</span> 	$post['post_status'] = 'trash';
</code></pre><pre class=''><code><span class='LineNumber'>2734</span> 	wp_insert_post($post);
</code></pre><pre class=''><code><span class='LineNumber'>2735</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2736</span> 	wp_trash_post_comments($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>2737</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2738</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2739</span> 	 * Fires after a post is sent to the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2740</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2741</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2742</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2743</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2744</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2745</span> 	do_action( 'trashed_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2746</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2747</span> 	return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2748</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2749</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2750</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2751</span>  * Restore a post or page from the Trash.
</code></pre><pre class=''><code><span class='LineNumber'>2752</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2753</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2754</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2755</span>  * @param int $post_id Optional. Post ID. Default is ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2756</span>  * @return WP_Post|bool WP_Post object. False on failure.
</code></pre><pre class=''><code><span class='LineNumber'>2757</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2758</span> function wp_untrash_post( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>2759</span> 	if ( !$post = get_post($post_id, ARRAY_A) )
</code></pre><pre class=''><code><span class='LineNumber'>2760</span> 		return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2761</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2762</span> 	if ( $post['post_status'] != 'trash' )
</code></pre><pre class=''><code><span class='LineNumber'>2763</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>2764</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2765</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2766</span> 	 * Fires before a post is restored from the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2767</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2768</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2769</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2770</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2771</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2772</span> 	do_action( 'untrash_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2773</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2774</span> 	$post_status = get_post_meta($post_id, '_wp_trash_meta_status', true);
</code></pre><pre class=''><code><span class='LineNumber'>2775</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2776</span> 	$post['post_status'] = $post_status;
</code></pre><pre class=''><code><span class='LineNumber'>2777</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2778</span> 	delete_post_meta($post_id, '_wp_trash_meta_status');
</code></pre><pre class=''><code><span class='LineNumber'>2779</span> 	delete_post_meta($post_id, '_wp_trash_meta_time');
</code></pre><pre class=''><code><span class='LineNumber'>2780</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2781</span> 	wp_insert_post($post);
</code></pre><pre class=''><code><span class='LineNumber'>2782</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2783</span> 	wp_untrash_post_comments($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>2784</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2785</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2786</span> 	 * Fires after a post is restored from the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2787</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2788</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2789</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2790</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2791</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2792</span> 	do_action( 'untrashed_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2793</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2794</span> 	return $post;
</code></pre><pre class=''><code><span class='LineNumber'>2795</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2796</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2797</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2798</span>  * Moves comments for a post to the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2799</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2800</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2801</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2802</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>2803</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2804</span>  * @param int|WP_Post $post Optional. Post ID or post object. Defaults to global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2805</span>  * @return mixed False on failure.
</code></pre><pre class=''><code><span class='LineNumber'>2806</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2807</span> function wp_trash_post_comments( $post = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>2808</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>2809</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2810</span> 	$post = get_post($post);
</code></pre><pre class=''><code><span class='LineNumber'>2811</span> 	if ( empty($post) )
</code></pre><pre class=''><code><span class='LineNumber'>2812</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2813</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2814</span> 	$post_id = $post-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>2815</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2816</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2817</span> 	 * Fires before comments are sent to the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2818</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2819</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2820</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2821</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2822</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2823</span> 	do_action( 'trash_post_comments', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2824</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2825</span> 	$comments = $wpdb-&gt;get_results( $wpdb-&gt;prepare(&quot;SELECT comment_ID, comment_approved FROM $wpdb-&gt;comments WHERE comment_post_ID = %d&quot;, $post_id) );
</code></pre><pre class=''><code><span class='LineNumber'>2826</span> 	if ( empty($comments) )
</code></pre><pre class=''><code><span class='LineNumber'>2827</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2828</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2829</span> 	// Cache current status for each comment.
</code></pre><pre class=''><code><span class='LineNumber'>2830</span> 	$statuses = array();
</code></pre><pre class=''><code><span class='LineNumber'>2831</span> 	foreach ( $comments as $comment )
</code></pre><pre class=''><code><span class='LineNumber'>2832</span> 		$statuses[$comment-&gt;comment_ID] = $comment-&gt;comment_approved;
</code></pre><pre class=''><code><span class='LineNumber'>2833</span> 	add_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);
</code></pre><pre class=''><code><span class='LineNumber'>2834</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2835</span> 	// Set status for all comments to post-trashed.
</code></pre><pre class=''><code><span class='LineNumber'>2836</span> 	$result = $wpdb-&gt;update($wpdb-&gt;comments, array('comment_approved' =&gt; 'post-trashed'), array('comment_post_ID' =&gt; $post_id));
</code></pre><pre class=''><code><span class='LineNumber'>2837</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2838</span> 	clean_comment_cache( array_keys($statuses) );
</code></pre><pre class=''><code><span class='LineNumber'>2839</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2840</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2841</span> 	 * Fires after comments are sent to the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2842</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2843</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2844</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2845</span> 	 * @param int   $post_id  Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2846</span> 	 * @param array $statuses Array of comment statuses.
</code></pre><pre class=''><code><span class='LineNumber'>2847</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2848</span> 	do_action( 'trashed_post_comments', $post_id, $statuses );
</code></pre><pre class=''><code><span class='LineNumber'>2849</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2850</span> 	return $result;
</code></pre><pre class=''><code><span class='LineNumber'>2851</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2852</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2853</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2854</span>  * Restore comments for a post from the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2855</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2856</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2857</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2858</span>  * @param int|WP_Post $post Optional. Post ID or post object. Defaults to global $post.
</code></pre><pre class=''><code><span class='LineNumber'>2859</span>  * @return mixed False on failure.
</code></pre><pre class=''><code><span class='LineNumber'>2860</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2861</span> function wp_untrash_post_comments( $post = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>2862</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>2863</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2864</span> 	$post = get_post($post);
</code></pre><pre class=''><code><span class='LineNumber'>2865</span> 	if ( empty($post) )
</code></pre><pre class=''><code><span class='LineNumber'>2866</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>2867</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2868</span> 	$post_id = $post-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>2869</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2870</span> 	$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);
</code></pre><pre class=''><code><span class='LineNumber'>2871</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2872</span> 	if ( empty($statuses) )
</code></pre><pre class=''><code><span class='LineNumber'>2873</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>2874</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2875</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2876</span> 	 * Fires before comments are restored for a post from the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2877</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2878</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2879</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2880</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2881</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2882</span> 	do_action( 'untrash_post_comments', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2883</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2884</span> 	// Restore each comment to its original status.
</code></pre><pre class=''><code><span class='LineNumber'>2885</span> 	$group_by_status = array();
</code></pre><pre class=''><code><span class='LineNumber'>2886</span> 	foreach ( $statuses as $comment_id =&gt; $comment_status )
</code></pre><pre class=''><code><span class='LineNumber'>2887</span> 		$group_by_status[$comment_status][] = $comment_id;
</code></pre><pre class=''><code><span class='LineNumber'>2888</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2889</span> 	foreach ( $group_by_status as $status =&gt; $comments ) {
</code></pre><pre class=''><code><span class='LineNumber'>2890</span> 		// Sanity check. This shouldn't happen.
</code></pre><pre class=''><code><span class='LineNumber'>2891</span> 		if ( 'post-trashed' == $status )
</code></pre><pre class=''><code><span class='LineNumber'>2892</span> 			$status = '0';
</code></pre><pre class=''><code><span class='LineNumber'>2893</span> 		$comments_in = implode( &quot;', '&quot;, $comments );
</code></pre><pre class=''><code><span class='LineNumber'>2894</span> 		$wpdb-&gt;query( &quot;UPDATE $wpdb-&gt;comments SET comment_approved = '$status' WHERE comment_ID IN ('&quot; . $comments_in . &quot;')&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>2895</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>2896</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2897</span> 	clean_comment_cache( array_keys($statuses) );
</code></pre><pre class=''><code><span class='LineNumber'>2898</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2899</span> 	delete_post_meta($post_id, '_wp_trash_meta_comments_status');
</code></pre><pre class=''><code><span class='LineNumber'>2900</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2901</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>2902</span> 	 * Fires after comments are restored for a post from the trash.
</code></pre><pre class=''><code><span class='LineNumber'>2903</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2904</span> 	 * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>2905</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>2906</span> 	 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>2907</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>2908</span> 	do_action( 'untrashed_post_comments', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>2909</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2910</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2911</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2912</span>  * Retrieve the list of categories for a post.
</code></pre><pre class=''><code><span class='LineNumber'>2913</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2914</span>  * Compatibility layer for themes and plugins. Also an easy layer of abstraction
</code></pre><pre class=''><code><span class='LineNumber'>2915</span>  * away from the complexity of the taxonomy layer.
</code></pre><pre class=''><code><span class='LineNumber'>2916</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2917</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>2918</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2919</span>  * @see wp_get_object_terms()
</code></pre><pre class=''><code><span class='LineNumber'>2920</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2921</span>  * @param int   $post_id Optional. The Post ID. Does not default to the ID of the
</code></pre><pre class=''><code><span class='LineNumber'>2922</span>  *                       global $post. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>2923</span>  * @param array $args    Optional. Category arguments. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>2924</span>  * @return array List of categories.
</code></pre><pre class=''><code><span class='LineNumber'>2925</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2926</span> function wp_get_post_categories( $post_id = 0, $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>2927</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>2928</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2929</span> 	$defaults = array('fields' =&gt; 'ids');
</code></pre><pre class=''><code><span class='LineNumber'>2930</span> 	$args = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>2931</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2932</span> 	$cats = wp_get_object_terms($post_id, 'category', $args);
</code></pre><pre class=''><code><span class='LineNumber'>2933</span> 	return $cats;
</code></pre><pre class=''><code><span class='LineNumber'>2934</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2935</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2936</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2937</span>  * Retrieve the tags for a post.
</code></pre><pre class=''><code><span class='LineNumber'>2938</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2939</span>  * There is only one default for this function, called 'fields' and by default
</code></pre><pre class=''><code><span class='LineNumber'>2940</span>  * is set to 'all'. There are other defaults that can be overridden in
</code></pre><pre class=''><code><span class='LineNumber'>2941</span>  * {@link wp_get_object_terms()}.
</code></pre><pre class=''><code><span class='LineNumber'>2942</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2943</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>2944</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2945</span>  * @uses wp_get_object_terms()
</code></pre><pre class=''><code><span class='LineNumber'>2946</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2947</span>  * @param int   $post_id Optional. The Post ID. Does not default to the ID of the
</code></pre><pre class=''><code><span class='LineNumber'>2948</span>  *                       global $post. Defualt 0.
</code></pre><pre class=''><code><span class='LineNumber'>2949</span>  * @param array $args Optional. Overwrite the defaults
</code></pre><pre class=''><code><span class='LineNumber'>2950</span>  * @return array List of post tags.
</code></pre><pre class=''><code><span class='LineNumber'>2951</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2952</span> function wp_get_post_tags( $post_id = 0, $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>2953</span> 	return wp_get_post_terms( $post_id, 'post_tag', $args);
</code></pre><pre class=''><code><span class='LineNumber'>2954</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2955</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2956</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2957</span>  * Retrieve the terms for a post.
</code></pre><pre class=''><code><span class='LineNumber'>2958</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2959</span>  * There is only one default for this function, called 'fields' and by default
</code></pre><pre class=''><code><span class='LineNumber'>2960</span>  * is set to 'all'. There are other defaults that can be overridden in
</code></pre><pre class=''><code><span class='LineNumber'>2961</span>  * {@link wp_get_object_terms()}.
</code></pre><pre class=''><code><span class='LineNumber'>2962</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2963</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>2964</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2965</span>  * @uses wp_get_object_terms()
</code></pre><pre class=''><code><span class='LineNumber'>2966</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2967</span>  * @param int    $post_id  Optional. The Post ID. Does not default to the ID of the
</code></pre><pre class=''><code><span class='LineNumber'>2968</span>  *                         global $post. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>2969</span>  * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.
</code></pre><pre class=''><code><span class='LineNumber'>2970</span>  * @param array  $args     Optional. {@link wp_get_object_terms()} arguments. Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>2971</span>  * @return array List of post tags.
</code></pre><pre class=''><code><span class='LineNumber'>2972</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2973</span> function wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>2974</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>2975</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2976</span> 	$defaults = array('fields' =&gt; 'all');
</code></pre><pre class=''><code><span class='LineNumber'>2977</span> 	$args = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>2978</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2979</span> 	$tags = wp_get_object_terms($post_id, $taxonomy, $args);
</code></pre><pre class=''><code><span class='LineNumber'>2980</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2981</span> 	return $tags;
</code></pre><pre class=''><code><span class='LineNumber'>2982</span> }
</code></pre><pre class=''><code><span class='LineNumber'>2983</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2984</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>2985</span>  * Retrieve a number of recent posts.
</code></pre><pre class=''><code><span class='LineNumber'>2986</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2987</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>2988</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2989</span>  * @see get_posts()
</code></pre><pre class=''><code><span class='LineNumber'>2990</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>2991</span>  * @param string $deprecated Not used.
</code></pre><pre class=''><code><span class='LineNumber'>2992</span>  * @param array  $args       Optional. Arguments to retrieve posts. Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>2993</span>  * @param string $output     Optional. Type of output. Accepts ARRAY_A or ''. Default ARRAY_A.
</code></pre><pre class=''><code><span class='LineNumber'>2994</span>  * @return array|bool Associative array if $output equals ARRAY_A, array or false if no results.
</code></pre><pre class=''><code><span class='LineNumber'>2995</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>2996</span> function wp_get_recent_posts( $args = array(), $output = ARRAY_A ) {
</code></pre><pre class=''><code><span class='LineNumber'>2997</span> 
</code></pre><pre class=''><code><span class='LineNumber'>2998</span> 	if ( is_numeric( $args ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>2999</span> 		_deprecated_argument( __FUNCTION__, '3.1', __( 'Passing an integer number of posts is deprecated. Pass an array of arguments instead.' ) );
</code></pre><pre class=''><code><span class='LineNumber'>3000</span> 		$args = array( 'numberposts' =&gt; absint( $args ) );
</code></pre><pre class=''><code><span class='LineNumber'>3001</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3002</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3003</span> 	// Set default arguments.
</code></pre><pre class=''><code><span class='LineNumber'>3004</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>3005</span> 		'numberposts' =&gt; 10, 'offset' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>3006</span> 		'category' =&gt; 0, 'orderby' =&gt; 'post_date',
</code></pre><pre class=''><code><span class='LineNumber'>3007</span> 		'order' =&gt; 'DESC', 'include' =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>3008</span> 		'exclude' =&gt; '', 'meta_key' =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>3009</span> 		'meta_value' =&gt;'', 'post_type' =&gt; 'post', 'post_status' =&gt; 'draft, publish, future, pending, private',
</code></pre><pre class=''><code><span class='LineNumber'>3010</span> 		'suppress_filters' =&gt; true
</code></pre><pre class=''><code><span class='LineNumber'>3011</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>3012</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3013</span> 	$r = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>3014</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3015</span> 	$results = get_posts( $r );
</code></pre><pre class=''><code><span class='LineNumber'>3016</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3017</span> 	// Backward compatibility. Prior to 3.1 expected posts to be returned in array.
</code></pre><pre class=''><code><span class='LineNumber'>3018</span> 	if ( ARRAY_A == $output ){
</code></pre><pre class=''><code><span class='LineNumber'>3019</span> 		foreach( $results as $key =&gt; $result ) {
</code></pre><pre class=''><code><span class='LineNumber'>3020</span> 			$results[$key] = get_object_vars( $result );
</code></pre><pre class=''><code><span class='LineNumber'>3021</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3022</span> 		return $results ? $results : array();
</code></pre><pre class=''><code><span class='LineNumber'>3023</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3024</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3025</span> 	return $results ? $results : false;
</code></pre><pre class=''><code><span class='LineNumber'>3026</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3027</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3028</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3029</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3030</span>  * Insert or update a post.
</code></pre><pre class=''><code><span class='LineNumber'>3031</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3032</span>  * If the $postarr parameter has 'ID' set to a value, then post will be updated.
</code></pre><pre class=''><code><span class='LineNumber'>3033</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3034</span>  * You can set the post date manually, by setting the values for 'post_date'
</code></pre><pre class=''><code><span class='LineNumber'>3035</span>  * and 'post_date_gmt' keys. You can close the comments or open the comments by
</code></pre><pre class=''><code><span class='LineNumber'>3036</span>  * setting the value for 'comment_status' key.
</code></pre><pre class=''><code><span class='LineNumber'>3037</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3038</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3039</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3040</span>  * @see sanitize_post()
</code></pre><pre class=''><code><span class='LineNumber'>3041</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>3042</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3043</span>  * @param array $postarr {
</code></pre><pre class=''><code><span class='LineNumber'>3044</span>  *     An array of elements that make up a post to update or insert.
</code></pre><pre class=''><code><span class='LineNumber'>3045</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3046</span>  *     @type int    $ID                    The post ID. If equal to something other than 0,
</code></pre><pre class=''><code><span class='LineNumber'>3047</span>  *                                         the post with that ID will be updated. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>3048</span>  *     @type string $post_status           The post status. Default 'draft'.
</code></pre><pre class=''><code><span class='LineNumber'>3049</span>  *     @type string $post_type             The post type. Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>3050</span>  *     @type int    $post_author           The ID of the user who added the post. Default is
</code></pre><pre class=''><code><span class='LineNumber'>3051</span>  *                                         the current user ID.
</code></pre><pre class=''><code><span class='LineNumber'>3052</span>  *     @type bool   $ping_status           Whether the post can accept pings. Default is the
</code></pre><pre class=''><code><span class='LineNumber'>3053</span>  *                                         value of 'default_ping_status' option.
</code></pre><pre class=''><code><span class='LineNumber'>3054</span>  *     @type int    $post_parent           Set this for the post it belongs to, if any. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>3055</span>  *     @type int    $menu_order            The order it is displayed. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>3056</span>  *     @type string $to_ping               Space or carriage return-separated list of URLs to ping.
</code></pre><pre class=''><code><span class='LineNumber'>3057</span>  *                                         Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>3058</span>  *     @type string $pinged                Space or carriage return-separated list of URLs that have
</code></pre><pre class=''><code><span class='LineNumber'>3059</span>  *                                         been pinged. Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>3060</span>  *     @type string $post_password         The password to access the post. Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>3061</span>  *     @type string $guid'                 Global Unique ID for referencing the post.
</code></pre><pre class=''><code><span class='LineNumber'>3062</span>  *     @type string $post_content_filtered The filtered post content. Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>3063</span>  *     @type string $post_excerpt          The post excerpt. Default empty string.
</code></pre><pre class=''><code><span class='LineNumber'>3064</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>3065</span>  * @param bool  $wp_error Optional. Whether to allow return of WP_Error on failure. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>3066</span>  * @return int|WP_Error The post ID on success. The value 0 or WP_Error on failure.
</code></pre><pre class=''><code><span class='LineNumber'>3067</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3068</span> function wp_insert_post( $postarr, $wp_error = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>3069</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>3070</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3071</span> 	$user_id = get_current_user_id();
</code></pre><pre class=''><code><span class='LineNumber'>3072</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3073</span> 	$defaults = array('post_status' =&gt; 'draft', 'post_type' =&gt; 'post', 'post_author' =&gt; $user_id,
</code></pre><pre class=''><code><span class='LineNumber'>3074</span> 		'ping_status' =&gt; get_option('default_ping_status'), 'post_parent' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>3075</span> 		'menu_order' =&gt; 0, 'to_ping' =&gt;  '', 'pinged' =&gt; '', 'post_password' =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>3076</span> 		'guid' =&gt; '', 'post_content_filtered' =&gt; '', 'post_excerpt' =&gt; '', 'import_id' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>3077</span> 		'post_content' =&gt; '', 'post_title' =&gt; '', 'context' =&gt; '');
</code></pre><pre class=''><code><span class='LineNumber'>3078</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3079</span> 	$postarr = wp_parse_args($postarr, $defaults);
</code></pre><pre class=''><code><span class='LineNumber'>3080</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3081</span> 	unset( $postarr[ 'filter' ] );
</code></pre><pre class=''><code><span class='LineNumber'>3082</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3083</span> 	$postarr = sanitize_post($postarr, 'db');
</code></pre><pre class=''><code><span class='LineNumber'>3084</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3085</span> 	// Are we updating or creating?
</code></pre><pre class=''><code><span class='LineNumber'>3086</span> 	$post_ID = 0;
</code></pre><pre class=''><code><span class='LineNumber'>3087</span> 	$update = false;
</code></pre><pre class=''><code><span class='LineNumber'>3088</span> 	$guid = $postarr['guid'];
</code></pre><pre class=''><code><span class='LineNumber'>3089</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3090</span> 	if ( ! empty( $postarr['ID'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3091</span> 		$update = true;
</code></pre><pre class=''><code><span class='LineNumber'>3092</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3093</span> 		// Get the post ID and GUID.
</code></pre><pre class=''><code><span class='LineNumber'>3094</span> 		$post_ID = $postarr['ID'];
</code></pre><pre class=''><code><span class='LineNumber'>3095</span> 		$post_before = get_post( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3096</span> 		if ( is_null( $post_before ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3097</span> 			if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3098</span> 				return new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );
</code></pre><pre class=''><code><span class='LineNumber'>3099</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3100</span> 			return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3101</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3102</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3103</span> 		$guid = get_post_field( 'guid', $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3104</span> 		$previous_status = get_post_field('post_status', $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3105</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3106</span> 		$previous_status = 'new';
</code></pre><pre class=''><code><span class='LineNumber'>3107</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3108</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3109</span> 	$post_type = empty( $postarr['post_type'] ) ? 'post' : $postarr['post_type'];
</code></pre><pre class=''><code><span class='LineNumber'>3110</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3111</span> 	$post_title = $postarr['post_title'];
</code></pre><pre class=''><code><span class='LineNumber'>3112</span> 	$post_content = $postarr['post_content'];
</code></pre><pre class=''><code><span class='LineNumber'>3113</span> 	$post_excerpt = $postarr['post_excerpt'];
</code></pre><pre class=''><code><span class='LineNumber'>3114</span> 	if ( isset( $postarr['post_name'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3115</span> 		$post_name = $postarr['post_name'];
</code></pre><pre class=''><code><span class='LineNumber'>3116</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3118</span> 	$maybe_empty = 'attachment' !== $post_type
</code></pre><pre class=''><code><span class='LineNumber'>3119</span> 		&amp;&amp; ! $post_content &amp;&amp; ! $post_title &amp;&amp; ! $post_excerpt
</code></pre><pre class=''><code><span class='LineNumber'>3120</span> 		&amp;&amp; post_type_supports( $post_type, 'editor' )
</code></pre><pre class=''><code><span class='LineNumber'>3121</span> 		&amp;&amp; post_type_supports( $post_type, 'title' )
</code></pre><pre class=''><code><span class='LineNumber'>3122</span> 		&amp;&amp; post_type_supports( $post_type, 'excerpt' );
</code></pre><pre class=''><code><span class='LineNumber'>3123</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3124</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3125</span> 	 * Filter whether the post should be considered &quot;empty&quot;.
</code></pre><pre class=''><code><span class='LineNumber'>3126</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3127</span> 	 * The post is considered &quot;empty&quot; if both:
</code></pre><pre class=''><code><span class='LineNumber'>3128</span> 	 * 1. The post type supports the title, editor, and excerpt fields
</code></pre><pre class=''><code><span class='LineNumber'>3129</span> 	 * 2. The title, editor, and excerpt fields are all empty
</code></pre><pre class=''><code><span class='LineNumber'>3130</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3131</span> 	 * Returning a truthy value to the filter will effectively short-circuit
</code></pre><pre class=''><code><span class='LineNumber'>3132</span> 	 * the new post being inserted, returning 0. If $wp_error is true, a WP_Error
</code></pre><pre class=''><code><span class='LineNumber'>3133</span> 	 * will be returned instead.
</code></pre><pre class=''><code><span class='LineNumber'>3134</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3135</span> 	 * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3136</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3137</span> 	 * @param bool  $maybe_empty Whether the post should be considered &quot;empty&quot;.
</code></pre><pre class=''><code><span class='LineNumber'>3138</span> 	 * @param array $postarr     Array of post data.
</code></pre><pre class=''><code><span class='LineNumber'>3139</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3140</span> 	if ( apply_filters( 'wp_insert_post_empty_content', $maybe_empty, $postarr ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3141</span> 		if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3142</span> 			return new WP_Error( 'empty_content', __( 'Content, title, and excerpt are empty.' ) );
</code></pre><pre class=''><code><span class='LineNumber'>3143</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3144</span> 			return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3145</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3146</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3148</span> 	$post_status = empty( $postarr['post_status'] ) ? 'draft' : $postarr['post_status'];
</code></pre><pre class=''><code><span class='LineNumber'>3149</span> 	if ( 'attachment' === $post_type &amp;&amp; ! in_array( $post_status, array( 'inherit', 'private', 'trash' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3150</span> 		$post_status = 'inherit';
</code></pre><pre class=''><code><span class='LineNumber'>3151</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3152</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3153</span> 	if ( ! empty( $postarr['post_category'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3154</span> 		// Filter out empty terms.
</code></pre><pre class=''><code><span class='LineNumber'>3155</span> 		$post_category = array_filter( $postarr['post_category'] );
</code></pre><pre class=''><code><span class='LineNumber'>3156</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3158</span> 	// Make sure we set a valid category.
</code></pre><pre class=''><code><span class='LineNumber'>3159</span> 	if ( empty( $post_category ) || 0 == count( $post_category ) || ! is_array( $post_category ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3160</span> 		// 'post' requires at least one category.
</code></pre><pre class=''><code><span class='LineNumber'>3161</span> 		if ( 'post' == $post_type &amp;&amp; 'auto-draft' != $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>3162</span> 			$post_category = array( get_option('default_category') );
</code></pre><pre class=''><code><span class='LineNumber'>3163</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3164</span> 			$post_category = array();
</code></pre><pre class=''><code><span class='LineNumber'>3165</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3166</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3167</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3168</span> 	// Don't allow contributors to set the post slug for pending review posts.
</code></pre><pre class=''><code><span class='LineNumber'>3169</span> 	if ( 'pending' == $post_status &amp;&amp; !current_user_can( 'publish_posts' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3170</span> 		$post_name = '';
</code></pre><pre class=''><code><span class='LineNumber'>3171</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3172</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3173</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>3174</span> 	 * Create a valid post name. Drafts and pending posts are allowed to have
</code></pre><pre class=''><code><span class='LineNumber'>3175</span> 	 * an empty post name.
</code></pre><pre class=''><code><span class='LineNumber'>3176</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3177</span> 	if ( empty($post_name) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3178</span> 		if ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3179</span> 			$post_name = sanitize_title($post_title);
</code></pre><pre class=''><code><span class='LineNumber'>3180</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3181</span> 			$post_name = '';
</code></pre><pre class=''><code><span class='LineNumber'>3182</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3183</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3184</span> 		// On updates, we need to check to see if it's using the old, fixed sanitization context.
</code></pre><pre class=''><code><span class='LineNumber'>3185</span> 		$check_name = sanitize_title( $post_name, '', 'old-save' );
</code></pre><pre class=''><code><span class='LineNumber'>3186</span> 		if ( $update &amp;&amp; strtolower( urlencode( $post_name ) ) == $check_name &amp;&amp; get_post_field( 'post_name', $post_ID ) == $check_name ) {
</code></pre><pre class=''><code><span class='LineNumber'>3187</span> 			$post_name = $check_name;
</code></pre><pre class=''><code><span class='LineNumber'>3188</span> 		} else { // new post, or slug has changed.
</code></pre><pre class=''><code><span class='LineNumber'>3189</span> 			$post_name = sanitize_title($post_name);
</code></pre><pre class=''><code><span class='LineNumber'>3190</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3191</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3192</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3193</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>3194</span> 	 * If the post date is empty (due to having been new or a draft) and status
</code></pre><pre class=''><code><span class='LineNumber'>3195</span> 	 * is not 'draft' or 'pending', set date to now.
</code></pre><pre class=''><code><span class='LineNumber'>3196</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3197</span> 	if ( empty( $postarr['post_date'] ) || '0000-00-00 00:00:00' == $postarr['post_date'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>3198</span> 		$post_date = current_time( 'mysql' );
</code></pre><pre class=''><code><span class='LineNumber'>3199</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3200</span> 		$post_date = $postarr['post_date'];
</code></pre><pre class=''><code><span class='LineNumber'>3201</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3202</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3203</span> 	// Validate the date.
</code></pre><pre class=''><code><span class='LineNumber'>3204</span> 	$mm = substr( $post_date, 5, 2 );
</code></pre><pre class=''><code><span class='LineNumber'>3205</span> 	$jj = substr( $post_date, 8, 2 );
</code></pre><pre class=''><code><span class='LineNumber'>3206</span> 	$aa = substr( $post_date, 0, 4 );
</code></pre><pre class=''><code><span class='LineNumber'>3207</span> 	$valid_date = wp_checkdate( $mm, $jj, $aa, $post_date );
</code></pre><pre class=''><code><span class='LineNumber'>3208</span> 	if ( ! $valid_date ) {
</code></pre><pre class=''><code><span class='LineNumber'>3209</span> 		if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3210</span> 			return new WP_Error( 'invalid_date', __( 'Whoops, the provided date is invalid.' ) );
</code></pre><pre class=''><code><span class='LineNumber'>3211</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3212</span> 			return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3213</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3214</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3215</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3216</span> 	if ( empty( $postarr['post_date_gmt'] ) || '0000-00-00 00:00:00' == $postarr['post_date_gmt'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>3217</span> 		if ( ! in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3218</span> 			$post_date_gmt = get_gmt_from_date( $post_date );
</code></pre><pre class=''><code><span class='LineNumber'>3219</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3220</span> 			$post_date_gmt = '0000-00-00 00:00:00';
</code></pre><pre class=''><code><span class='LineNumber'>3221</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3222</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3223</span> 		$post_date_gmt = $postarr['post_date_gmt'];
</code></pre><pre class=''><code><span class='LineNumber'>3224</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3225</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3226</span> 	if ( $update || '0000-00-00 00:00:00' == $post_date ) {
</code></pre><pre class=''><code><span class='LineNumber'>3227</span> 		$post_modified     = current_time( 'mysql' );
</code></pre><pre class=''><code><span class='LineNumber'>3228</span> 		$post_modified_gmt = current_time( 'mysql', 1 );
</code></pre><pre class=''><code><span class='LineNumber'>3229</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3230</span> 		$post_modified     = $post_date;
</code></pre><pre class=''><code><span class='LineNumber'>3231</span> 		$post_modified_gmt = $post_date_gmt;
</code></pre><pre class=''><code><span class='LineNumber'>3232</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3233</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3234</span> 	if ( 'attachment' !== $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>3235</span> 		if ( 'publish' == $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>3236</span> 			$now = gmdate('Y-m-d H:i:59');
</code></pre><pre class=''><code><span class='LineNumber'>3237</span> 			if ( mysql2date('U', $post_date_gmt, false) &gt; mysql2date('U', $now, false) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3238</span> 				$post_status = 'future';
</code></pre><pre class=''><code><span class='LineNumber'>3239</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3240</span> 		} elseif( 'future' == $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>3241</span> 			$now = gmdate('Y-m-d H:i:59');
</code></pre><pre class=''><code><span class='LineNumber'>3242</span> 			if ( mysql2date('U', $post_date_gmt, false) &lt;= mysql2date('U', $now, false) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3243</span> 				$post_status = 'publish';
</code></pre><pre class=''><code><span class='LineNumber'>3244</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3245</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3246</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3247</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3248</span> 	if ( empty( $postarr['comment_status'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3249</span> 		if ( $update ) {
</code></pre><pre class=''><code><span class='LineNumber'>3250</span> 			$comment_status = 'closed';
</code></pre><pre class=''><code><span class='LineNumber'>3251</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3252</span> 			$comment_status = get_option('default_comment_status');
</code></pre><pre class=''><code><span class='LineNumber'>3253</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3254</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3255</span> 		$comment_status = $postarr['comment_status'];
</code></pre><pre class=''><code><span class='LineNumber'>3256</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3257</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3258</span> 	// These variables are needed by compact() later.
</code></pre><pre class=''><code><span class='LineNumber'>3259</span> 	$post_content_filtered = $postarr['post_content_filtered'];
</code></pre><pre class=''><code><span class='LineNumber'>3260</span> 	$post_author = empty( $postarr['post_author'] ) ? $user_id : $postarr['post_author'];
</code></pre><pre class=''><code><span class='LineNumber'>3261</span> 	$ping_status = empty( $postarr['ping_status'] ) ? get_option( 'default_ping_status' ) : $postarr['ping_status'];
</code></pre><pre class=''><code><span class='LineNumber'>3262</span> 	$to_ping = isset( $postarr['to_ping'] ) ? sanitize_trackback_urls( $postarr['to_ping'] ) : '';
</code></pre><pre class=''><code><span class='LineNumber'>3263</span> 	$pinged = isset( $postarr['pinged'] ) ? $postarr['pinged'] : '';
</code></pre><pre class=''><code><span class='LineNumber'>3264</span> 	$import_id = isset( $postarr['import_id'] ) ? $postarr['import_id'] : 0;
</code></pre><pre class=''><code><span class='LineNumber'>3265</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3266</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>3267</span> 	 * The 'wp_insert_post_parent' filter expects all variables to be present.
</code></pre><pre class=''><code><span class='LineNumber'>3268</span> 	 * Previously, these variables would have already been extracted
</code></pre><pre class=''><code><span class='LineNumber'>3269</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3270</span> 	if ( isset( $postarr['menu_order'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3271</span> 		$menu_order = (int) $postarr['menu_order'];
</code></pre><pre class=''><code><span class='LineNumber'>3272</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3273</span> 		$menu_order = 0;
</code></pre><pre class=''><code><span class='LineNumber'>3274</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3275</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3276</span> 	$post_password = isset( $postarr['post_password'] ) ? $postarr['post_password'] : '';
</code></pre><pre class=''><code><span class='LineNumber'>3277</span> 	if ( 'private' == $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>3278</span> 		$post_password = '';
</code></pre><pre class=''><code><span class='LineNumber'>3279</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3280</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3281</span> 	if ( isset( $postarr['post_parent'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3282</span> 		$post_parent = (int) $postarr['post_parent'];
</code></pre><pre class=''><code><span class='LineNumber'>3283</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3284</span> 		$post_parent = 0;
</code></pre><pre class=''><code><span class='LineNumber'>3285</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3286</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3287</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3288</span> 	 * Filter the post parent -- used to check for and prevent hierarchy loops.
</code></pre><pre class=''><code><span class='LineNumber'>3289</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3290</span> 	 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3291</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3292</span> 	 * @param int   $post_parent Post parent ID.
</code></pre><pre class=''><code><span class='LineNumber'>3293</span> 	 * @param int   $post_ID     Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3294</span> 	 * @param array $new_postarr Array of parsed post data.
</code></pre><pre class=''><code><span class='LineNumber'>3295</span> 	 * @param array $postarr     Array of sanitized, but otherwise unmodified post data.
</code></pre><pre class=''><code><span class='LineNumber'>3296</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3297</span> 	$post_parent = apply_filters( 'wp_insert_post_parent', $post_parent, $post_ID, compact( array_keys( $postarr ) ), $postarr );
</code></pre><pre class=''><code><span class='LineNumber'>3298</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3299</span> 	$post_name = wp_unique_post_slug( $post_name, $post_ID, $post_status, $post_type, $post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>3300</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3301</span> 	// Don't unslash.
</code></pre><pre class=''><code><span class='LineNumber'>3302</span> 	$post_mime_type = isset( $postarr['post_mime_type'] ) ? $postarr['post_mime_type'] : '';
</code></pre><pre class=''><code><span class='LineNumber'>3303</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3304</span> 	// Expected_slashed (everything!).
</code></pre><pre class=''><code><span class='LineNumber'>3305</span> 	$data = compact( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' );
</code></pre><pre class=''><code><span class='LineNumber'>3306</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3307</span> 	if ( 'attachment' === $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>3308</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3309</span> 		 * Filter attachment post data before it is updated in or added to the database.
</code></pre><pre class=''><code><span class='LineNumber'>3310</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3311</span> 		 * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>3312</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3313</span> 		 * @param array $data    An array of sanitized attachment post data.
</code></pre><pre class=''><code><span class='LineNumber'>3314</span> 		 * @param array $postarr An array of unsanitized attachment post data.
</code></pre><pre class=''><code><span class='LineNumber'>3315</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3316</span> 		$data = apply_filters( 'wp_insert_attachment_data', $data, $postarr );
</code></pre><pre class=''><code><span class='LineNumber'>3317</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3318</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3319</span> 		 * Filter slashed post data just before it is inserted into the database.
</code></pre><pre class=''><code><span class='LineNumber'>3320</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3321</span> 		 * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>3322</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3323</span> 		 * @param array $data    An array of slashed post data.
</code></pre><pre class=''><code><span class='LineNumber'>3324</span> 		 * @param array $postarr An array of sanitized, but otherwise unmodified post data.
</code></pre><pre class=''><code><span class='LineNumber'>3325</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3326</span> 		$data = apply_filters( 'wp_insert_post_data', $data, $postarr );
</code></pre><pre class=''><code><span class='LineNumber'>3327</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3328</span> 	$data = wp_unslash( $data );
</code></pre><pre class=''><code><span class='LineNumber'>3329</span> 	$where = array( 'ID' =&gt; $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3330</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3331</span> 	if ( $update ) {
</code></pre><pre class=''><code><span class='LineNumber'>3332</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3333</span> 		 * Fires immediately before an existing post is updated in the database.
</code></pre><pre class=''><code><span class='LineNumber'>3334</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3335</span> 		 * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>3336</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3337</span> 		 * @param int   $post_ID Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3338</span> 		 * @param array $data    Array of unslashed post data.
</code></pre><pre class=''><code><span class='LineNumber'>3339</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3340</span> 		do_action( 'pre_post_update', $post_ID, $data );
</code></pre><pre class=''><code><span class='LineNumber'>3341</span> 		if ( false === $wpdb-&gt;update( $wpdb-&gt;posts, $data, $where ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3342</span> 			if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3343</span> 				return new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb-&gt;last_error);
</code></pre><pre class=''><code><span class='LineNumber'>3344</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>3345</span> 				return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3346</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3347</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3348</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3349</span> 		// If there is a suggested ID, use it if not already present.
</code></pre><pre class=''><code><span class='LineNumber'>3350</span> 		if ( ! empty( $import_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3351</span> 			$import_id = (int) $import_id;
</code></pre><pre class=''><code><span class='LineNumber'>3352</span> 			if ( ! $wpdb-&gt;get_var( $wpdb-&gt;prepare(&quot;SELECT ID FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $import_id) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3353</span> 				$data['ID'] = $import_id;
</code></pre><pre class=''><code><span class='LineNumber'>3354</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3355</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3356</span> 		if ( false === $wpdb-&gt;insert( $wpdb-&gt;posts, $data ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3357</span> 			if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3358</span> 				return new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb-&gt;last_error);
</code></pre><pre class=''><code><span class='LineNumber'>3359</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>3360</span> 				return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3361</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3362</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3363</span> 		$post_ID = (int) $wpdb-&gt;insert_id;
</code></pre><pre class=''><code><span class='LineNumber'>3364</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3365</span> 		// Use the newly generated $post_ID.
</code></pre><pre class=''><code><span class='LineNumber'>3366</span> 		$where = array( 'ID' =&gt; $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3367</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3368</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3369</span> 	if ( empty( $data['post_name'] ) &amp;&amp; ! in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3370</span> 		$data['post_name'] = sanitize_title( $data['post_title'], $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3371</span> 		$wpdb-&gt;update( $wpdb-&gt;posts, array( 'post_name' =&gt; $data['post_name'] ), $where );
</code></pre><pre class=''><code><span class='LineNumber'>3372</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3373</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3374</span> 	if ( is_object_in_taxonomy( $post_type, 'category' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3375</span> 		wp_set_post_categories( $post_ID, $post_category );
</code></pre><pre class=''><code><span class='LineNumber'>3376</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3377</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3378</span> 	if ( isset( $postarr['tags_input'] ) &amp;&amp; is_object_in_taxonomy( $post_type, 'post_tag' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3379</span> 		wp_set_post_tags( $post_ID, $postarr['tags_input'] );
</code></pre><pre class=''><code><span class='LineNumber'>3380</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3381</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3382</span> 	// New-style support for all custom taxonomies.
</code></pre><pre class=''><code><span class='LineNumber'>3383</span> 	if ( ! empty( $postarr['tax_input'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3384</span> 		foreach ( $postarr['tax_input'] as $taxonomy =&gt; $tags ) {
</code></pre><pre class=''><code><span class='LineNumber'>3385</span> 			$taxonomy_obj = get_taxonomy($taxonomy);
</code></pre><pre class=''><code><span class='LineNumber'>3386</span> 			// array = hierarchical, string = non-hierarchical.
</code></pre><pre class=''><code><span class='LineNumber'>3387</span> 			if ( is_array( $tags ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3388</span> 				$tags = array_filter($tags);
</code></pre><pre class=''><code><span class='LineNumber'>3389</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3390</span> 			if ( current_user_can( $taxonomy_obj-&gt;cap-&gt;assign_terms ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3391</span> 				wp_set_post_terms( $post_ID, $tags, $taxonomy );
</code></pre><pre class=''><code><span class='LineNumber'>3392</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3393</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3394</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3395</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3396</span> 	$current_guid = get_post_field( 'guid', $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3397</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3398</span> 	// Set GUID.
</code></pre><pre class=''><code><span class='LineNumber'>3399</span> 	if ( ! $update &amp;&amp; '' == $current_guid ) {
</code></pre><pre class=''><code><span class='LineNumber'>3400</span> 		$wpdb-&gt;update( $wpdb-&gt;posts, array( 'guid' =&gt; get_permalink( $post_ID ) ), $where );
</code></pre><pre class=''><code><span class='LineNumber'>3401</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3402</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3403</span> 	if ( 'attachment' === $postarr['post_type'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>3404</span> 		if ( ! empty( $postarr['file'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3405</span> 			update_attached_file( $post_ID, $postarr['file'] );
</code></pre><pre class=''><code><span class='LineNumber'>3406</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3407</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3408</span> 		if ( ! empty( $postarr['context'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3409</span> 			add_post_meta( $post_ID, '_wp_attachment_context', $postarr['context'], true );
</code></pre><pre class=''><code><span class='LineNumber'>3410</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3411</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3412</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3413</span> 	clean_post_cache( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3414</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3415</span> 	$post = get_post( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3416</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3417</span> 	if ( ! empty( $postarr['page_template'] ) &amp;&amp; 'page' == $data['post_type'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>3418</span> 		$post-&gt;page_template = $postarr['page_template'];
</code></pre><pre class=''><code><span class='LineNumber'>3419</span> 		$page_templates = wp_get_theme()-&gt;get_page_templates( $post );
</code></pre><pre class=''><code><span class='LineNumber'>3420</span> 		if ( 'default' != $postarr['page_template'] &amp;&amp; ! isset( $page_templates[ $postarr['page_template'] ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3421</span> 			if ( $wp_error ) {
</code></pre><pre class=''><code><span class='LineNumber'>3422</span> 				return new WP_Error('invalid_page_template', __('The page template is invalid.'));
</code></pre><pre class=''><code><span class='LineNumber'>3423</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>3424</span> 				return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3425</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>3426</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3427</span> 		update_post_meta( $post_ID, '_wp_page_template', $postarr['page_template'] );
</code></pre><pre class=''><code><span class='LineNumber'>3428</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3429</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3430</span> 	if ( 'attachment' !== $postarr['post_type'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>3431</span> 		wp_transition_post_status( $data['post_status'], $previous_status, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3432</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3433</span> 		if ( $update ) {
</code></pre><pre class=''><code><span class='LineNumber'>3434</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>3435</span> 			 * Fires once an existing attachment has been updated.
</code></pre><pre class=''><code><span class='LineNumber'>3436</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>3437</span> 			 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3438</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>3439</span> 			 * @param int $post_ID Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>3440</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>3441</span> 			do_action( 'edit_attachment', $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3442</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3443</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3444</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>3445</span> 			 * Fires once an attachment has been added.
</code></pre><pre class=''><code><span class='LineNumber'>3446</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>3447</span> 			 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3448</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>3449</span> 			 * @param int $post_ID Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>3450</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>3451</span> 			do_action( 'add_attachment', $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3452</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3453</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3454</span> 		return $post_ID;
</code></pre><pre class=''><code><span class='LineNumber'>3455</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3456</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3457</span> 	if ( $update ) {
</code></pre><pre class=''><code><span class='LineNumber'>3458</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3459</span> 		 * Fires once an existing post has been updated.
</code></pre><pre class=''><code><span class='LineNumber'>3460</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3461</span> 		 * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>3462</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3463</span> 		 * @param int     $post_ID Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3464</span> 		 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3465</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3466</span> 		do_action( 'edit_post', $post_ID, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3467</span> 		$post_after = get_post($post_ID);
</code></pre><pre class=''><code><span class='LineNumber'>3468</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3469</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3470</span> 		 * Fires once an existing post has been updated.
</code></pre><pre class=''><code><span class='LineNumber'>3471</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3472</span> 		 * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3473</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3474</span> 		 * @param int     $post_ID      Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3475</span> 		 * @param WP_Post $post_after   Post object following the update.
</code></pre><pre class=''><code><span class='LineNumber'>3476</span> 		 * @param WP_Post $post_before  Post object before the update.
</code></pre><pre class=''><code><span class='LineNumber'>3477</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3478</span> 		do_action( 'post_updated', $post_ID, $post_after, $post_before);
</code></pre><pre class=''><code><span class='LineNumber'>3479</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3480</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3481</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3482</span> 	 * Fires once a post has been saved.
</code></pre><pre class=''><code><span class='LineNumber'>3483</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3484</span> 	 * The dynamic portion of the hook name, $post-&gt;post_type, refers to
</code></pre><pre class=''><code><span class='LineNumber'>3485</span> 	 * the post type slug.
</code></pre><pre class=''><code><span class='LineNumber'>3486</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3487</span> 	 * @since 3.7.0
</code></pre><pre class=''><code><span class='LineNumber'>3488</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3489</span> 	 * @param int     $post_ID Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3490</span> 	 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3491</span> 	 * @param bool    $update  Whether this is an existing post being updated or not.
</code></pre><pre class=''><code><span class='LineNumber'>3492</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3493</span> 	do_action( &quot;save_post_{$post-&gt;post_type}&quot;, $post_ID, $post, $update );
</code></pre><pre class=''><code><span class='LineNumber'>3494</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3495</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3496</span> 	 * Fires once a post has been saved.
</code></pre><pre class=''><code><span class='LineNumber'>3497</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3498</span> 	 * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>3499</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3500</span> 	 * @param int     $post_ID Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3501</span> 	 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3502</span> 	 * @param bool    $update  Whether this is an existing post being updated or not.
</code></pre><pre class=''><code><span class='LineNumber'>3503</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3504</span> 	do_action( 'save_post', $post_ID, $post, $update );
</code></pre><pre class=''><code><span class='LineNumber'>3505</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3506</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3507</span> 	 * Fires once a post has been saved.
</code></pre><pre class=''><code><span class='LineNumber'>3508</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3509</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3510</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3511</span> 	 * @param int     $post_ID Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3512</span> 	 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3513</span> 	 * @param bool    $update  Whether this is an existing post being updated or not.
</code></pre><pre class=''><code><span class='LineNumber'>3514</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3515</span> 	do_action( 'wp_insert_post', $post_ID, $post, $update );
</code></pre><pre class=''><code><span class='LineNumber'>3516</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3517</span> 	return $post_ID;
</code></pre><pre class=''><code><span class='LineNumber'>3518</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3519</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3520</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3521</span>  * Update a post with new post data.
</code></pre><pre class=''><code><span class='LineNumber'>3522</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3523</span>  * The date does not have to be set for drafts. You can set the date and it will
</code></pre><pre class=''><code><span class='LineNumber'>3524</span>  * not be overridden.
</code></pre><pre class=''><code><span class='LineNumber'>3525</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3526</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3527</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3528</span>  * @param array|object $postarr  Optional. Post data. Arrays are expected to be escaped,
</code></pre><pre class=''><code><span class='LineNumber'>3529</span>  *                               objects are not. Default array.
</code></pre><pre class=''><code><span class='LineNumber'>3530</span>  * @param bool         $wp_error Optional. Allow return of WP_Error on failure. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>3531</span>  * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.
</code></pre><pre class=''><code><span class='LineNumber'>3532</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3533</span> function wp_update_post( $postarr = array(), $wp_error = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>3534</span> 	if ( is_object($postarr) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3535</span> 		// Non-escaped post was passed.
</code></pre><pre class=''><code><span class='LineNumber'>3536</span> 		$postarr = get_object_vars($postarr);
</code></pre><pre class=''><code><span class='LineNumber'>3537</span> 		$postarr = wp_slash($postarr);
</code></pre><pre class=''><code><span class='LineNumber'>3538</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3539</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3540</span> 	// First, get all of the original fields.
</code></pre><pre class=''><code><span class='LineNumber'>3541</span> 	$post = get_post($postarr['ID'], ARRAY_A);
</code></pre><pre class=''><code><span class='LineNumber'>3542</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3543</span> 	if ( is_null( $post ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3544</span> 		if ( $wp_error )
</code></pre><pre class=''><code><span class='LineNumber'>3545</span> 			return new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );
</code></pre><pre class=''><code><span class='LineNumber'>3546</span> 		return 0;
</code></pre><pre class=''><code><span class='LineNumber'>3547</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3548</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3549</span> 	// Escape data pulled from DB.
</code></pre><pre class=''><code><span class='LineNumber'>3550</span> 	$post = wp_slash($post);
</code></pre><pre class=''><code><span class='LineNumber'>3551</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3552</span> 	// Passed post category list overwrites existing category list if not empty.
</code></pre><pre class=''><code><span class='LineNumber'>3553</span> 	if ( isset($postarr['post_category']) &amp;&amp; is_array($postarr['post_category'])
</code></pre><pre class=''><code><span class='LineNumber'>3554</span> 			 &amp;&amp; 0 != count($postarr['post_category']) )
</code></pre><pre class=''><code><span class='LineNumber'>3555</span> 		$post_cats = $postarr['post_category'];
</code></pre><pre class=''><code><span class='LineNumber'>3556</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>3557</span> 		$post_cats = $post['post_category'];
</code></pre><pre class=''><code><span class='LineNumber'>3558</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3559</span> 	// Drafts shouldn't be assigned a date unless explicitly done so by the user.
</code></pre><pre class=''><code><span class='LineNumber'>3560</span> 	if ( isset( $post['post_status'] ) &amp;&amp; in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) &amp;&amp; empty($postarr['edit_date']) &amp;&amp;
</code></pre><pre class=''><code><span class='LineNumber'>3561</span> 			 ('0000-00-00 00:00:00' == $post['post_date_gmt']) )
</code></pre><pre class=''><code><span class='LineNumber'>3562</span> 		$clear_date = true;
</code></pre><pre class=''><code><span class='LineNumber'>3563</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>3564</span> 		$clear_date = false;
</code></pre><pre class=''><code><span class='LineNumber'>3565</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3566</span> 	// Merge old and new fields with new fields overwriting old ones.
</code></pre><pre class=''><code><span class='LineNumber'>3567</span> 	$postarr = array_merge($post, $postarr);
</code></pre><pre class=''><code><span class='LineNumber'>3568</span> 	$postarr['post_category'] = $post_cats;
</code></pre><pre class=''><code><span class='LineNumber'>3569</span> 	if ( $clear_date ) {
</code></pre><pre class=''><code><span class='LineNumber'>3570</span> 		$postarr['post_date'] = current_time('mysql');
</code></pre><pre class=''><code><span class='LineNumber'>3571</span> 		$postarr['post_date_gmt'] = '';
</code></pre><pre class=''><code><span class='LineNumber'>3572</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3573</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3574</span> 	if ($postarr['post_type'] == 'attachment')
</code></pre><pre class=''><code><span class='LineNumber'>3575</span> 		return wp_insert_attachment($postarr);
</code></pre><pre class=''><code><span class='LineNumber'>3576</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3577</span> 	return wp_insert_post( $postarr, $wp_error );
</code></pre><pre class=''><code><span class='LineNumber'>3578</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3579</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3580</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3581</span>  * Publish a post by transitioning the post status.
</code></pre><pre class=''><code><span class='LineNumber'>3582</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3583</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3584</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3585</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>3586</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3587</span>  * @param int|WP_Post $post Post ID or post object.
</code></pre><pre class=''><code><span class='LineNumber'>3588</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3589</span> function wp_publish_post( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>3590</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>3591</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3592</span> 	if ( ! $post = get_post( $post ) )
</code></pre><pre class=''><code><span class='LineNumber'>3593</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>3594</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3595</span> 	if ( 'publish' == $post-&gt;post_status )
</code></pre><pre class=''><code><span class='LineNumber'>3596</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>3597</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3598</span> 	$wpdb-&gt;update( $wpdb-&gt;posts, array( 'post_status' =&gt; 'publish' ), array( 'ID' =&gt; $post-&gt;ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>3599</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3600</span> 	clean_post_cache( $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>3601</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3602</span> 	$old_status = $post-&gt;post_status;
</code></pre><pre class=''><code><span class='LineNumber'>3603</span> 	$post-&gt;post_status = 'publish';
</code></pre><pre class=''><code><span class='LineNumber'>3604</span> 	wp_transition_post_status( 'publish', $old_status, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3605</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3606</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>3607</span> 	do_action( 'edit_post', $post-&gt;ID, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3608</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3609</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>3610</span> 	do_action( &quot;save_post_{$post-&gt;post_type}&quot;, $post-&gt;ID, $post, true );
</code></pre><pre class=''><code><span class='LineNumber'>3611</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3612</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>3613</span> 	do_action( 'save_post', $post-&gt;ID, $post, true );
</code></pre><pre class=''><code><span class='LineNumber'>3614</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3615</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>3616</span> 	do_action( 'wp_insert_post', $post-&gt;ID, $post, true );
</code></pre><pre class=''><code><span class='LineNumber'>3617</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3618</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3619</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3620</span>  * Publish future post and make sure post ID has future post status.
</code></pre><pre class=''><code><span class='LineNumber'>3621</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3622</span>  * Invoked by cron 'publish_future_post' event. This safeguard prevents cron
</code></pre><pre class=''><code><span class='LineNumber'>3623</span>  * from publishing drafts, etc.
</code></pre><pre class=''><code><span class='LineNumber'>3624</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3625</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>3626</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3627</span>  * @param int|WP_Post $post_id Post ID or post object.
</code></pre><pre class=''><code><span class='LineNumber'>3628</span>  * @return null Nothing is returned. Which can mean that no action is required
</code></pre><pre class=''><code><span class='LineNumber'>3629</span>  *              or post was published.
</code></pre><pre class=''><code><span class='LineNumber'>3630</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3631</span> function check_and_publish_future_post( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>3632</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3633</span> 	$post = get_post($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>3634</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3635</span> 	if ( empty($post) )
</code></pre><pre class=''><code><span class='LineNumber'>3636</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>3637</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3638</span> 	if ( 'future' != $post-&gt;post_status )
</code></pre><pre class=''><code><span class='LineNumber'>3639</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>3640</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3641</span> 	$time = strtotime( $post-&gt;post_date_gmt . ' GMT' );
</code></pre><pre class=''><code><span class='LineNumber'>3642</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3643</span> 	// Uh oh, someone jumped the gun!
</code></pre><pre class=''><code><span class='LineNumber'>3644</span> 	if ( $time &gt; time() ) {
</code></pre><pre class=''><code><span class='LineNumber'>3645</span> 		wp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system
</code></pre><pre class=''><code><span class='LineNumber'>3646</span> 		wp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>3647</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>3648</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3649</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3650</span> 	return wp_publish_post($post_id);
</code></pre><pre class=''><code><span class='LineNumber'>3651</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3652</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3653</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3654</span>  * Computes a unique slug for the post, when given the desired slug and some post details.
</code></pre><pre class=''><code><span class='LineNumber'>3655</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3656</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>3657</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3658</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>3659</span>  * @global WP_Rewrite $wp_rewrite
</code></pre><pre class=''><code><span class='LineNumber'>3660</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3661</span>  * @param string $slug        The desired slug (post_name).
</code></pre><pre class=''><code><span class='LineNumber'>3662</span>  * @param int    $post_ID     Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3663</span>  * @param string $post_status No uniqueness checks are made if the post is still draft or pending.
</code></pre><pre class=''><code><span class='LineNumber'>3664</span>  * @param string $post_type   Post type.
</code></pre><pre class=''><code><span class='LineNumber'>3665</span>  * @param int    $post_parent Post parent ID.
</code></pre><pre class=''><code><span class='LineNumber'>3666</span>  * @return string Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)
</code></pre><pre class=''><code><span class='LineNumber'>3667</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3668</span> function wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {
</code></pre><pre class=''><code><span class='LineNumber'>3669</span> 	if ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) || ( 'inherit' == $post_status &amp;&amp; 'revision' == $post_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>3670</span> 		return $slug;
</code></pre><pre class=''><code><span class='LineNumber'>3671</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3672</span> 	global $wpdb, $wp_rewrite;
</code></pre><pre class=''><code><span class='LineNumber'>3673</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3674</span> 	$original_slug = $slug;
</code></pre><pre class=''><code><span class='LineNumber'>3675</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3676</span> 	$feeds = $wp_rewrite-&gt;feeds;
</code></pre><pre class=''><code><span class='LineNumber'>3677</span> 	if ( ! is_array( $feeds ) )
</code></pre><pre class=''><code><span class='LineNumber'>3678</span> 		$feeds = array();
</code></pre><pre class=''><code><span class='LineNumber'>3679</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3680</span> 	$hierarchical_post_types = get_post_types( array('hierarchical' =&gt; true) );
</code></pre><pre class=''><code><span class='LineNumber'>3681</span> 	if ( 'attachment' == $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>3682</span> 		// Attachment slugs must be unique across all types.
</code></pre><pre class=''><code><span class='LineNumber'>3683</span> 		$check_sql = &quot;SELECT post_name FROM $wpdb-&gt;posts WHERE post_name = %s AND ID != %d LIMIT 1&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3684</span> 		$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $slug, $post_ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>3685</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3686</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3687</span> 		 * Filter whether the post slug would make a bad attachment slug.
</code></pre><pre class=''><code><span class='LineNumber'>3688</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3689</span> 		 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3690</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3691</span> 		 * @param bool   $bad_slug Whether the slug would be bad as an attachment slug.
</code></pre><pre class=''><code><span class='LineNumber'>3692</span> 		 * @param string $slug     The post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3693</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3694</span> 		if ( $post_name_check || in_array( $slug, $feeds ) || apply_filters( 'wp_unique_post_slug_is_bad_attachment_slug', false, $slug ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3695</span> 			$suffix = 2;
</code></pre><pre class=''><code><span class='LineNumber'>3696</span> 			do {
</code></pre><pre class=''><code><span class='LineNumber'>3697</span> 				$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . &quot;-$suffix&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3698</span> 				$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $alt_post_name, $post_ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>3699</span> 				$suffix++;
</code></pre><pre class=''><code><span class='LineNumber'>3700</span> 			} while ( $post_name_check );
</code></pre><pre class=''><code><span class='LineNumber'>3701</span> 			$slug = $alt_post_name;
</code></pre><pre class=''><code><span class='LineNumber'>3702</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3703</span> 	} elseif ( in_array( $post_type, $hierarchical_post_types ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3704</span> 		if ( 'nav_menu_item' == $post_type )
</code></pre><pre class=''><code><span class='LineNumber'>3705</span> 			return $slug;
</code></pre><pre class=''><code><span class='LineNumber'>3706</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3707</span> 		/*
</code></pre><pre class=''><code><span class='LineNumber'>3708</span> 		 * Page slugs must be unique within their own trees. Pages are in a separate
</code></pre><pre class=''><code><span class='LineNumber'>3709</span> 		 * namespace than posts so page slugs are allowed to overlap post slugs.
</code></pre><pre class=''><code><span class='LineNumber'>3710</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3711</span> 		$check_sql = &quot;SELECT post_name FROM $wpdb-&gt;posts WHERE post_name = %s AND post_type IN ( '&quot; . implode( &quot;', '&quot;, esc_sql( $hierarchical_post_types ) ) . &quot;' ) AND ID != %d AND post_parent = %d LIMIT 1&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3712</span> 		$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $slug, $post_ID, $post_parent ) );
</code></pre><pre class=''><code><span class='LineNumber'>3713</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3714</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3715</span> 		 * Filter whether the post slug would make a bad hierarchical post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3716</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3717</span> 		 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3718</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3719</span> 		 * @param bool   $bad_slug    Whether the post slug would be bad in a hierarchical post context.
</code></pre><pre class=''><code><span class='LineNumber'>3720</span> 		 * @param string $slug        The post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3721</span> 		 * @param string $post_type   Post type.
</code></pre><pre class=''><code><span class='LineNumber'>3722</span> 		 * @param int    $post_parent Post parent ID.
</code></pre><pre class=''><code><span class='LineNumber'>3723</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3724</span> 		if ( $post_name_check || in_array( $slug, $feeds ) || preg_match( &quot;@^($wp_rewrite-&gt;pagination_base)?\d+$@&quot;, $slug )  || apply_filters( 'wp_unique_post_slug_is_bad_hierarchical_slug', false, $slug, $post_type, $post_parent ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3725</span> 			$suffix = 2;
</code></pre><pre class=''><code><span class='LineNumber'>3726</span> 			do {
</code></pre><pre class=''><code><span class='LineNumber'>3727</span> 				$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . &quot;-$suffix&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3728</span> 				$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $alt_post_name, $post_ID, $post_parent ) );
</code></pre><pre class=''><code><span class='LineNumber'>3729</span> 				$suffix++;
</code></pre><pre class=''><code><span class='LineNumber'>3730</span> 			} while ( $post_name_check );
</code></pre><pre class=''><code><span class='LineNumber'>3731</span> 			$slug = $alt_post_name;
</code></pre><pre class=''><code><span class='LineNumber'>3732</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3733</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>3734</span> 		// Post slugs must be unique across all posts.
</code></pre><pre class=''><code><span class='LineNumber'>3735</span> 		$check_sql = &quot;SELECT post_name FROM $wpdb-&gt;posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3736</span> 		$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $slug, $post_type, $post_ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>3737</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3738</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>3739</span> 		 * Filter whether the post slug would be bad as a flat slug.
</code></pre><pre class=''><code><span class='LineNumber'>3740</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3741</span> 		 * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3742</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>3743</span> 		 * @param bool   $bad_slug  Whether the post slug would be bad as a flat slug.
</code></pre><pre class=''><code><span class='LineNumber'>3744</span> 		 * @param string $slug      The post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3745</span> 		 * @param string $post_type Post type.
</code></pre><pre class=''><code><span class='LineNumber'>3746</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>3747</span> 		if ( $post_name_check || in_array( $slug, $feeds ) || apply_filters( 'wp_unique_post_slug_is_bad_flat_slug', false, $slug, $post_type ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3748</span> 			$suffix = 2;
</code></pre><pre class=''><code><span class='LineNumber'>3749</span> 			do {
</code></pre><pre class=''><code><span class='LineNumber'>3750</span> 				$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . &quot;-$suffix&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>3751</span> 				$post_name_check = $wpdb-&gt;get_var( $wpdb-&gt;prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>3752</span> 				$suffix++;
</code></pre><pre class=''><code><span class='LineNumber'>3753</span> 			} while ( $post_name_check );
</code></pre><pre class=''><code><span class='LineNumber'>3754</span> 			$slug = $alt_post_name;
</code></pre><pre class=''><code><span class='LineNumber'>3755</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3756</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3757</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3758</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3759</span> 	 * Filter the unique post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3760</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3761</span> 	 * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3762</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3763</span> 	 * @param string $slug          The post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3764</span> 	 * @param int    $post_ID       Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3765</span> 	 * @param string $post_status   The post status.
</code></pre><pre class=''><code><span class='LineNumber'>3766</span> 	 * @param string $post_type     Post type.
</code></pre><pre class=''><code><span class='LineNumber'>3767</span> 	 * @param int    $post_parent   Post parent ID
</code></pre><pre class=''><code><span class='LineNumber'>3768</span> 	 * @param string $original_slug The original post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3769</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3770</span> 	return apply_filters( 'wp_unique_post_slug', $slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug );
</code></pre><pre class=''><code><span class='LineNumber'>3771</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3772</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3773</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3774</span>  * Truncate a post slug.
</code></pre><pre class=''><code><span class='LineNumber'>3775</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3776</span>  * @since 3.6.0
</code></pre><pre class=''><code><span class='LineNumber'>3777</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>3778</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3779</span>  * @see utf8_uri_encode()
</code></pre><pre class=''><code><span class='LineNumber'>3780</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3781</span>  * @param string $slug   The slug to truncate.
</code></pre><pre class=''><code><span class='LineNumber'>3782</span>  * @param int    $length Optional. Max length of the slug. Default 200 (characters).
</code></pre><pre class=''><code><span class='LineNumber'>3783</span>  * @return string The truncated slug.
</code></pre><pre class=''><code><span class='LineNumber'>3784</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3785</span> function _truncate_post_slug( $slug, $length = 200 ) {
</code></pre><pre class=''><code><span class='LineNumber'>3786</span> 	if ( strlen( $slug ) &gt; $length ) {
</code></pre><pre class=''><code><span class='LineNumber'>3787</span> 		$decoded_slug = urldecode( $slug );
</code></pre><pre class=''><code><span class='LineNumber'>3788</span> 		if ( $decoded_slug === $slug )
</code></pre><pre class=''><code><span class='LineNumber'>3789</span> 			$slug = substr( $slug, 0, $length );
</code></pre><pre class=''><code><span class='LineNumber'>3790</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>3791</span> 			$slug = utf8_uri_encode( $decoded_slug, $length );
</code></pre><pre class=''><code><span class='LineNumber'>3792</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3793</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3794</span> 	return rtrim( $slug, '-' );
</code></pre><pre class=''><code><span class='LineNumber'>3795</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3796</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3797</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3798</span>  * Add tags to a post.
</code></pre><pre class=''><code><span class='LineNumber'>3799</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3800</span>  * @see wp_set_post_tags()
</code></pre><pre class=''><code><span class='LineNumber'>3801</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3802</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3803</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3804</span>  * @param int    $post_id Optional. The Post ID. Does not default to the ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>3805</span>  *                        Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>3806</span>  * @param string $tags    Optional. The tags to set for the post, separated by commas. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>3807</span>  * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>3808</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3809</span> function wp_add_post_tags( $post_id = 0, $tags = '' ) {
</code></pre><pre class=''><code><span class='LineNumber'>3810</span> 	return wp_set_post_tags($post_id, $tags, true);
</code></pre><pre class=''><code><span class='LineNumber'>3811</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3812</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3813</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3814</span>  * Set the tags for a post.
</code></pre><pre class=''><code><span class='LineNumber'>3815</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3816</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3817</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3818</span>  * @see wp_set_object_terms()
</code></pre><pre class=''><code><span class='LineNumber'>3819</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3820</span>  * @param int    $post_id Optional. The Post ID. Does not default to the ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>3821</span>  * @param string $tags    Optional. The tags to set for the post, separated by commas.
</code></pre><pre class=''><code><span class='LineNumber'>3822</span>  *                        Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>3823</span>  * @param bool   $append  Optional. If true, don't delete existing tags, just add on. If false,
</code></pre><pre class=''><code><span class='LineNumber'>3824</span>  *                        replace the tags with the new tags. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>3825</span>  * @return mixed Array of affected term IDs. WP_Error or false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>3826</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3827</span> function wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>3828</span> 	return wp_set_post_terms( $post_id, $tags, 'post_tag', $append);
</code></pre><pre class=''><code><span class='LineNumber'>3829</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3830</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3831</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3832</span>  * Set the terms for a post.
</code></pre><pre class=''><code><span class='LineNumber'>3833</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3834</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>3835</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3836</span>  * @see wp_set_object_terms()
</code></pre><pre class=''><code><span class='LineNumber'>3837</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3838</span>  * @param int    $post_id  Optional. The Post ID. Does not default to the ID of the global $post.
</code></pre><pre class=''><code><span class='LineNumber'>3839</span>  * @param string $tags     Optional. The tags to set for the post, separated by commas. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>3840</span>  * @param string $taxonomy Optional. Taxonomy name. Default 'post_tag'.
</code></pre><pre class=''><code><span class='LineNumber'>3841</span>  * @param bool   $append   Optional. If true, don't delete existing tags, just add on. If false,
</code></pre><pre class=''><code><span class='LineNumber'>3842</span>  *                         replace the tags with the new tags. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>3843</span>  * @return mixed Array of affected term IDs. WP_Error or false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>3844</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3845</span> function wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>3846</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>3847</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3848</span> 	if ( !$post_id )
</code></pre><pre class=''><code><span class='LineNumber'>3849</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>3850</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3851</span> 	if ( empty($tags) )
</code></pre><pre class=''><code><span class='LineNumber'>3852</span> 		$tags = array();
</code></pre><pre class=''><code><span class='LineNumber'>3853</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3854</span> 	if ( ! is_array( $tags ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3855</span> 		$comma = _x( ',', 'tag delimiter' );
</code></pre><pre class=''><code><span class='LineNumber'>3856</span> 		if ( ',' !== $comma )
</code></pre><pre class=''><code><span class='LineNumber'>3857</span> 			$tags = str_replace( $comma, ',', $tags );
</code></pre><pre class=''><code><span class='LineNumber'>3858</span> 		$tags = explode( ',', trim( $tags, &quot; \n\t\r\0\x0B,&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>3859</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3860</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3861</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>3862</span> 	 * Hierarchical taxonomies must always pass IDs rather than names so that
</code></pre><pre class=''><code><span class='LineNumber'>3863</span> 	 * children with the same names but different parents aren't confused.
</code></pre><pre class=''><code><span class='LineNumber'>3864</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3865</span> 	if ( is_taxonomy_hierarchical( $taxonomy ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3866</span> 		$tags = array_unique( array_map( 'intval', $tags ) );
</code></pre><pre class=''><code><span class='LineNumber'>3867</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3868</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3869</span> 	return wp_set_object_terms( $post_id, $tags, $taxonomy, $append );
</code></pre><pre class=''><code><span class='LineNumber'>3870</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3871</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3872</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3873</span>  * Set categories for a post.
</code></pre><pre class=''><code><span class='LineNumber'>3874</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3875</span>  * If the post categories parameter is not set, then the default category is
</code></pre><pre class=''><code><span class='LineNumber'>3876</span>  * going used.
</code></pre><pre class=''><code><span class='LineNumber'>3877</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3878</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>3879</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3880</span>  * @param int       $post_ID         Optional. The Post ID. Does not default to the ID
</code></pre><pre class=''><code><span class='LineNumber'>3881</span>  *                                   of the global $post. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>3882</span>  * @param array|int $post_categories Optional. List of categories or ID of category.
</code></pre><pre class=''><code><span class='LineNumber'>3883</span>  *                                   Default empty array.
</code></pre><pre class=''><code><span class='LineNumber'>3884</span>  * @param bool      $append         If true, don't delete existing categories, just add on.
</code></pre><pre class=''><code><span class='LineNumber'>3885</span>  *                                  If false, replace the categories with the new categories.
</code></pre><pre class=''><code><span class='LineNumber'>3886</span>  * @return bool|mixed
</code></pre><pre class=''><code><span class='LineNumber'>3887</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3888</span> function wp_set_post_categories( $post_ID = 0, $post_categories = array(), $append = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>3889</span> 	$post_ID = (int) $post_ID;
</code></pre><pre class=''><code><span class='LineNumber'>3890</span> 	$post_type = get_post_type( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3891</span> 	$post_status = get_post_status( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>3892</span> 	// If $post_categories isn't already an array, make it one:
</code></pre><pre class=''><code><span class='LineNumber'>3893</span> 	$post_categories = (array) $post_categories;
</code></pre><pre class=''><code><span class='LineNumber'>3894</span> 	if ( empty( $post_categories ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3895</span> 		if ( 'post' == $post_type &amp;&amp; 'auto-draft' != $post_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>3896</span> 			$post_categories = array( get_option('default_category') );
</code></pre><pre class=''><code><span class='LineNumber'>3897</span> 			$append = false;
</code></pre><pre class=''><code><span class='LineNumber'>3898</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>3899</span> 			$post_categories = array();
</code></pre><pre class=''><code><span class='LineNumber'>3900</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>3901</span> 	} else if ( 1 == count($post_categories) &amp;&amp; '' == reset($post_categories) ) {
</code></pre><pre class=''><code><span class='LineNumber'>3902</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>3903</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>3904</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3905</span> 	return wp_set_post_terms( $post_ID, $post_categories, 'category', $append );
</code></pre><pre class=''><code><span class='LineNumber'>3906</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3907</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3908</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3909</span>  * Transition the post status of a post.
</code></pre><pre class=''><code><span class='LineNumber'>3910</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3911</span>  * Calls hooks to transition post status.
</code></pre><pre class=''><code><span class='LineNumber'>3912</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3913</span>  * The first is 'transition_post_status' with new status, old status, and post data.
</code></pre><pre class=''><code><span class='LineNumber'>3914</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3915</span>  * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the
</code></pre><pre class=''><code><span class='LineNumber'>3916</span>  * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the
</code></pre><pre class=''><code><span class='LineNumber'>3917</span>  * post data.
</code></pre><pre class=''><code><span class='LineNumber'>3918</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3919</span>  * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status
</code></pre><pre class=''><code><span class='LineNumber'>3920</span>  * parameter and POSTTYPE is post_type post data.
</code></pre><pre class=''><code><span class='LineNumber'>3921</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3922</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3923</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3924</span>  * @param string $new_status Transition to this post status.
</code></pre><pre class=''><code><span class='LineNumber'>3925</span>  * @param string $old_status Previous post status.
</code></pre><pre class=''><code><span class='LineNumber'>3926</span>  * @param object $post Post data.
</code></pre><pre class=''><code><span class='LineNumber'>3927</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3928</span> function wp_transition_post_status( $new_status, $old_status, $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>3929</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3930</span> 	 * Fires when a post is transitioned from one status to another.
</code></pre><pre class=''><code><span class='LineNumber'>3931</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3932</span> 	 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3933</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3934</span> 	 * @param string  $new_status New post status.
</code></pre><pre class=''><code><span class='LineNumber'>3935</span> 	 * @param string  $old_status Old post status.
</code></pre><pre class=''><code><span class='LineNumber'>3936</span> 	 * @param WP_Post $post       Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3937</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3938</span> 	do_action( 'transition_post_status', $new_status, $old_status, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3939</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3940</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3941</span> 	 * Fires when a post is transitioned from one status to another.
</code></pre><pre class=''><code><span class='LineNumber'>3942</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3943</span> 	 * The dynamic portions of the hook name, $new_status and $old status,
</code></pre><pre class=''><code><span class='LineNumber'>3944</span> 	 * refer to the old and new post statuses, respectively.
</code></pre><pre class=''><code><span class='LineNumber'>3945</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3946</span> 	 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3947</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3948</span> 	 * @param WP_Post $post Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3949</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3950</span> 	do_action( &quot;{$old_status}_to_{$new_status}&quot;, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3951</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3952</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3953</span> 	 * Fires when a post is transitioned from one status to another.
</code></pre><pre class=''><code><span class='LineNumber'>3954</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3955</span> 	 * The dynamic portions of the hook name, $new_status and $post-&gt;post_type,
</code></pre><pre class=''><code><span class='LineNumber'>3956</span> 	 * refer to the new post status and post type, respectively.
</code></pre><pre class=''><code><span class='LineNumber'>3957</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3958</span> 	 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>3959</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3960</span> 	 * @param int     $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3961</span> 	 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>3962</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3963</span> 	do_action( &quot;{$new_status}_{$post-&gt;post_type}&quot;, $post-&gt;ID, $post );
</code></pre><pre class=''><code><span class='LineNumber'>3964</span> }
</code></pre><pre class=''><code><span class='LineNumber'>3965</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3966</span> //
</code></pre><pre class=''><code><span class='LineNumber'>3967</span> // Trackback and ping functions
</code></pre><pre class=''><code><span class='LineNumber'>3968</span> //
</code></pre><pre class=''><code><span class='LineNumber'>3969</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3970</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3971</span>  * Add a URL to those already pinged.
</code></pre><pre class=''><code><span class='LineNumber'>3972</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3973</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>3974</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3975</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>3976</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>3977</span>  * @param int    $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>3978</span>  * @param string $uri     Ping URI.
</code></pre><pre class=''><code><span class='LineNumber'>3979</span>  * @return int How many rows were updated.
</code></pre><pre class=''><code><span class='LineNumber'>3980</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>3981</span> function add_ping( $post_id, $uri ) {
</code></pre><pre class=''><code><span class='LineNumber'>3982</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>3983</span> 	$pung = $wpdb-&gt;get_var( $wpdb-&gt;prepare( &quot;SELECT pinged FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $post_id ));
</code></pre><pre class=''><code><span class='LineNumber'>3984</span> 	$pung = trim($pung);
</code></pre><pre class=''><code><span class='LineNumber'>3985</span> 	$pung = preg_split('/\s/', $pung);
</code></pre><pre class=''><code><span class='LineNumber'>3986</span> 	$pung[] = $uri;
</code></pre><pre class=''><code><span class='LineNumber'>3987</span> 	$new = implode(&quot;\n&quot;, $pung);
</code></pre><pre class=''><code><span class='LineNumber'>3988</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3989</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3990</span> 	 * Filter the new ping URL to add for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>3991</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3992</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>3993</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>3994</span> 	 * @param string $new New ping URL to add.
</code></pre><pre class=''><code><span class='LineNumber'>3995</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>3996</span> 	$new = apply_filters( 'add_ping', $new );
</code></pre><pre class=''><code><span class='LineNumber'>3997</span> 
</code></pre><pre class=''><code><span class='LineNumber'>3998</span> 	// expected_slashed ($new).
</code></pre><pre class=''><code><span class='LineNumber'>3999</span> 	$new = wp_unslash($new);
</code></pre><pre class=''><code><span class='LineNumber'>4000</span> 	return $wpdb-&gt;update( $wpdb-&gt;posts, array( 'pinged' =&gt; $new ), array( 'ID' =&gt; $post_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>4001</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4002</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4003</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4004</span>  * Retrieve enclosures already enclosed for a post.
</code></pre><pre class=''><code><span class='LineNumber'>4005</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4006</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>4007</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4008</span>  * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>4009</span>  * @return array List of enclosures.
</code></pre><pre class=''><code><span class='LineNumber'>4010</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4011</span> function get_enclosed( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4012</span> 	$custom_fields = get_post_custom( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4013</span> 	$pung = array();
</code></pre><pre class=''><code><span class='LineNumber'>4014</span> 	if ( !is_array( $custom_fields ) )
</code></pre><pre class=''><code><span class='LineNumber'>4015</span> 		return $pung;
</code></pre><pre class=''><code><span class='LineNumber'>4016</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4017</span> 	foreach ( $custom_fields as $key =&gt; $val ) {
</code></pre><pre class=''><code><span class='LineNumber'>4018</span> 		if ( 'enclosure' != $key || !is_array( $val ) )
</code></pre><pre class=''><code><span class='LineNumber'>4019</span> 			continue;
</code></pre><pre class=''><code><span class='LineNumber'>4020</span> 		foreach( $val as $enc ) {
</code></pre><pre class=''><code><span class='LineNumber'>4021</span> 			$enclosure = explode( &quot;\n&quot;, $enc );
</code></pre><pre class=''><code><span class='LineNumber'>4022</span> 			$pung[] = trim( $enclosure[ 0 ] );
</code></pre><pre class=''><code><span class='LineNumber'>4023</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4024</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4025</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4026</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4027</span> 	 * Filter the list of enclosures already enclosed for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>4028</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4029</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4030</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4031</span> 	 * @param array $pung    Array of enclosures for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>4032</span> 	 * @param int   $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>4033</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4034</span> 	$pung = apply_filters( 'get_enclosed', $pung, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4035</span> 	return $pung;
</code></pre><pre class=''><code><span class='LineNumber'>4036</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4037</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4038</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4039</span>  * Retrieve URLs already pinged for a post.
</code></pre><pre class=''><code><span class='LineNumber'>4040</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4041</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>4042</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4043</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4044</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4045</span>  * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>4046</span>  * @return array
</code></pre><pre class=''><code><span class='LineNumber'>4047</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4048</span> function get_pung( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4049</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4050</span> 	$pung = $wpdb-&gt;get_var( $wpdb-&gt;prepare( &quot;SELECT pinged FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $post_id ));
</code></pre><pre class=''><code><span class='LineNumber'>4051</span> 	$pung = trim($pung);
</code></pre><pre class=''><code><span class='LineNumber'>4052</span> 	$pung = preg_split('/\s/', $pung);
</code></pre><pre class=''><code><span class='LineNumber'>4053</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4054</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4055</span> 	 * Filter the list of already-pinged URLs for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>4056</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4057</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4058</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4059</span> 	 * @param array $pung Array of URLs already pinged for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>4060</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4061</span> 	$pung = apply_filters( 'get_pung', $pung );
</code></pre><pre class=''><code><span class='LineNumber'>4062</span> 	return $pung;
</code></pre><pre class=''><code><span class='LineNumber'>4063</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4064</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4065</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4066</span>  * Retrieve URLs that need to be pinged.
</code></pre><pre class=''><code><span class='LineNumber'>4067</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4068</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>4069</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4070</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4071</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4072</span>  * @param int $post_id Post ID
</code></pre><pre class=''><code><span class='LineNumber'>4073</span>  * @return array
</code></pre><pre class=''><code><span class='LineNumber'>4074</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4075</span> function get_to_ping( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4076</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4077</span> 	$to_ping = $wpdb-&gt;get_var( $wpdb-&gt;prepare( &quot;SELECT to_ping FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $post_id ));
</code></pre><pre class=''><code><span class='LineNumber'>4078</span> 	$to_ping = sanitize_trackback_urls( $to_ping );
</code></pre><pre class=''><code><span class='LineNumber'>4079</span> 	$to_ping = preg_split('/\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);
</code></pre><pre class=''><code><span class='LineNumber'>4080</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4081</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4082</span> 	 * Filter the list of URLs yet to ping for the given post.
</code></pre><pre class=''><code><span class='LineNumber'>4083</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4084</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4085</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4086</span> 	 * @param array $to_ping List of URLs yet to ping.
</code></pre><pre class=''><code><span class='LineNumber'>4087</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4088</span> 	$to_ping = apply_filters( 'get_to_ping', $to_ping );
</code></pre><pre class=''><code><span class='LineNumber'>4089</span> 	return $to_ping;
</code></pre><pre class=''><code><span class='LineNumber'>4090</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4091</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4092</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4093</span>  * Do trackbacks for a list of URLs.
</code></pre><pre class=''><code><span class='LineNumber'>4094</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4095</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4096</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4097</span>  * @param string $tb_list Comma separated list of URLs.
</code></pre><pre class=''><code><span class='LineNumber'>4098</span>  * @param int    $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>4099</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4100</span> function trackback_url_list( $tb_list, $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4101</span> 	if ( ! empty( $tb_list ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4102</span> 		// Get post data.
</code></pre><pre class=''><code><span class='LineNumber'>4103</span> 		$postdata = get_post( $post_id, ARRAY_A );
</code></pre><pre class=''><code><span class='LineNumber'>4104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4105</span> 		// Form an excerpt.
</code></pre><pre class=''><code><span class='LineNumber'>4106</span> 		$excerpt = strip_tags( $postdata['post_excerpt'] ? $postdata['post_excerpt'] : $postdata['post_content'] );
</code></pre><pre class=''><code><span class='LineNumber'>4107</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4108</span> 		if ( strlen( $excerpt ) &gt; 255 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4109</span> 			$excerpt = substr( $excerpt, 0, 252 ) . '&amp;hellip;';
</code></pre><pre class=''><code><span class='LineNumber'>4110</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4111</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4112</span> 		$trackback_urls = explode( ',', $tb_list );
</code></pre><pre class=''><code><span class='LineNumber'>4113</span> 		foreach( (array) $trackback_urls as $tb_url ) {
</code></pre><pre class=''><code><span class='LineNumber'>4114</span> 			$tb_url = trim( $tb_url );
</code></pre><pre class=''><code><span class='LineNumber'>4115</span> 			trackback( $tb_url, wp_unslash( $postdata['post_title'] ), $excerpt, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4116</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4117</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4118</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4119</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4120</span> //
</code></pre><pre class=''><code><span class='LineNumber'>4121</span> // Page functions
</code></pre><pre class=''><code><span class='LineNumber'>4122</span> //
</code></pre><pre class=''><code><span class='LineNumber'>4123</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4124</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4125</span>  * Get a list of page IDs.
</code></pre><pre class=''><code><span class='LineNumber'>4126</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4127</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4128</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4129</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4130</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4131</span>  * @return array List of page IDs.
</code></pre><pre class=''><code><span class='LineNumber'>4132</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4133</span> function get_all_page_ids() {
</code></pre><pre class=''><code><span class='LineNumber'>4134</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4135</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4136</span> 	$page_ids = wp_cache_get('all_page_ids', 'posts');
</code></pre><pre class=''><code><span class='LineNumber'>4137</span> 	if ( ! is_array( $page_ids ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4138</span> 		$page_ids = $wpdb-&gt;get_col(&quot;SELECT ID FROM $wpdb-&gt;posts WHERE post_type = 'page'&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>4139</span> 		wp_cache_add('all_page_ids', $page_ids, 'posts');
</code></pre><pre class=''><code><span class='LineNumber'>4140</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4142</span> 	return $page_ids;
</code></pre><pre class=''><code><span class='LineNumber'>4143</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4144</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4145</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4146</span>  * Retrieves page data given a page ID or page object.
</code></pre><pre class=''><code><span class='LineNumber'>4147</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4148</span>  * Use get_post() instead of get_page().
</code></pre><pre class=''><code><span class='LineNumber'>4149</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4150</span>  * @since 1.5.1
</code></pre><pre class=''><code><span class='LineNumber'>4151</span>  * @deprecated 3.5.0 Use get_post()
</code></pre><pre class=''><code><span class='LineNumber'>4152</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4153</span>  * @param mixed  $page   Page object or page ID. Passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>4154</span>  * @param string $output Optional. What to output. Accepts OBJECT, ARRAY_A, or ARRAY_N.
</code></pre><pre class=''><code><span class='LineNumber'>4155</span>  *                       Default OBJECT.
</code></pre><pre class=''><code><span class='LineNumber'>4156</span>  * @param string $filter Optional. How the return value should be filtered. Accepts 'raw',
</code></pre><pre class=''><code><span class='LineNumber'>4157</span>  *                       'edit', 'db', 'display'. Default 'raw'.
</code></pre><pre class=''><code><span class='LineNumber'>4158</span>  * @return WP_Post|null WP_Post on success or null on failure.
</code></pre><pre class=''><code><span class='LineNumber'>4159</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4160</span> function get_page( $page, $output = OBJECT, $filter = 'raw') {
</code></pre><pre class=''><code><span class='LineNumber'>4161</span> 	return get_post( $page, $output, $filter );
</code></pre><pre class=''><code><span class='LineNumber'>4162</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4164</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4165</span>  * Retrieves a page given its path.
</code></pre><pre class=''><code><span class='LineNumber'>4166</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4167</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4168</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4169</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4170</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4171</span>  * @param string       $page_path Page path.
</code></pre><pre class=''><code><span class='LineNumber'>4172</span>  * @param string       $output    Optional. Output type. Accepts OBJECT, ARRAY_N, or ARRAY_A.
</code></pre><pre class=''><code><span class='LineNumber'>4173</span>  *                                Default OBJECT.
</code></pre><pre class=''><code><span class='LineNumber'>4174</span>  * @param string|array $post_type Optional. Post type or array of post types. Default 'page'.
</code></pre><pre class=''><code><span class='LineNumber'>4175</span>  * @return WP_Post|null WP_Post on success or null on failure.
</code></pre><pre class=''><code><span class='LineNumber'>4176</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4177</span> function get_page_by_path( $page_path, $output = OBJECT, $post_type = 'page' ) {
</code></pre><pre class=''><code><span class='LineNumber'>4178</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4179</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4180</span> 	$page_path = rawurlencode(urldecode($page_path));
</code></pre><pre class=''><code><span class='LineNumber'>4181</span> 	$page_path = str_replace('%2F', '/', $page_path);
</code></pre><pre class=''><code><span class='LineNumber'>4182</span> 	$page_path = str_replace('%20', ' ', $page_path);
</code></pre><pre class=''><code><span class='LineNumber'>4183</span> 	$parts = explode( '/', trim( $page_path, '/' ) );
</code></pre><pre class=''><code><span class='LineNumber'>4184</span> 	$parts = esc_sql( $parts );
</code></pre><pre class=''><code><span class='LineNumber'>4185</span> 	$parts = array_map( 'sanitize_title_for_query', $parts );
</code></pre><pre class=''><code><span class='LineNumber'>4186</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4187</span> 	$in_string = &quot;'&quot; . implode( &quot;','&quot;, $parts ) . &quot;'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4188</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4189</span> 	if ( is_array( $post_type ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4190</span> 		$post_types = $post_type;
</code></pre><pre class=''><code><span class='LineNumber'>4191</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>4192</span> 		$post_types = array( $post_type, 'attachment' );
</code></pre><pre class=''><code><span class='LineNumber'>4193</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4194</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4195</span> 	$post_types = esc_sql( $post_types );
</code></pre><pre class=''><code><span class='LineNumber'>4196</span> 	$post_type_in_string = &quot;'&quot; . implode( &quot;','&quot;, $post_types ) . &quot;'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4197</span> 	$sql = &quot;
</code></pre><pre class=''><code><span class='LineNumber'>4198</span> 		SELECT ID, post_name, post_parent, post_type
</code></pre><pre class=''><code><span class='LineNumber'>4199</span> 		FROM $wpdb-&gt;posts
</code></pre><pre class=''><code><span class='LineNumber'>4200</span> 		WHERE post_name IN ($in_string)
</code></pre><pre class=''><code><span class='LineNumber'>4201</span> 		AND post_type IN ($post_type_in_string)
</code></pre><pre class=''><code><span class='LineNumber'>4202</span> 	&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4204</span> 	$pages = $wpdb-&gt;get_results( $sql, OBJECT_K );
</code></pre><pre class=''><code><span class='LineNumber'>4205</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4206</span> 	$revparts = array_reverse( $parts );
</code></pre><pre class=''><code><span class='LineNumber'>4207</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4208</span> 	$foundid = 0;
</code></pre><pre class=''><code><span class='LineNumber'>4209</span> 	foreach ( (array) $pages as $page ) {
</code></pre><pre class=''><code><span class='LineNumber'>4210</span> 		if ( $page-&gt;post_name == $revparts[0] ) {
</code></pre><pre class=''><code><span class='LineNumber'>4211</span> 			$count = 0;
</code></pre><pre class=''><code><span class='LineNumber'>4212</span> 			$p = $page;
</code></pre><pre class=''><code><span class='LineNumber'>4213</span> 			while ( $p-&gt;post_parent != 0 &amp;&amp; isset( $pages[ $p-&gt;post_parent ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4214</span> 				$count++;
</code></pre><pre class=''><code><span class='LineNumber'>4215</span> 				$parent = $pages[ $p-&gt;post_parent ];
</code></pre><pre class=''><code><span class='LineNumber'>4216</span> 				if ( ! isset( $revparts[ $count ] ) || $parent-&gt;post_name != $revparts[ $count ] )
</code></pre><pre class=''><code><span class='LineNumber'>4217</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>4218</span> 				$p = $parent;
</code></pre><pre class=''><code><span class='LineNumber'>4219</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4220</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4221</span> 			if ( $p-&gt;post_parent == 0 &amp;&amp; $count+1 == count( $revparts ) &amp;&amp; $p-&gt;post_name == $revparts[ $count ] ) {
</code></pre><pre class=''><code><span class='LineNumber'>4222</span> 				$foundid = $page-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>4223</span> 				if ( $page-&gt;post_type == $post_type )
</code></pre><pre class=''><code><span class='LineNumber'>4224</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>4225</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4226</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4227</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4228</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4229</span> 	if ( $foundid )
</code></pre><pre class=''><code><span class='LineNumber'>4230</span> 		return get_post( $foundid, $output );
</code></pre><pre class=''><code><span class='LineNumber'>4231</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4232</span> 	return null;
</code></pre><pre class=''><code><span class='LineNumber'>4233</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4234</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4235</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4236</span>  * Retrieve a page given its title.
</code></pre><pre class=''><code><span class='LineNumber'>4237</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4238</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4239</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4240</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4241</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4242</span>  * @param string       $page_title Page title
</code></pre><pre class=''><code><span class='LineNumber'>4243</span>  * @param string       $output     Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A.
</code></pre><pre class=''><code><span class='LineNumber'>4244</span>  *                                 Default OBJECT.
</code></pre><pre class=''><code><span class='LineNumber'>4245</span>  * @param string|array $post_type  Optional. Post type or array of post types. Default 'page'.
</code></pre><pre class=''><code><span class='LineNumber'>4246</span>  * @return WP_Post|null WP_Post on success or null on failure
</code></pre><pre class=''><code><span class='LineNumber'>4247</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4248</span> function get_page_by_title( $page_title, $output = OBJECT, $post_type = 'page' ) {
</code></pre><pre class=''><code><span class='LineNumber'>4249</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4250</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4251</span> 	if ( is_array( $post_type ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4252</span> 		$post_type = esc_sql( $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>4253</span> 		$post_type_in_string = &quot;'&quot; . implode( &quot;','&quot;, $post_type ) . &quot;'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4254</span> 		$sql = $wpdb-&gt;prepare( &quot;
</code></pre><pre class=''><code><span class='LineNumber'>4255</span> 			SELECT ID
</code></pre><pre class=''><code><span class='LineNumber'>4256</span> 			FROM $wpdb-&gt;posts
</code></pre><pre class=''><code><span class='LineNumber'>4257</span> 			WHERE post_title = %s
</code></pre><pre class=''><code><span class='LineNumber'>4258</span> 			AND post_type IN ($post_type_in_string)
</code></pre><pre class=''><code><span class='LineNumber'>4259</span> 		&quot;, $page_title );
</code></pre><pre class=''><code><span class='LineNumber'>4260</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>4261</span> 		$sql = $wpdb-&gt;prepare( &quot;
</code></pre><pre class=''><code><span class='LineNumber'>4262</span> 			SELECT ID
</code></pre><pre class=''><code><span class='LineNumber'>4263</span> 			FROM $wpdb-&gt;posts
</code></pre><pre class=''><code><span class='LineNumber'>4264</span> 			WHERE post_title = %s
</code></pre><pre class=''><code><span class='LineNumber'>4265</span> 			AND post_type = %s
</code></pre><pre class=''><code><span class='LineNumber'>4266</span> 		&quot;, $page_title, $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>4267</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4268</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4269</span> 	$page = $wpdb-&gt;get_var( $sql );
</code></pre><pre class=''><code><span class='LineNumber'>4270</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4271</span> 	if ( $page )
</code></pre><pre class=''><code><span class='LineNumber'>4272</span> 		return get_post( $page, $output );
</code></pre><pre class=''><code><span class='LineNumber'>4273</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4274</span> 	return null;
</code></pre><pre class=''><code><span class='LineNumber'>4275</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4276</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4277</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4278</span>  * Retrieve child pages from list of pages matching page ID.
</code></pre><pre class=''><code><span class='LineNumber'>4279</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4280</span>  * Matches against the pages parameter against the page ID. Also matches all
</code></pre><pre class=''><code><span class='LineNumber'>4281</span>  * children for the same to retrieve all children of a page. Does not make any
</code></pre><pre class=''><code><span class='LineNumber'>4282</span>  * SQL queries to get the children.
</code></pre><pre class=''><code><span class='LineNumber'>4283</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4284</span>  * @since 1.5.1
</code></pre><pre class=''><code><span class='LineNumber'>4285</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4286</span>  * @param int   $page_id Page ID.
</code></pre><pre class=''><code><span class='LineNumber'>4287</span>  * @param array $pages   List of pages' objects.
</code></pre><pre class=''><code><span class='LineNumber'>4288</span>  * @return array List of page children.
</code></pre><pre class=''><code><span class='LineNumber'>4289</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4290</span> function get_page_children($page_id, $pages) {
</code></pre><pre class=''><code><span class='LineNumber'>4291</span> 	$page_list = array();
</code></pre><pre class=''><code><span class='LineNumber'>4292</span> 	foreach ( (array) $pages as $page ) {
</code></pre><pre class=''><code><span class='LineNumber'>4293</span> 		if ( $page-&gt;post_parent == $page_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4294</span> 			$page_list[] = $page;
</code></pre><pre class=''><code><span class='LineNumber'>4295</span> 			if ( $children = get_page_children($page-&gt;ID, $pages) )
</code></pre><pre class=''><code><span class='LineNumber'>4296</span> 				$page_list = array_merge($page_list, $children);
</code></pre><pre class=''><code><span class='LineNumber'>4297</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4298</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4299</span> 	return $page_list;
</code></pre><pre class=''><code><span class='LineNumber'>4300</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4301</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4302</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4303</span>  * Order the pages with children under parents in a flat list.
</code></pre><pre class=''><code><span class='LineNumber'>4304</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4305</span>  * It uses auxiliary structure to hold parent-children relationships and
</code></pre><pre class=''><code><span class='LineNumber'>4306</span>  * runs in O(N) complexity
</code></pre><pre class=''><code><span class='LineNumber'>4307</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4308</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4309</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4310</span>  * @param array $pages   Posts array, passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>4311</span>  * @param int   $page_id Optional. Parent page ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>4312</span>  * @return array A list arranged by hierarchy. Children immediately follow their parents.
</code></pre><pre class=''><code><span class='LineNumber'>4313</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4314</span> function get_page_hierarchy( &amp;$pages, $page_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4315</span> 	if ( empty( $pages ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4316</span> 		$result = array();
</code></pre><pre class=''><code><span class='LineNumber'>4317</span> 		return $result;
</code></pre><pre class=''><code><span class='LineNumber'>4318</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4319</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4320</span> 	$children = array();
</code></pre><pre class=''><code><span class='LineNumber'>4321</span> 	foreach ( (array) $pages as $p ) {
</code></pre><pre class=''><code><span class='LineNumber'>4322</span> 		$parent_id = intval( $p-&gt;post_parent );
</code></pre><pre class=''><code><span class='LineNumber'>4323</span> 		$children[ $parent_id ][] = $p;
</code></pre><pre class=''><code><span class='LineNumber'>4324</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4325</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4326</span> 	$result = array();
</code></pre><pre class=''><code><span class='LineNumber'>4327</span> 	_page_traverse_name( $page_id, $children, $result );
</code></pre><pre class=''><code><span class='LineNumber'>4328</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4329</span> 	return $result;
</code></pre><pre class=''><code><span class='LineNumber'>4330</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4331</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4332</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4333</span>  * Traverse and return all the nested children post names of a root page.
</code></pre><pre class=''><code><span class='LineNumber'>4334</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4335</span>  * $children contains parent-children relations
</code></pre><pre class=''><code><span class='LineNumber'>4336</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4337</span>  * @since 2.9.0
</code></pre><pre class=''><code><span class='LineNumber'>4338</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4339</span>  * @see _page_traverse_name()
</code></pre><pre class=''><code><span class='LineNumber'>4340</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4341</span>  * @param int   $page_id   Page ID.
</code></pre><pre class=''><code><span class='LineNumber'>4342</span>  * @param array &amp;$children Parent-children relations, passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>4343</span>  * @param array &amp;$result   Result, passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>4344</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4345</span> function _page_traverse_name( $page_id, &amp;$children, &amp;$result ){
</code></pre><pre class=''><code><span class='LineNumber'>4346</span> 	if ( isset( $children[ $page_id ] ) ){
</code></pre><pre class=''><code><span class='LineNumber'>4347</span> 		foreach( (array)$children[ $page_id ] as $child ) {
</code></pre><pre class=''><code><span class='LineNumber'>4348</span> 			$result[ $child-&gt;ID ] = $child-&gt;post_name;
</code></pre><pre class=''><code><span class='LineNumber'>4349</span> 			_page_traverse_name( $child-&gt;ID, $children, $result );
</code></pre><pre class=''><code><span class='LineNumber'>4350</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4351</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4352</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4353</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4354</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4355</span>  * Build URI for a page.
</code></pre><pre class=''><code><span class='LineNumber'>4356</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4357</span>  * Sub pages will be in the &quot;directory&quot; under the parent page post name.
</code></pre><pre class=''><code><span class='LineNumber'>4358</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4359</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>4360</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4361</span>  * @param WP_Post|object|int $page Page object or page ID.
</code></pre><pre class=''><code><span class='LineNumber'>4362</span>  * @return string|false Page URI, false on error.
</code></pre><pre class=''><code><span class='LineNumber'>4363</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4364</span> function get_page_uri( $page ) {
</code></pre><pre class=''><code><span class='LineNumber'>4365</span> 	$page = get_post( $page );
</code></pre><pre class=''><code><span class='LineNumber'>4366</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4367</span> 	if ( ! $page )
</code></pre><pre class=''><code><span class='LineNumber'>4368</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4369</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4370</span> 	$uri = $page-&gt;post_name;
</code></pre><pre class=''><code><span class='LineNumber'>4371</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4372</span> 	foreach ( $page-&gt;ancestors as $parent ) {
</code></pre><pre class=''><code><span class='LineNumber'>4373</span> 		$uri = get_post( $parent )-&gt;post_name . '/' . $uri;
</code></pre><pre class=''><code><span class='LineNumber'>4374</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4375</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4376</span> 	return $uri;
</code></pre><pre class=''><code><span class='LineNumber'>4377</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4378</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4379</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4380</span>  * Retrieve a list of pages.
</code></pre><pre class=''><code><span class='LineNumber'>4381</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4382</span>  * @global wpdb $wpdb WordPress database abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4383</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4384</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>4385</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4386</span>  * @param mixed $args {
</code></pre><pre class=''><code><span class='LineNumber'>4387</span>  *     Array or string of arguments. Optional.
</code></pre><pre class=''><code><span class='LineNumber'>4388</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4389</span>  *     @type int    'child_of'     Page ID to return child and grandchild pages of. Default 0, or no restriction.
</code></pre><pre class=''><code><span class='LineNumber'>4390</span>  *     @type string 'sort_order'   How to sort retrieved pages.
</code></pre><pre class=''><code><span class='LineNumber'>4391</span>  *                                 Default 'ASC'. Accepts 'ASC', 'DESC'.
</code></pre><pre class=''><code><span class='LineNumber'>4392</span>  *     @type string 'sort_column'  What columns to sort pages by, comma-separated.
</code></pre><pre class=''><code><span class='LineNumber'>4393</span>  *                                 Default 'post_title'. Accepts 'post_author', 'post_date', 'post_title', 'post_name',
</code></pre><pre class=''><code><span class='LineNumber'>4394</span>  *                                 'post_modified', 'post_modified_gmt', 'menu_order', 'post_parent', 'ID', 'rand',
</code></pre><pre class=''><code><span class='LineNumber'>4395</span>  *                                 'comment_count'. 'post_' can be omitted for any values that start with it.
</code></pre><pre class=''><code><span class='LineNumber'>4396</span>  *     @type bool   'hierarchical' Whether to return pages hierarchically. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>4397</span>  *     @type array  'exclude'      Array of page IDs to exclude.
</code></pre><pre class=''><code><span class='LineNumber'>4398</span>  *     @type array  'include'      Array of page IDs to include. Cannot be used with 'child_of', 'parent', 'exclude',
</code></pre><pre class=''><code><span class='LineNumber'>4399</span>  *                                 'meta_key', 'meta_value', or 'hierarchical'.
</code></pre><pre class=''><code><span class='LineNumber'>4400</span>  *     @type string 'meta_key'     Only include pages with this meta key.
</code></pre><pre class=''><code><span class='LineNumber'>4401</span>  *     @type string 'meta_value'   Only include pages with this meta value.
</code></pre><pre class=''><code><span class='LineNumber'>4402</span>  *     @type string 'authors'      A comma-separated list of author IDs.
</code></pre><pre class=''><code><span class='LineNumber'>4403</span>  *     @type int    'parent'       Page ID to return direct children of. 'hierarchical' must be false.
</code></pre><pre class=''><code><span class='LineNumber'>4404</span>  *                                 Default -1, or no restriction.
</code></pre><pre class=''><code><span class='LineNumber'>4405</span>  *     @type int    'exclude_tree' Remove all children of the given ID from returned pages.
</code></pre><pre class=''><code><span class='LineNumber'>4406</span>  *     @type int    'number'       The number of pages to return. Default 0, or all pages.
</code></pre><pre class=''><code><span class='LineNumber'>4407</span>  *     @type int    'offset'       The number of pages to skip before returning. Requires 'number'.
</code></pre><pre class=''><code><span class='LineNumber'>4408</span>  *                                 Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>4409</span>  *     @type string 'post_type'    The post type to query.
</code></pre><pre class=''><code><span class='LineNumber'>4410</span>  *                                 Default 'page'.
</code></pre><pre class=''><code><span class='LineNumber'>4411</span>  *     @type string 'post_status'  A comma-separated list of post status types to include.
</code></pre><pre class=''><code><span class='LineNumber'>4412</span>  *                                 Default 'publish'.
</code></pre><pre class=''><code><span class='LineNumber'>4413</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>4414</span>  * @return array List of pages matching defaults or $args.
</code></pre><pre class=''><code><span class='LineNumber'>4415</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4416</span> function get_pages( $args = array() ) {
</code></pre><pre class=''><code><span class='LineNumber'>4417</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4418</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4419</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>4420</span> 		'child_of' =&gt; 0, 'sort_order' =&gt; 'ASC',
</code></pre><pre class=''><code><span class='LineNumber'>4421</span> 		'sort_column' =&gt; 'post_title', 'hierarchical' =&gt; 1,
</code></pre><pre class=''><code><span class='LineNumber'>4422</span> 		'exclude' =&gt; array(), 'include' =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>4423</span> 		'meta_key' =&gt; '', 'meta_value' =&gt; '',
</code></pre><pre class=''><code><span class='LineNumber'>4424</span> 		'authors' =&gt; '', 'parent' =&gt; -1, 'exclude_tree' =&gt; array(),
</code></pre><pre class=''><code><span class='LineNumber'>4425</span> 		'number' =&gt; '', 'offset' =&gt; 0,
</code></pre><pre class=''><code><span class='LineNumber'>4426</span> 		'post_type' =&gt; 'page', 'post_status' =&gt; 'publish',
</code></pre><pre class=''><code><span class='LineNumber'>4427</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>4428</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4429</span> 	$r = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>4430</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4431</span> 	$number = (int) $r['number'];
</code></pre><pre class=''><code><span class='LineNumber'>4432</span> 	$offset = (int) $r['offset'];
</code></pre><pre class=''><code><span class='LineNumber'>4433</span> 	$child_of = (int) $r['child_of'];
</code></pre><pre class=''><code><span class='LineNumber'>4434</span> 	$hierarchical = $r['hierarchical'];
</code></pre><pre class=''><code><span class='LineNumber'>4435</span> 	$exclude = $r['exclude'];
</code></pre><pre class=''><code><span class='LineNumber'>4436</span> 	$meta_key = $r['meta_key'];
</code></pre><pre class=''><code><span class='LineNumber'>4437</span> 	$meta_value = $r['meta_value'];
</code></pre><pre class=''><code><span class='LineNumber'>4438</span> 	$parent = $r['parent'];
</code></pre><pre class=''><code><span class='LineNumber'>4439</span> 	$post_status = $r['post_status'];
</code></pre><pre class=''><code><span class='LineNumber'>4440</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4441</span> 	// Make sure the post type is hierarchical.
</code></pre><pre class=''><code><span class='LineNumber'>4442</span> 	$hierarchical_post_types = get_post_types( array( 'hierarchical' =&gt; true ) );
</code></pre><pre class=''><code><span class='LineNumber'>4443</span> 	if ( ! in_array( $r['post_type'], $hierarchical_post_types ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4444</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4445</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4446</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4447</span> 	if ( $parent &gt; 0 &amp;&amp; ! $child_of ) {
</code></pre><pre class=''><code><span class='LineNumber'>4448</span> 		$hierarchical = false;
</code></pre><pre class=''><code><span class='LineNumber'>4449</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4450</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4451</span> 	// Make sure we have a valid post status.
</code></pre><pre class=''><code><span class='LineNumber'>4452</span> 	if ( ! is_array( $post_status ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4453</span> 		$post_status = explode( ',', $post_status );
</code></pre><pre class=''><code><span class='LineNumber'>4454</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4455</span> 	if ( array_diff( $post_status, get_post_stati() ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4456</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4457</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4458</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4459</span> 	// $args can be whatever, only use the args defined in defaults to compute the key.
</code></pre><pre class=''><code><span class='LineNumber'>4460</span> 	$key = md5( serialize( wp_array_slice_assoc( $r, array_keys( $defaults ) ) ) );
</code></pre><pre class=''><code><span class='LineNumber'>4461</span> 	$last_changed = wp_cache_get( 'last_changed', 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>4462</span> 	if ( ! $last_changed ) {
</code></pre><pre class=''><code><span class='LineNumber'>4463</span> 		$last_changed = microtime();
</code></pre><pre class=''><code><span class='LineNumber'>4464</span> 		wp_cache_set( 'last_changed', $last_changed, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>4465</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4466</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4467</span> 	$cache_key = &quot;get_pages:$key:$last_changed&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4468</span> 	if ( $cache = wp_cache_get( $cache_key, 'posts' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4469</span> 		// Convert to WP_Post instances.
</code></pre><pre class=''><code><span class='LineNumber'>4470</span> 		$pages = array_map( 'get_post', $cache );
</code></pre><pre class=''><code><span class='LineNumber'>4471</span> 		/** This filter is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>4472</span> 		$pages = apply_filters( 'get_pages', $pages, $r );
</code></pre><pre class=''><code><span class='LineNumber'>4473</span> 		return $pages;
</code></pre><pre class=''><code><span class='LineNumber'>4474</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4475</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4476</span> 	$inclusions = '';
</code></pre><pre class=''><code><span class='LineNumber'>4477</span> 	if ( ! empty( $r['include'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4478</span> 		$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include
</code></pre><pre class=''><code><span class='LineNumber'>4479</span> 		$parent = -1;
</code></pre><pre class=''><code><span class='LineNumber'>4480</span> 		$exclude = '';
</code></pre><pre class=''><code><span class='LineNumber'>4481</span> 		$meta_key = '';
</code></pre><pre class=''><code><span class='LineNumber'>4482</span> 		$meta_value = '';
</code></pre><pre class=''><code><span class='LineNumber'>4483</span> 		$hierarchical = false;
</code></pre><pre class=''><code><span class='LineNumber'>4484</span> 		$incpages = wp_parse_id_list( $r['include'] );
</code></pre><pre class=''><code><span class='LineNumber'>4485</span> 		if ( ! empty( $incpages ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4486</span> 			$inclusions = ' AND ID IN (' . implode( ',', $incpages ) .  ')';
</code></pre><pre class=''><code><span class='LineNumber'>4487</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4488</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4489</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4490</span> 	$exclusions = '';
</code></pre><pre class=''><code><span class='LineNumber'>4491</span> 	if ( ! empty( $exclude ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4492</span> 		$expages = wp_parse_id_list( $exclude );
</code></pre><pre class=''><code><span class='LineNumber'>4493</span> 		if ( ! empty( $expages ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4494</span> 			$exclusions = ' AND ID NOT IN (' . implode( ',', $expages ) .  ')';
</code></pre><pre class=''><code><span class='LineNumber'>4495</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4496</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4497</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4498</span> 	$author_query = '';
</code></pre><pre class=''><code><span class='LineNumber'>4499</span> 	if ( ! empty( $r['authors'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4500</span> 		$post_authors = preg_split( '/[\s,]+/', $r['authors'] );
</code></pre><pre class=''><code><span class='LineNumber'>4501</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4502</span> 		if ( ! empty( $post_authors ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4503</span> 			foreach ( $post_authors as $post_author ) {
</code></pre><pre class=''><code><span class='LineNumber'>4504</span> 				//Do we have an author id or an author login?
</code></pre><pre class=''><code><span class='LineNumber'>4505</span> 				if ( 0 == intval($post_author) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4506</span> 					$post_author = get_user_by('login', $post_author);
</code></pre><pre class=''><code><span class='LineNumber'>4507</span> 					if ( empty( $post_author ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4508</span> 						continue;
</code></pre><pre class=''><code><span class='LineNumber'>4509</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>4510</span> 					if ( empty( $post_author-&gt;ID ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4511</span> 						continue;
</code></pre><pre class=''><code><span class='LineNumber'>4512</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>4513</span> 					$post_author = $post_author-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>4514</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>4515</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4516</span> 				if ( '' == $author_query ) {
</code></pre><pre class=''><code><span class='LineNumber'>4517</span> 					$author_query = $wpdb-&gt;prepare(' post_author = %d ', $post_author);
</code></pre><pre class=''><code><span class='LineNumber'>4518</span> 				} else {
</code></pre><pre class=''><code><span class='LineNumber'>4519</span> 					$author_query .= $wpdb-&gt;prepare(' OR post_author = %d ', $post_author);
</code></pre><pre class=''><code><span class='LineNumber'>4520</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>4521</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4522</span> 			if ( '' != $author_query ) {
</code></pre><pre class=''><code><span class='LineNumber'>4523</span> 				$author_query = &quot; AND ($author_query)&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4524</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4525</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4526</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4527</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4528</span> 	$join = '';
</code></pre><pre class=''><code><span class='LineNumber'>4529</span> 	$where = &quot;$exclusions $inclusions &quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4530</span> 	if ( '' !== $meta_key || '' !== $meta_value ) {
</code></pre><pre class=''><code><span class='LineNumber'>4531</span> 		$join = &quot; LEFT JOIN $wpdb-&gt;postmeta ON ( $wpdb-&gt;posts.ID = $wpdb-&gt;postmeta.post_id )&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4532</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4533</span> 		// meta_key and meta_value might be slashed
</code></pre><pre class=''><code><span class='LineNumber'>4534</span> 		$meta_key = wp_unslash($meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>4535</span> 		$meta_value = wp_unslash($meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>4536</span> 		if ( '' !== $meta_key ) {
</code></pre><pre class=''><code><span class='LineNumber'>4537</span> 			$where .= $wpdb-&gt;prepare(&quot; AND $wpdb-&gt;postmeta.meta_key = %s&quot;, $meta_key);
</code></pre><pre class=''><code><span class='LineNumber'>4538</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4539</span> 		if ( '' !== $meta_value ) {
</code></pre><pre class=''><code><span class='LineNumber'>4540</span> 			$where .= $wpdb-&gt;prepare(&quot; AND $wpdb-&gt;postmeta.meta_value = %s&quot;, $meta_value);
</code></pre><pre class=''><code><span class='LineNumber'>4541</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4542</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4543</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4544</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4545</span> 	if ( is_array( $parent ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4546</span> 		$post_parent__in = implode( ',', array_map( 'absint', (array) $parent ) );
</code></pre><pre class=''><code><span class='LineNumber'>4547</span> 		if ( ! empty( $post_parent__in ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4548</span> 			$where .= &quot; AND post_parent IN ($post_parent__in)&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4549</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4550</span> 	} elseif ( $parent &gt;= 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4551</span> 		$where .= $wpdb-&gt;prepare(' AND post_parent = %d ', $parent);
</code></pre><pre class=''><code><span class='LineNumber'>4552</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4553</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4554</span> 	if ( 1 == count( $post_status ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4555</span> 		$where_post_type = $wpdb-&gt;prepare( &quot;post_type = %s AND post_status = %s&quot;, $r['post_type'], array_shift( $post_status ) );
</code></pre><pre class=''><code><span class='LineNumber'>4556</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>4557</span> 		$post_status = implode( &quot;', '&quot;, $post_status );
</code></pre><pre class=''><code><span class='LineNumber'>4558</span> 		$where_post_type = $wpdb-&gt;prepare( &quot;post_type = %s AND post_status IN ('$post_status')&quot;, $r['post_type'] );
</code></pre><pre class=''><code><span class='LineNumber'>4559</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4560</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4561</span> 	$orderby_array = array();
</code></pre><pre class=''><code><span class='LineNumber'>4562</span> 	$allowed_keys = array( 'author', 'post_author', 'date', 'post_date', 'title', 'post_title', 'name', 'post_name', 'modified',
</code></pre><pre class=''><code><span class='LineNumber'>4563</span> 		'post_modified', 'modified_gmt', 'post_modified_gmt', 'menu_order', 'parent', 'post_parent',
</code></pre><pre class=''><code><span class='LineNumber'>4564</span> 		'ID', 'rand', 'comment_count' );
</code></pre><pre class=''><code><span class='LineNumber'>4565</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4566</span> 	foreach ( explode( ',', $r['sort_column'] ) as $orderby ) {
</code></pre><pre class=''><code><span class='LineNumber'>4567</span> 		$orderby = trim( $orderby );
</code></pre><pre class=''><code><span class='LineNumber'>4568</span> 		if ( ! in_array( $orderby, $allowed_keys ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4569</span> 			continue;
</code></pre><pre class=''><code><span class='LineNumber'>4570</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4571</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4572</span> 		switch ( $orderby ) {
</code></pre><pre class=''><code><span class='LineNumber'>4573</span> 			case 'menu_order':
</code></pre><pre class=''><code><span class='LineNumber'>4574</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>4575</span> 			case 'ID':
</code></pre><pre class=''><code><span class='LineNumber'>4576</span> 				$orderby = &quot;$wpdb-&gt;posts.ID&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4577</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>4578</span> 			case 'rand':
</code></pre><pre class=''><code><span class='LineNumber'>4579</span> 				$orderby = 'RAND()';
</code></pre><pre class=''><code><span class='LineNumber'>4580</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>4581</span> 			case 'comment_count':
</code></pre><pre class=''><code><span class='LineNumber'>4582</span> 				$orderby = &quot;$wpdb-&gt;posts.comment_count&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4583</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>4584</span> 			default:
</code></pre><pre class=''><code><span class='LineNumber'>4585</span> 				if ( 0 === strpos( $orderby, 'post_' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4586</span> 					$orderby = &quot;$wpdb-&gt;posts.&quot; . $orderby;
</code></pre><pre class=''><code><span class='LineNumber'>4587</span> 				} else {
</code></pre><pre class=''><code><span class='LineNumber'>4588</span> 					$orderby = &quot;$wpdb-&gt;posts.post_&quot; . $orderby;
</code></pre><pre class=''><code><span class='LineNumber'>4589</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>4590</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4591</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4592</span> 		$orderby_array[] = $orderby;
</code></pre><pre class=''><code><span class='LineNumber'>4593</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4594</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4595</span> 	$sort_column = ! empty( $orderby_array ) ? implode( ',', $orderby_array ) : &quot;$wpdb-&gt;posts.post_title&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4596</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4597</span> 	$sort_order = strtoupper( $r['sort_order'] );
</code></pre><pre class=''><code><span class='LineNumber'>4598</span> 	if ( '' !== $sort_order &amp;&amp; ! in_array( $sort_order, array( 'ASC', 'DESC' ) ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4599</span> 		$sort_order = 'ASC';
</code></pre><pre class=''><code><span class='LineNumber'>4600</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4601</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4602</span> 	$query = &quot;SELECT * FROM $wpdb-&gt;posts $join WHERE ($where_post_type) $where &quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4603</span> 	$query .= $author_query;
</code></pre><pre class=''><code><span class='LineNumber'>4604</span> 	$query .= &quot; ORDER BY &quot; . $sort_column . &quot; &quot; . $sort_order ;
</code></pre><pre class=''><code><span class='LineNumber'>4605</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4606</span> 	if ( ! empty( $number ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4607</span> 		$query .= ' LIMIT ' . $offset . ',' . $number;
</code></pre><pre class=''><code><span class='LineNumber'>4608</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4609</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4610</span> 	$pages = $wpdb-&gt;get_results($query);
</code></pre><pre class=''><code><span class='LineNumber'>4611</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4612</span> 	if ( empty($pages) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4613</span> 		/** This filter is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>4614</span> 		$pages = apply_filters( 'get_pages', array(), $r );
</code></pre><pre class=''><code><span class='LineNumber'>4615</span> 		return $pages;
</code></pre><pre class=''><code><span class='LineNumber'>4616</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4617</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4618</span> 	// Sanitize before caching so it'll only get done once.
</code></pre><pre class=''><code><span class='LineNumber'>4619</span> 	$num_pages = count($pages);
</code></pre><pre class=''><code><span class='LineNumber'>4620</span> 	for ($i = 0; $i &lt; $num_pages; $i++) {
</code></pre><pre class=''><code><span class='LineNumber'>4621</span> 		$pages[$i] = sanitize_post($pages[$i], 'raw');
</code></pre><pre class=''><code><span class='LineNumber'>4622</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4623</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4624</span> 	// Update cache.
</code></pre><pre class=''><code><span class='LineNumber'>4625</span> 	update_post_cache( $pages );
</code></pre><pre class=''><code><span class='LineNumber'>4626</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4627</span> 	if ( $child_of || $hierarchical ) {
</code></pre><pre class=''><code><span class='LineNumber'>4628</span> 		$pages = get_page_children($child_of, $pages);
</code></pre><pre class=''><code><span class='LineNumber'>4629</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4630</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4631</span> 	if ( ! empty( $r['exclude_tree'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4632</span> 		$exclude = wp_parse_id_list( $r['exclude_tree'] );
</code></pre><pre class=''><code><span class='LineNumber'>4633</span> 		foreach( $exclude as $id ) {
</code></pre><pre class=''><code><span class='LineNumber'>4634</span> 			$children = get_page_children( $id, $pages );
</code></pre><pre class=''><code><span class='LineNumber'>4635</span> 			foreach ( $children as $child ) {
</code></pre><pre class=''><code><span class='LineNumber'>4636</span> 				$exclude[] = $child-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>4637</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4638</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4639</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4640</span> 		$num_pages = count( $pages );
</code></pre><pre class=''><code><span class='LineNumber'>4641</span> 		for ( $i = 0; $i &lt; $num_pages; $i++ ) {
</code></pre><pre class=''><code><span class='LineNumber'>4642</span> 			if ( in_array( $pages[$i]-&gt;ID, $exclude ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4643</span> 				unset( $pages[$i] );
</code></pre><pre class=''><code><span class='LineNumber'>4644</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4645</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4646</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4647</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4648</span> 	$page_structure = array();
</code></pre><pre class=''><code><span class='LineNumber'>4649</span> 	foreach ( $pages as $page ) {
</code></pre><pre class=''><code><span class='LineNumber'>4650</span> 		$page_structure[] = $page-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>4651</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4652</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4653</span> 	wp_cache_set( $cache_key, $page_structure, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>4654</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4655</span> 	// Convert to WP_Post instances.
</code></pre><pre class=''><code><span class='LineNumber'>4656</span> 	$pages = array_map( 'get_post', $pages );
</code></pre><pre class=''><code><span class='LineNumber'>4657</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4658</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4659</span> 	 * Filter the retrieved list of pages.
</code></pre><pre class=''><code><span class='LineNumber'>4660</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4661</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4662</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4663</span> 	 * @param array $pages List of pages to retrieve.
</code></pre><pre class=''><code><span class='LineNumber'>4664</span> 	 * @param array $r     Array of get_pages() arguments.
</code></pre><pre class=''><code><span class='LineNumber'>4665</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4666</span> 	$pages = apply_filters( 'get_pages', $pages, $r );
</code></pre><pre class=''><code><span class='LineNumber'>4667</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4668</span> 	return $pages;
</code></pre><pre class=''><code><span class='LineNumber'>4669</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4670</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4671</span> //
</code></pre><pre class=''><code><span class='LineNumber'>4672</span> // Attachment functions
</code></pre><pre class=''><code><span class='LineNumber'>4673</span> //
</code></pre><pre class=''><code><span class='LineNumber'>4674</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4675</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4676</span>  * Check if the attachment URI is local one and is really an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4677</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4678</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4679</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4680</span>  * @param string $url URL to check
</code></pre><pre class=''><code><span class='LineNumber'>4681</span>  * @return bool True on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>4682</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4683</span> function is_local_attachment($url) {
</code></pre><pre class=''><code><span class='LineNumber'>4684</span> 	if (strpos($url, home_url()) === false)
</code></pre><pre class=''><code><span class='LineNumber'>4685</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4686</span> 	if (strpos($url, home_url('/?attachment_id=')) !== false)
</code></pre><pre class=''><code><span class='LineNumber'>4687</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>4688</span> 	if ( $id = url_to_postid($url) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4689</span> 		$post = get_post($id);
</code></pre><pre class=''><code><span class='LineNumber'>4690</span> 		if ( 'attachment' == $post-&gt;post_type )
</code></pre><pre class=''><code><span class='LineNumber'>4691</span> 			return true;
</code></pre><pre class=''><code><span class='LineNumber'>4692</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4693</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>4694</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4695</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4696</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4697</span>  * Insert an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4698</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4699</span>  * If you set the 'ID' in the $args parameter, it will mean that you are
</code></pre><pre class=''><code><span class='LineNumber'>4700</span>  * updating and attempt to update the attachment. You can also set the
</code></pre><pre class=''><code><span class='LineNumber'>4701</span>  * attachment name or title by setting the key 'post_name' or 'post_title'.
</code></pre><pre class=''><code><span class='LineNumber'>4702</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4703</span>  * You can set the dates for the attachment manually by setting the 'post_date'
</code></pre><pre class=''><code><span class='LineNumber'>4704</span>  * and 'post_date_gmt' keys' values.
</code></pre><pre class=''><code><span class='LineNumber'>4705</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4706</span>  * By default, the comments will use the default settings for whether the
</code></pre><pre class=''><code><span class='LineNumber'>4707</span>  * comments are allowed. You can close them manually or keep them open by
</code></pre><pre class=''><code><span class='LineNumber'>4708</span>  * setting the value for the 'comment_status' key.
</code></pre><pre class=''><code><span class='LineNumber'>4709</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4710</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4711</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4712</span>  * @see wp_insert_post()
</code></pre><pre class=''><code><span class='LineNumber'>4713</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4714</span>  * @param string|array $args   Arguments for inserting an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4715</span>  * @param string       $file   Optional. Filename.
</code></pre><pre class=''><code><span class='LineNumber'>4716</span>  * @param int          $parent Optional. Parent post ID.
</code></pre><pre class=''><code><span class='LineNumber'>4717</span>  * @return int Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4718</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4719</span> function wp_insert_attachment( $args, $file = false, $parent = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4720</span> 	$defaults = array(
</code></pre><pre class=''><code><span class='LineNumber'>4721</span> 		'file'        =&gt; $file,
</code></pre><pre class=''><code><span class='LineNumber'>4722</span> 		'post_parent' =&gt; 0
</code></pre><pre class=''><code><span class='LineNumber'>4723</span> 	);
</code></pre><pre class=''><code><span class='LineNumber'>4724</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4725</span> 	$data = wp_parse_args( $args, $defaults );
</code></pre><pre class=''><code><span class='LineNumber'>4726</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4727</span> 	if ( ! empty( $parent ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4728</span> 		$data['post_parent'] = $parent;
</code></pre><pre class=''><code><span class='LineNumber'>4729</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4730</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4731</span> 	$data['post_type'] = 'attachment';
</code></pre><pre class=''><code><span class='LineNumber'>4732</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4733</span> 	return wp_insert_post( $data );
</code></pre><pre class=''><code><span class='LineNumber'>4734</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4735</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4736</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4737</span>  * Trash or delete an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4738</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4739</span>  * When an attachment is permanently deleted, the file will also be removed.
</code></pre><pre class=''><code><span class='LineNumber'>4740</span>  * Deletion removes all post meta fields, taxonomy, comments, etc. associated
</code></pre><pre class=''><code><span class='LineNumber'>4741</span>  * with the attachment (except the main post).
</code></pre><pre class=''><code><span class='LineNumber'>4742</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4743</span>  * The attachment is moved to the trash instead of permanently deleted unless trash
</code></pre><pre class=''><code><span class='LineNumber'>4744</span>  * for media is disabled, item is already in the trash, or $force_delete is true.
</code></pre><pre class=''><code><span class='LineNumber'>4745</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4746</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4747</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4748</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>4749</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4750</span>  * @param int  $post_id      Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4751</span>  * @param bool $force_delete Optional. Whether to bypass trash and force deletion.
</code></pre><pre class=''><code><span class='LineNumber'>4752</span>  *                           Default false.
</code></pre><pre class=''><code><span class='LineNumber'>4753</span>  * @return mixed False on failure. Post data on success.
</code></pre><pre class=''><code><span class='LineNumber'>4754</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4755</span> function wp_delete_attachment( $post_id, $force_delete = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>4756</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>4757</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4758</span> 	if ( !$post = $wpdb-&gt;get_row( $wpdb-&gt;prepare(&quot;SELECT * FROM $wpdb-&gt;posts WHERE ID = %d&quot;, $post_id) ) )
</code></pre><pre class=''><code><span class='LineNumber'>4759</span> 		return $post;
</code></pre><pre class=''><code><span class='LineNumber'>4760</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4761</span> 	if ( 'attachment' != $post-&gt;post_type )
</code></pre><pre class=''><code><span class='LineNumber'>4762</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4763</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4764</span> 	if ( !$force_delete &amp;&amp; EMPTY_TRASH_DAYS &amp;&amp; MEDIA_TRASH &amp;&amp; 'trash' != $post-&gt;post_status )
</code></pre><pre class=''><code><span class='LineNumber'>4765</span> 		return wp_trash_post( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4766</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4767</span> 	delete_post_meta($post_id, '_wp_trash_meta_status');
</code></pre><pre class=''><code><span class='LineNumber'>4768</span> 	delete_post_meta($post_id, '_wp_trash_meta_time');
</code></pre><pre class=''><code><span class='LineNumber'>4769</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4770</span> 	$meta = wp_get_attachment_metadata( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4771</span> 	$backup_sizes = get_post_meta( $post-&gt;ID, '_wp_attachment_backup_sizes', true );
</code></pre><pre class=''><code><span class='LineNumber'>4772</span> 	$file = get_attached_file( $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4773</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4774</span> 	$intermediate_sizes = array();
</code></pre><pre class=''><code><span class='LineNumber'>4775</span> 	foreach ( get_intermediate_image_sizes() as $size ) {
</code></pre><pre class=''><code><span class='LineNumber'>4776</span> 		if ( $intermediate = image_get_intermediate_size( $post_id, $size ) )
</code></pre><pre class=''><code><span class='LineNumber'>4777</span> 			$intermediate_sizes[] = $intermediate;
</code></pre><pre class=''><code><span class='LineNumber'>4778</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4779</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4780</span> 	if ( is_multisite() )
</code></pre><pre class=''><code><span class='LineNumber'>4781</span> 		delete_transient( 'dirsize_cache' );
</code></pre><pre class=''><code><span class='LineNumber'>4782</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4783</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4784</span> 	 * Fires before an attachment is deleted, at the start of wp_delete_attachment().
</code></pre><pre class=''><code><span class='LineNumber'>4785</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4786</span> 	 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>4787</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4788</span> 	 * @param int $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4789</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4790</span> 	do_action( 'delete_attachment', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4791</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4792</span> 	wp_delete_object_term_relationships($post_id, array('category', 'post_tag'));
</code></pre><pre class=''><code><span class='LineNumber'>4793</span> 	wp_delete_object_term_relationships($post_id, get_object_taxonomies($post-&gt;post_type));
</code></pre><pre class=''><code><span class='LineNumber'>4794</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4795</span> 	// Delete all for any posts.
</code></pre><pre class=''><code><span class='LineNumber'>4796</span> 	delete_metadata( 'post', null, '_thumbnail_id', $post_id, true );
</code></pre><pre class=''><code><span class='LineNumber'>4797</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4798</span> 	$comment_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT comment_ID FROM $wpdb-&gt;comments WHERE comment_post_ID = %d&quot;, $post_id ));
</code></pre><pre class=''><code><span class='LineNumber'>4799</span> 	foreach ( $comment_ids as $comment_id )
</code></pre><pre class=''><code><span class='LineNumber'>4800</span> 		wp_delete_comment( $comment_id, true );
</code></pre><pre class=''><code><span class='LineNumber'>4801</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4802</span> 	$post_meta_ids = $wpdb-&gt;get_col( $wpdb-&gt;prepare( &quot;SELECT meta_id FROM $wpdb-&gt;postmeta WHERE post_id = %d &quot;, $post_id ));
</code></pre><pre class=''><code><span class='LineNumber'>4803</span> 	foreach ( $post_meta_ids as $mid )
</code></pre><pre class=''><code><span class='LineNumber'>4804</span> 		delete_metadata_by_mid( 'post', $mid );
</code></pre><pre class=''><code><span class='LineNumber'>4805</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4806</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>4807</span> 	do_action( 'delete_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4808</span> 	$result = $wpdb-&gt;delete( $wpdb-&gt;posts, array( 'ID' =&gt; $post_id ) );
</code></pre><pre class=''><code><span class='LineNumber'>4809</span> 	if ( ! $result ) {
</code></pre><pre class=''><code><span class='LineNumber'>4810</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4811</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4812</span> 	/** This action is documented in wp-includes/post.php */
</code></pre><pre class=''><code><span class='LineNumber'>4813</span> 	do_action( 'deleted_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>4814</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4815</span> 	$uploadpath = wp_upload_dir();
</code></pre><pre class=''><code><span class='LineNumber'>4816</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4817</span> 	if ( ! empty($meta['thumb']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4818</span> 		// Don't delete the thumb if another attachment uses it.
</code></pre><pre class=''><code><span class='LineNumber'>4819</span> 		if (! $wpdb-&gt;get_row( $wpdb-&gt;prepare( &quot;SELECT meta_id FROM $wpdb-&gt;postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id &lt;&gt; %d&quot;, '%' . $wpdb-&gt;esc_like( $meta['thumb'] ) . '%', $post_id)) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4820</span> 			$thumbfile = str_replace(basename($file), $meta['thumb'], $file);
</code></pre><pre class=''><code><span class='LineNumber'>4821</span> 			/** This filter is documented in wp-admin/custom-header.php */
</code></pre><pre class=''><code><span class='LineNumber'>4822</span> 			$thumbfile = apply_filters( 'wp_delete_file', $thumbfile );
</code></pre><pre class=''><code><span class='LineNumber'>4823</span> 			@ unlink( path_join($uploadpath['basedir'], $thumbfile) );
</code></pre><pre class=''><code><span class='LineNumber'>4824</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4825</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4826</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4827</span> 	// Remove intermediate and backup images if there are any.
</code></pre><pre class=''><code><span class='LineNumber'>4828</span> 	foreach ( $intermediate_sizes as $intermediate ) {
</code></pre><pre class=''><code><span class='LineNumber'>4829</span> 		/** This filter is documented in wp-admin/custom-header.php */
</code></pre><pre class=''><code><span class='LineNumber'>4830</span> 		$intermediate_file = apply_filters( 'wp_delete_file', $intermediate['path'] );
</code></pre><pre class=''><code><span class='LineNumber'>4831</span> 		@ unlink( path_join($uploadpath['basedir'], $intermediate_file) );
</code></pre><pre class=''><code><span class='LineNumber'>4832</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4833</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4834</span> 	if ( is_array($backup_sizes) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4835</span> 		foreach ( $backup_sizes as $size ) {
</code></pre><pre class=''><code><span class='LineNumber'>4836</span> 			$del_file = path_join( dirname($meta['file']), $size['file'] );
</code></pre><pre class=''><code><span class='LineNumber'>4837</span> 			/** This filter is documented in wp-admin/custom-header.php */
</code></pre><pre class=''><code><span class='LineNumber'>4838</span> 			$del_file = apply_filters( 'wp_delete_file', $del_file );
</code></pre><pre class=''><code><span class='LineNumber'>4839</span> 			@ unlink( path_join($uploadpath['basedir'], $del_file) );
</code></pre><pre class=''><code><span class='LineNumber'>4840</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4841</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4842</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4843</span> 	/** This filter is documented in wp-admin/custom-header.php */
</code></pre><pre class=''><code><span class='LineNumber'>4844</span> 	$file = apply_filters( 'wp_delete_file', $file );
</code></pre><pre class=''><code><span class='LineNumber'>4845</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4846</span> 	if ( ! empty($file) )
</code></pre><pre class=''><code><span class='LineNumber'>4847</span> 		@ unlink($file);
</code></pre><pre class=''><code><span class='LineNumber'>4848</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4849</span> 	clean_post_cache( $post );
</code></pre><pre class=''><code><span class='LineNumber'>4850</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4851</span> 	return $post;
</code></pre><pre class=''><code><span class='LineNumber'>4852</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4853</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4854</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4855</span>  * Retrieve attachment meta field for attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4856</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4857</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4858</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4859</span>  * @param int  $post_id    Attachment ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>4860</span>  * @param bool $unfiltered Optional. If true, filters are not run. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>4861</span>  * @return string|bool Attachment meta field. False on failure.
</code></pre><pre class=''><code><span class='LineNumber'>4862</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4863</span> function wp_get_attachment_metadata( $post_id = 0, $unfiltered = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>4864</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>4865</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>4866</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4867</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4868</span> 	$data = get_post_meta( $post-&gt;ID, '_wp_attachment_metadata', true );
</code></pre><pre class=''><code><span class='LineNumber'>4869</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4870</span> 	if ( $unfiltered )
</code></pre><pre class=''><code><span class='LineNumber'>4871</span> 		return $data;
</code></pre><pre class=''><code><span class='LineNumber'>4872</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4873</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4874</span> 	 * Filter the attachment meta data.
</code></pre><pre class=''><code><span class='LineNumber'>4875</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4876</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4877</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4878</span> 	 * @param array|bool $data    Array of meta data for the given attachment, or false
</code></pre><pre class=''><code><span class='LineNumber'>4879</span> 	 *                            if the object does not exist.
</code></pre><pre class=''><code><span class='LineNumber'>4880</span> 	 * @param int        $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4881</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4882</span> 	return apply_filters( 'wp_get_attachment_metadata', $data, $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>4883</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4884</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4885</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4886</span>  * Update metadata for an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4887</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4888</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4889</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4890</span>  * @param int   $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4891</span>  * @param array $data    Attachment data.
</code></pre><pre class=''><code><span class='LineNumber'>4892</span>  * @return int|bool False if $post is invalid.
</code></pre><pre class=''><code><span class='LineNumber'>4893</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4894</span> function wp_update_attachment_metadata( $post_id, $data ) {
</code></pre><pre class=''><code><span class='LineNumber'>4895</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>4896</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>4897</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4898</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4899</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4900</span> 	 * Filter the updated attachment meta data.
</code></pre><pre class=''><code><span class='LineNumber'>4901</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4902</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4903</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4904</span> 	 * @param array $data    Array of updated attachment meta data.
</code></pre><pre class=''><code><span class='LineNumber'>4905</span> 	 * @param int   $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4906</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4907</span> 	if ( $data = apply_filters( 'wp_update_attachment_metadata', $data, $post-&gt;ID ) )
</code></pre><pre class=''><code><span class='LineNumber'>4908</span> 		return update_post_meta( $post-&gt;ID, '_wp_attachment_metadata', $data );
</code></pre><pre class=''><code><span class='LineNumber'>4909</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>4910</span> 		return delete_post_meta( $post-&gt;ID, '_wp_attachment_metadata' );
</code></pre><pre class=''><code><span class='LineNumber'>4911</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4912</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4913</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4914</span>  * Retrieve the URL for an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4915</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4916</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4917</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4918</span>  * @param int $post_id Optional. Attachment ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>4919</span>  * @return string|bool Attachment URL, otherwise false.
</code></pre><pre class=''><code><span class='LineNumber'>4920</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4921</span> function wp_get_attachment_url( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4922</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>4923</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>4924</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4925</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4926</span> 	if ( 'attachment' != $post-&gt;post_type )
</code></pre><pre class=''><code><span class='LineNumber'>4927</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4928</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4929</span> 	$url = '';
</code></pre><pre class=''><code><span class='LineNumber'>4930</span> 	// Get attached file.
</code></pre><pre class=''><code><span class='LineNumber'>4931</span> 	if ( $file = get_post_meta( $post-&gt;ID, '_wp_attached_file', true) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4932</span> 		// Get upload directory.
</code></pre><pre class=''><code><span class='LineNumber'>4933</span> 		if ( ($uploads = wp_upload_dir()) &amp;&amp; false === $uploads['error'] ) {
</code></pre><pre class=''><code><span class='LineNumber'>4934</span> 			// Check that the upload base exists in the file location.
</code></pre><pre class=''><code><span class='LineNumber'>4935</span> 			if ( 0 === strpos( $file, $uploads['basedir'] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4936</span> 				// Replace file location with url location.
</code></pre><pre class=''><code><span class='LineNumber'>4937</span> 				$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file);
</code></pre><pre class=''><code><span class='LineNumber'>4938</span> 			} elseif ( false !== strpos($file, 'wp-content/uploads') ) {
</code></pre><pre class=''><code><span class='LineNumber'>4939</span> 				$url = $uploads['baseurl'] . substr( $file, strpos($file, 'wp-content/uploads') + 18 );
</code></pre><pre class=''><code><span class='LineNumber'>4940</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>4941</span> 				// It's a newly-uploaded file, therefore $file is relative to the basedir.
</code></pre><pre class=''><code><span class='LineNumber'>4942</span> 				$url = $uploads['baseurl'] . &quot;/$file&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>4943</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>4944</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>4945</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4946</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4947</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>4948</span> 	 * If any of the above options failed, Fallback on the GUID as used pre-2.7,
</code></pre><pre class=''><code><span class='LineNumber'>4949</span> 	 * not recommended to rely upon this.
</code></pre><pre class=''><code><span class='LineNumber'>4950</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4951</span> 	if ( empty($url) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4952</span> 		$url = get_the_guid( $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>4953</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4954</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4955</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>4956</span> 	 * Filter the attachment URL.
</code></pre><pre class=''><code><span class='LineNumber'>4957</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4958</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4959</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>4960</span> 	 * @param string $url     URL for the given attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4961</span> 	 * @param int    $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4962</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>4963</span> 	$url = apply_filters( 'wp_get_attachment_url', $url, $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>4964</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4965</span> 	if ( empty( $url ) )
</code></pre><pre class=''><code><span class='LineNumber'>4966</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4967</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4968</span> 	return $url;
</code></pre><pre class=''><code><span class='LineNumber'>4969</span> }
</code></pre><pre class=''><code><span class='LineNumber'>4970</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4971</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>4972</span>  * Retrieve thumbnail for an attachment.
</code></pre><pre class=''><code><span class='LineNumber'>4973</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4974</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4975</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>4976</span>  * @param int $post_id Optional. Attachment ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>4977</span>  * @return mixed False on failure. Thumbnail file path on success.
</code></pre><pre class=''><code><span class='LineNumber'>4978</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>4979</span> function wp_get_attachment_thumb_file( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>4980</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>4981</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>4982</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4983</span> 	if ( !is_array( $imagedata = wp_get_attachment_metadata( $post-&gt;ID ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>4984</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>4985</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4986</span> 	$file = get_attached_file( $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>4987</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4988</span> 	if ( !empty($imagedata['thumb']) &amp;&amp; ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) &amp;&amp; file_exists($thumbfile) ) {
</code></pre><pre class=''><code><span class='LineNumber'>4989</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>4990</span> 		 * Filter the attachment thumbnail file path.
</code></pre><pre class=''><code><span class='LineNumber'>4991</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>4992</span> 		 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>4993</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>4994</span> 		 * @param string $thumbfile File path to the attachment thumbnail.
</code></pre><pre class=''><code><span class='LineNumber'>4995</span> 		 * @param int    $post_id   Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>4996</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>4997</span> 		return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>4998</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>4999</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>5000</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5001</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5002</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5003</span>  * Retrieve URL for an attachment thumbnail.
</code></pre><pre class=''><code><span class='LineNumber'>5004</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5005</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5006</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5007</span>  * @param int $post_id Optional. Attachment ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>5008</span>  * @return string|bool False on failure. Thumbnail URL on success.
</code></pre><pre class=''><code><span class='LineNumber'>5009</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5010</span> function wp_get_attachment_thumb_url( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>5011</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>5012</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>5013</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5014</span> 	if ( !$url = wp_get_attachment_url( $post-&gt;ID ) )
</code></pre><pre class=''><code><span class='LineNumber'>5015</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5016</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5017</span> 	$sized = image_downsize( $post_id, 'thumbnail' );
</code></pre><pre class=''><code><span class='LineNumber'>5018</span> 	if ( $sized )
</code></pre><pre class=''><code><span class='LineNumber'>5019</span> 		return $sized[0];
</code></pre><pre class=''><code><span class='LineNumber'>5020</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5021</span> 	if ( !$thumb = wp_get_attachment_thumb_file( $post-&gt;ID ) )
</code></pre><pre class=''><code><span class='LineNumber'>5022</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5023</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5024</span> 	$url = str_replace(basename($url), basename($thumb), $url);
</code></pre><pre class=''><code><span class='LineNumber'>5025</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5026</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5027</span> 	 * Filter the attachment thumbnail URL.
</code></pre><pre class=''><code><span class='LineNumber'>5028</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5029</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5030</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5031</span> 	 * @param string $url     URL for the attachment thumbnail.
</code></pre><pre class=''><code><span class='LineNumber'>5032</span> 	 * @param int    $post_id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>5033</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5034</span> 	return apply_filters( 'wp_get_attachment_thumb_url', $url, $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>5035</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5036</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5037</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5038</span>  * Check if the attachment is an image.
</code></pre><pre class=''><code><span class='LineNumber'>5039</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5040</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5041</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5042</span>  * @param int $post_id Optional. Attachment ID. Default 0.
</code></pre><pre class=''><code><span class='LineNumber'>5043</span>  * @return bool Whether the attachment is an image.
</code></pre><pre class=''><code><span class='LineNumber'>5044</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5045</span> function wp_attachment_is_image( $post_id = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>5046</span> 	$post_id = (int) $post_id;
</code></pre><pre class=''><code><span class='LineNumber'>5047</span> 	if ( !$post = get_post( $post_id ) )
</code></pre><pre class=''><code><span class='LineNumber'>5048</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5049</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5050</span> 	if ( !$file = get_attached_file( $post-&gt;ID ) )
</code></pre><pre class=''><code><span class='LineNumber'>5051</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5052</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5053</span> 	$ext = preg_match('/\.([^.]+)$/', $file, $matches) ? strtolower($matches[1]) : false;
</code></pre><pre class=''><code><span class='LineNumber'>5054</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5055</span> 	$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );
</code></pre><pre class=''><code><span class='LineNumber'>5056</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5057</span> 	if ( 'image/' == substr($post-&gt;post_mime_type, 0, 6) || $ext &amp;&amp; 'import' == $post-&gt;post_mime_type &amp;&amp; in_array($ext, $image_exts) )
</code></pre><pre class=''><code><span class='LineNumber'>5058</span> 		return true;
</code></pre><pre class=''><code><span class='LineNumber'>5059</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>5060</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5061</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5062</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5063</span>  * Retrieve the icon for a MIME type.
</code></pre><pre class=''><code><span class='LineNumber'>5064</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5065</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5066</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5067</span>  * @param string|int $mime MIME type or attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>5068</span>  * @return string|bool Icon, false otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>5069</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5070</span> function wp_mime_type_icon( $mime = 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>5071</span> 	if ( !is_numeric($mime) )
</code></pre><pre class=''><code><span class='LineNumber'>5072</span> 		$icon = wp_cache_get(&quot;mime_type_icon_$mime&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>5073</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5074</span> 	$post_id = 0;
</code></pre><pre class=''><code><span class='LineNumber'>5075</span> 	if ( empty($icon) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5076</span> 		$post_mimes = array();
</code></pre><pre class=''><code><span class='LineNumber'>5077</span> 		if ( is_numeric($mime) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5078</span> 			$mime = (int) $mime;
</code></pre><pre class=''><code><span class='LineNumber'>5079</span> 			if ( $post = get_post( $mime ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5080</span> 				$post_id = (int) $post-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>5081</span> 				$ext = preg_replace('/^.+?\.([^.]+)$/', '$1', $post-&gt;guid);
</code></pre><pre class=''><code><span class='LineNumber'>5082</span> 				if ( !empty($ext) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5083</span> 					$post_mimes[] = $ext;
</code></pre><pre class=''><code><span class='LineNumber'>5084</span> 					if ( $ext_type = wp_ext2type( $ext ) )
</code></pre><pre class=''><code><span class='LineNumber'>5085</span> 						$post_mimes[] = $ext_type;
</code></pre><pre class=''><code><span class='LineNumber'>5086</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>5087</span> 				$mime = $post-&gt;post_mime_type;
</code></pre><pre class=''><code><span class='LineNumber'>5088</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>5089</span> 				$mime = 0;
</code></pre><pre class=''><code><span class='LineNumber'>5090</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>5091</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>5092</span> 			$post_mimes[] = $mime;
</code></pre><pre class=''><code><span class='LineNumber'>5093</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5094</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5095</span> 		$icon_files = wp_cache_get('icon_files');
</code></pre><pre class=''><code><span class='LineNumber'>5096</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5097</span> 		if ( !is_array($icon_files) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5098</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>5099</span> 			 * Filter the icon directory path.
</code></pre><pre class=''><code><span class='LineNumber'>5100</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5101</span> 			 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5102</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5103</span> 			 * @param string $path Icon directory absolute path.
</code></pre><pre class=''><code><span class='LineNumber'>5104</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>5105</span> 			$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/media' );
</code></pre><pre class=''><code><span class='LineNumber'>5106</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5107</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>5108</span> 			 * Filter the icon directory URI.
</code></pre><pre class=''><code><span class='LineNumber'>5109</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5110</span> 			 * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5111</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5112</span> 			 * @param string $uri Icon directory URI.
</code></pre><pre class=''><code><span class='LineNumber'>5113</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>5114</span> 			$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url( 'images/media' ) );
</code></pre><pre class=''><code><span class='LineNumber'>5115</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5116</span> 			/**
</code></pre><pre class=''><code><span class='LineNumber'>5117</span> 			 * Filter the list of icon directory URIs.
</code></pre><pre class=''><code><span class='LineNumber'>5118</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5119</span> 			 * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>5120</span> 			 *
</code></pre><pre class=''><code><span class='LineNumber'>5121</span> 			 * @param array $uris List of icon directory URIs.
</code></pre><pre class=''><code><span class='LineNumber'>5122</span> 			 */
</code></pre><pre class=''><code><span class='LineNumber'>5123</span> 			$dirs = apply_filters( 'icon_dirs', array( $icon_dir =&gt; $icon_dir_uri ) );
</code></pre><pre class=''><code><span class='LineNumber'>5124</span> 			$icon_files = array();
</code></pre><pre class=''><code><span class='LineNumber'>5125</span> 			while ( $dirs ) {
</code></pre><pre class=''><code><span class='LineNumber'>5126</span> 				$keys = array_keys( $dirs );
</code></pre><pre class=''><code><span class='LineNumber'>5127</span> 				$dir = array_shift( $keys );
</code></pre><pre class=''><code><span class='LineNumber'>5128</span> 				$uri = array_shift($dirs);
</code></pre><pre class=''><code><span class='LineNumber'>5129</span> 				if ( $dh = opendir($dir) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5130</span> 					while ( false !== $file = readdir($dh) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5131</span> 						$file = basename($file);
</code></pre><pre class=''><code><span class='LineNumber'>5132</span> 						if ( substr($file, 0, 1) == '.' )
</code></pre><pre class=''><code><span class='LineNumber'>5133</span> 							continue;
</code></pre><pre class=''><code><span class='LineNumber'>5134</span> 						if ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5135</span> 							if ( is_dir(&quot;$dir/$file&quot;) )
</code></pre><pre class=''><code><span class='LineNumber'>5136</span> 								$dirs[&quot;$dir/$file&quot;] = &quot;$uri/$file&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5137</span> 							continue;
</code></pre><pre class=''><code><span class='LineNumber'>5138</span> 						}
</code></pre><pre class=''><code><span class='LineNumber'>5139</span> 						$icon_files[&quot;$dir/$file&quot;] = &quot;$uri/$file&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5140</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>5141</span> 					closedir($dh);
</code></pre><pre class=''><code><span class='LineNumber'>5142</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>5143</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>5144</span> 			wp_cache_add( 'icon_files', $icon_files, 'default', 600 );
</code></pre><pre class=''><code><span class='LineNumber'>5145</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5146</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5147</span> 		// Icon basename - extension = MIME wildcard.
</code></pre><pre class=''><code><span class='LineNumber'>5148</span> 		foreach ( $icon_files as $file =&gt; $uri )
</code></pre><pre class=''><code><span class='LineNumber'>5149</span> 			$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =&amp; $icon_files[$file];
</code></pre><pre class=''><code><span class='LineNumber'>5150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5151</span> 		if ( ! empty($mime) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5152</span> 			$post_mimes[] = substr($mime, 0, strpos($mime, '/'));
</code></pre><pre class=''><code><span class='LineNumber'>5153</span> 			$post_mimes[] = substr($mime, strpos($mime, '/') + 1);
</code></pre><pre class=''><code><span class='LineNumber'>5154</span> 			$post_mimes[] = str_replace('/', '_', $mime);
</code></pre><pre class=''><code><span class='LineNumber'>5155</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5156</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5157</span> 		$matches = wp_match_mime_types(array_keys($types), $post_mimes);
</code></pre><pre class=''><code><span class='LineNumber'>5158</span> 		$matches['default'] = array('default');
</code></pre><pre class=''><code><span class='LineNumber'>5159</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5160</span> 		foreach ( $matches as $match =&gt; $wilds ) {
</code></pre><pre class=''><code><span class='LineNumber'>5161</span> 			if ( isset($types[$wilds[0]])) {
</code></pre><pre class=''><code><span class='LineNumber'>5162</span> 				$icon = $types[$wilds[0]];
</code></pre><pre class=''><code><span class='LineNumber'>5163</span> 				if ( !is_numeric($mime) )
</code></pre><pre class=''><code><span class='LineNumber'>5164</span> 					wp_cache_add(&quot;mime_type_icon_$mime&quot;, $icon);
</code></pre><pre class=''><code><span class='LineNumber'>5165</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>5166</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>5167</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5168</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5169</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5170</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5171</span> 	 * Filter the mime type icon.
</code></pre><pre class=''><code><span class='LineNumber'>5172</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5173</span> 	 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5174</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5175</span> 	 * @param string $icon    Path to the mime type icon.
</code></pre><pre class=''><code><span class='LineNumber'>5176</span> 	 * @param string $mime    Mime type.
</code></pre><pre class=''><code><span class='LineNumber'>5177</span> 	 * @param int    $post_id Attachment ID. Will equal 0 if the function passed
</code></pre><pre class=''><code><span class='LineNumber'>5178</span> 	 *                        the mime type.
</code></pre><pre class=''><code><span class='LineNumber'>5179</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5180</span> 	return apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>5181</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5182</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5183</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5184</span>  * Check for changed slugs for published post objects and save the old slug.
</code></pre><pre class=''><code><span class='LineNumber'>5185</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5186</span>  * The function is used when a post object of any type is updated,
</code></pre><pre class=''><code><span class='LineNumber'>5187</span>  * by comparing the current and previous post objects.
</code></pre><pre class=''><code><span class='LineNumber'>5188</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5189</span>  * If the slug was changed and not already part of the old slugs then it will be
</code></pre><pre class=''><code><span class='LineNumber'>5190</span>  * added to the post meta field ('_wp_old_slug') for storing old slugs for that
</code></pre><pre class=''><code><span class='LineNumber'>5191</span>  * post.
</code></pre><pre class=''><code><span class='LineNumber'>5192</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5193</span>  * The most logically usage of this function is redirecting changed post objects, so
</code></pre><pre class=''><code><span class='LineNumber'>5194</span>  * that those that linked to an changed post will be redirected to the new post.
</code></pre><pre class=''><code><span class='LineNumber'>5195</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5196</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5197</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5198</span>  * @param int     $post_id     Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5199</span>  * @param WP_Post $post        The Post Object
</code></pre><pre class=''><code><span class='LineNumber'>5200</span>  * @param WP_Post $post_before The Previous Post Object
</code></pre><pre class=''><code><span class='LineNumber'>5201</span>  * @return int Same as $post_id
</code></pre><pre class=''><code><span class='LineNumber'>5202</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5203</span> function wp_check_for_changed_slugs( $post_id, $post, $post_before ) {
</code></pre><pre class=''><code><span class='LineNumber'>5204</span> 	// Don't bother if it hasnt changed.
</code></pre><pre class=''><code><span class='LineNumber'>5205</span> 	if ( $post-&gt;post_name == $post_before-&gt;post_name )
</code></pre><pre class=''><code><span class='LineNumber'>5206</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5207</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5208</span> 	// We're only concerned with published, non-hierarchical objects.
</code></pre><pre class=''><code><span class='LineNumber'>5209</span> 	if ( $post-&gt;post_status != 'publish' || is_post_type_hierarchical( $post-&gt;post_type ) )
</code></pre><pre class=''><code><span class='LineNumber'>5210</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5211</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5212</span> 	$old_slugs = (array) get_post_meta($post_id, '_wp_old_slug');
</code></pre><pre class=''><code><span class='LineNumber'>5213</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5214</span> 	// If we haven't added this old slug before, add it now.
</code></pre><pre class=''><code><span class='LineNumber'>5215</span> 	if ( !empty( $post_before-&gt;post_name ) &amp;&amp; !in_array($post_before-&gt;post_name, $old_slugs) )
</code></pre><pre class=''><code><span class='LineNumber'>5216</span> 		add_post_meta($post_id, '_wp_old_slug', $post_before-&gt;post_name);
</code></pre><pre class=''><code><span class='LineNumber'>5217</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5218</span> 	// If the new slug was used previously, delete it from the list.
</code></pre><pre class=''><code><span class='LineNumber'>5219</span> 	if ( in_array($post-&gt;post_name, $old_slugs) )
</code></pre><pre class=''><code><span class='LineNumber'>5220</span> 		delete_post_meta($post_id, '_wp_old_slug', $post-&gt;post_name);
</code></pre><pre class=''><code><span class='LineNumber'>5221</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5222</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5223</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5224</span>  * Retrieve the private post SQL based on capability.
</code></pre><pre class=''><code><span class='LineNumber'>5225</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5226</span>  * This function provides a standardized way to appropriately select on the
</code></pre><pre class=''><code><span class='LineNumber'>5227</span>  * post_status of a post type. The function will return a piece of SQL code
</code></pre><pre class=''><code><span class='LineNumber'>5228</span>  * that can be added to a WHERE clause; this SQL is constructed to allow all
</code></pre><pre class=''><code><span class='LineNumber'>5229</span>  * published posts, and all private posts to which the user has access.
</code></pre><pre class=''><code><span class='LineNumber'>5230</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5231</span>  * @since 2.2.0
</code></pre><pre class=''><code><span class='LineNumber'>5232</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5233</span>  * @param string $post_type Post type. Currently only supports 'post' or 'page'.
</code></pre><pre class=''><code><span class='LineNumber'>5234</span>  * @return string SQL code that can be added to a where clause.
</code></pre><pre class=''><code><span class='LineNumber'>5235</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5236</span> function get_private_posts_cap_sql( $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>5237</span> 	return get_posts_by_author_sql( $post_type, false );
</code></pre><pre class=''><code><span class='LineNumber'>5238</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5239</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5240</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5241</span>  * Retrieve the post SQL based on capability, author, and type.
</code></pre><pre class=''><code><span class='LineNumber'>5242</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5243</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5244</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5245</span>  * @see get_private_posts_cap_sql()
</code></pre><pre class=''><code><span class='LineNumber'>5246</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5247</span>  * @param string $post_type   Post type.
</code></pre><pre class=''><code><span class='LineNumber'>5248</span>  * @param bool   $full        Optional. Returns a full WHERE statement instead of just
</code></pre><pre class=''><code><span class='LineNumber'>5249</span>  *                            an 'andalso' term. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>5250</span>  * @param int    $post_author Optional. Query posts having a single author ID. Default null.
</code></pre><pre class=''><code><span class='LineNumber'>5251</span>  * @param bool   $public_only Optional. Only return public posts. Skips cap checks for
</code></pre><pre class=''><code><span class='LineNumber'>5252</span>  *                            $current_user.  Default false.
</code></pre><pre class=''><code><span class='LineNumber'>5253</span>  * @return string SQL WHERE code that can be added to a query.
</code></pre><pre class=''><code><span class='LineNumber'>5254</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5255</span> function get_posts_by_author_sql( $post_type, $full = true, $post_author = null, $public_only = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>5256</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5257</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5258</span> 	// Private posts.
</code></pre><pre class=''><code><span class='LineNumber'>5259</span> 	$post_type_obj = get_post_type_object( $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>5260</span> 	if ( ! $post_type_obj )
</code></pre><pre class=''><code><span class='LineNumber'>5261</span> 		return $full ? 'WHERE 1 = 0' : ' 1 = 0 ';
</code></pre><pre class=''><code><span class='LineNumber'>5262</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5263</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5264</span> 	 * Filter the capability to read private posts for a custom post type
</code></pre><pre class=''><code><span class='LineNumber'>5265</span> 	 * when generating SQL for getting posts by author.
</code></pre><pre class=''><code><span class='LineNumber'>5266</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5267</span> 	 * @since 2.2.0
</code></pre><pre class=''><code><span class='LineNumber'>5268</span> 	 * @deprecated 3.2.0 The hook transitioned from &quot;somewhat useless&quot; to &quot;totally useless&quot;.
</code></pre><pre class=''><code><span class='LineNumber'>5269</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5270</span> 	 * @param string $cap Capability.
</code></pre><pre class=''><code><span class='LineNumber'>5271</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5272</span> 	if ( ! $cap = apply_filters( 'pub_priv_sql_capability', '' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5273</span> 		$cap = $post_type_obj-&gt;cap-&gt;read_private_posts;
</code></pre><pre class=''><code><span class='LineNumber'>5274</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5275</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5276</span> 	if ( $full ) {
</code></pre><pre class=''><code><span class='LineNumber'>5277</span> 		if ( null === $post_author ) {
</code></pre><pre class=''><code><span class='LineNumber'>5278</span> 			$sql = $wpdb-&gt;prepare( 'WHERE post_type = %s AND ', $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>5279</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>5280</span> 			$sql = $wpdb-&gt;prepare( 'WHERE post_author = %d AND post_type = %s AND ', $post_author, $post_type );
</code></pre><pre class=''><code><span class='LineNumber'>5281</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5282</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>5283</span> 		$sql = '';
</code></pre><pre class=''><code><span class='LineNumber'>5284</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5285</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5286</span> 	$sql .= &quot;(post_status = 'publish'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5287</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5288</span> 	// Only need to check the cap if $public_only is false.
</code></pre><pre class=''><code><span class='LineNumber'>5289</span> 	if ( false === $public_only ) {
</code></pre><pre class=''><code><span class='LineNumber'>5290</span> 		if ( current_user_can( $cap ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5291</span> 			// Does the user have the capability to view private posts? Guess so.
</code></pre><pre class=''><code><span class='LineNumber'>5292</span> 			$sql .= &quot; OR post_status = 'private'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5293</span> 		} elseif ( is_user_logged_in() ) {
</code></pre><pre class=''><code><span class='LineNumber'>5294</span> 			// Users can view their own private posts.
</code></pre><pre class=''><code><span class='LineNumber'>5295</span> 			$id = get_current_user_id();
</code></pre><pre class=''><code><span class='LineNumber'>5296</span> 			if ( null === $post_author || ! $full ) {
</code></pre><pre class=''><code><span class='LineNumber'>5297</span> 				$sql .= &quot; OR post_status = 'private' AND post_author = $id&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5298</span> 			} elseif ( $id == (int) $post_author ) {
</code></pre><pre class=''><code><span class='LineNumber'>5299</span> 				$sql .= &quot; OR post_status = 'private'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5300</span> 			} // else none
</code></pre><pre class=''><code><span class='LineNumber'>5301</span> 		} // else none
</code></pre><pre class=''><code><span class='LineNumber'>5302</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5303</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5304</span> 	$sql .= ')';
</code></pre><pre class=''><code><span class='LineNumber'>5305</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5306</span> 	return $sql;
</code></pre><pre class=''><code><span class='LineNumber'>5307</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5308</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5309</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5310</span>  * Retrieve the date that the last post was published.
</code></pre><pre class=''><code><span class='LineNumber'>5311</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5312</span>  * The server timezone is the default and is the difference between GMT and
</code></pre><pre class=''><code><span class='LineNumber'>5313</span>  * server time. The 'blog' value is the date when the last post was posted. The
</code></pre><pre class=''><code><span class='LineNumber'>5314</span>  * 'gmt' is when the last post was posted in GMT formatted date.
</code></pre><pre class=''><code><span class='LineNumber'>5315</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5316</span>  * @since 0.71
</code></pre><pre class=''><code><span class='LineNumber'>5317</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5318</span>  * @param string $timezone The location to get the time. Accepts 'gmt', 'blog',
</code></pre><pre class=''><code><span class='LineNumber'>5319</span>  *                         or 'server'. Default 'server'.
</code></pre><pre class=''><code><span class='LineNumber'>5320</span>  * @return string The date of the last post.
</code></pre><pre class=''><code><span class='LineNumber'>5321</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5322</span> function get_lastpostdate( $timezone = 'server' ) {
</code></pre><pre class=''><code><span class='LineNumber'>5323</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5324</span> 	 * Filter the date the last post was published.
</code></pre><pre class=''><code><span class='LineNumber'>5325</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5326</span> 	 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5327</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5328</span> 	 * @param string $date     Date the last post was published. Likely values are 'gmt',
</code></pre><pre class=''><code><span class='LineNumber'>5329</span> 	 *                         'blog', or 'server'.
</code></pre><pre class=''><code><span class='LineNumber'>5330</span> 	 * @param string $timezone Location to use for getting the post published date.
</code></pre><pre class=''><code><span class='LineNumber'>5331</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5332</span> 	return apply_filters( 'get_lastpostdate', _get_last_post_time( $timezone, 'date' ), $timezone );
</code></pre><pre class=''><code><span class='LineNumber'>5333</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5334</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5335</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5336</span>  * Retrieve last post modified date depending on timezone.
</code></pre><pre class=''><code><span class='LineNumber'>5337</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5338</span>  * The server timezone is the default and is the difference between GMT and
</code></pre><pre class=''><code><span class='LineNumber'>5339</span>  * server time. The 'blog' value is just when the last post was modified. The
</code></pre><pre class=''><code><span class='LineNumber'>5340</span>  * 'gmt' is when the last post was modified in GMT time.
</code></pre><pre class=''><code><span class='LineNumber'>5341</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5342</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>5343</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5344</span>  * @param string $timezone The location to get the time. Accepts 'gmt', 'blog', or 'server'.
</code></pre><pre class=''><code><span class='LineNumber'>5345</span>  *                         Default 'server'.
</code></pre><pre class=''><code><span class='LineNumber'>5346</span>  * @return string The date the post was last modified.
</code></pre><pre class=''><code><span class='LineNumber'>5347</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5348</span> function get_lastpostmodified( $timezone = 'server' ) {
</code></pre><pre class=''><code><span class='LineNumber'>5349</span> 	$lastpostmodified = _get_last_post_time( $timezone, 'modified' );
</code></pre><pre class=''><code><span class='LineNumber'>5350</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5351</span> 	$lastpostdate = get_lastpostdate($timezone);
</code></pre><pre class=''><code><span class='LineNumber'>5352</span> 	if ( $lastpostdate &gt; $lastpostmodified )
</code></pre><pre class=''><code><span class='LineNumber'>5353</span> 		$lastpostmodified = $lastpostdate;
</code></pre><pre class=''><code><span class='LineNumber'>5354</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5355</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5356</span> 	 * Filter the date the last post was modified.
</code></pre><pre class=''><code><span class='LineNumber'>5357</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5358</span> 	 * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5359</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5360</span> 	 * @param string $lastpostmodified Date the last post was modified.
</code></pre><pre class=''><code><span class='LineNumber'>5361</span> 	 * @param string $timezone         Location to use for getting the post modified date.
</code></pre><pre class=''><code><span class='LineNumber'>5362</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5363</span> 	return apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );
</code></pre><pre class=''><code><span class='LineNumber'>5364</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5365</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5366</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5367</span>  * Retrieve latest post date data based on timezone.
</code></pre><pre class=''><code><span class='LineNumber'>5368</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5369</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5370</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5371</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5372</span>  * @param string $timezone The location to get the time. Accepts 'gmt', 'blog', or 'server'.
</code></pre><pre class=''><code><span class='LineNumber'>5373</span>  * @param string $field Field to check. Can be 'date' or 'modified'.
</code></pre><pre class=''><code><span class='LineNumber'>5374</span>  * @return string The date.
</code></pre><pre class=''><code><span class='LineNumber'>5375</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5376</span> function _get_last_post_time( $timezone, $field ) {
</code></pre><pre class=''><code><span class='LineNumber'>5377</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5378</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5379</span> 	if ( !in_array( $field, array( 'date', 'modified' ) ) )
</code></pre><pre class=''><code><span class='LineNumber'>5380</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5381</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5382</span> 	$timezone = strtolower( $timezone );
</code></pre><pre class=''><code><span class='LineNumber'>5383</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5384</span> 	$key = &quot;lastpost{$field}:$timezone&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5385</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5386</span> 	$date = wp_cache_get( $key, 'timeinfo' );
</code></pre><pre class=''><code><span class='LineNumber'>5387</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5388</span> 	if ( !$date ) {
</code></pre><pre class=''><code><span class='LineNumber'>5389</span> 		$add_seconds_server = date('Z');
</code></pre><pre class=''><code><span class='LineNumber'>5390</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5391</span> 		$post_types = get_post_types( array( 'public' =&gt; true ) );
</code></pre><pre class=''><code><span class='LineNumber'>5392</span> 		array_walk( $post_types, array( &amp;$wpdb, 'escape_by_ref' ) );
</code></pre><pre class=''><code><span class='LineNumber'>5393</span> 		$post_types = &quot;'&quot; . implode( &quot;', '&quot;, $post_types ) . &quot;'&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>5394</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5395</span> 		switch ( $timezone ) {
</code></pre><pre class=''><code><span class='LineNumber'>5396</span> 			case 'gmt':
</code></pre><pre class=''><code><span class='LineNumber'>5397</span> 				$date = $wpdb-&gt;get_var(&quot;SELECT post_{$field}_gmt FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>5398</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>5399</span> 			case 'blog':
</code></pre><pre class=''><code><span class='LineNumber'>5400</span> 				$date = $wpdb-&gt;get_var(&quot;SELECT post_{$field} FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>5401</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>5402</span> 			case 'server':
</code></pre><pre class=''><code><span class='LineNumber'>5403</span> 				$date = $wpdb-&gt;get_var(&quot;SELECT DATE_ADD(post_{$field}_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1&quot;);
</code></pre><pre class=''><code><span class='LineNumber'>5404</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>5405</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5406</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5407</span> 		if ( $date )
</code></pre><pre class=''><code><span class='LineNumber'>5408</span> 			wp_cache_set( $key, $date, 'timeinfo' );
</code></pre><pre class=''><code><span class='LineNumber'>5409</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5410</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5411</span> 	return $date;
</code></pre><pre class=''><code><span class='LineNumber'>5412</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5413</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5414</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5415</span>  * Updates posts in cache.
</code></pre><pre class=''><code><span class='LineNumber'>5416</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5417</span>  * @since 1.5.1
</code></pre><pre class=''><code><span class='LineNumber'>5418</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5419</span>  * @param array $posts Array of post objects, passed by reference.
</code></pre><pre class=''><code><span class='LineNumber'>5420</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5421</span> function update_post_cache( &amp;$posts ) {
</code></pre><pre class=''><code><span class='LineNumber'>5422</span> 	if ( ! $posts )
</code></pre><pre class=''><code><span class='LineNumber'>5423</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5424</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5425</span> 	foreach ( $posts as $post )
</code></pre><pre class=''><code><span class='LineNumber'>5426</span> 		wp_cache_add( $post-&gt;ID, $post, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>5427</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5428</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5429</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5430</span>  * Will clean the post in the cache.
</code></pre><pre class=''><code><span class='LineNumber'>5431</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5432</span>  * Cleaning means delete from the cache of the post. Will call to clean the term
</code></pre><pre class=''><code><span class='LineNumber'>5433</span>  * object cache associated with the post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5434</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5435</span>  * This function not run if $_wp_suspend_cache_invalidation is not empty. See
</code></pre><pre class=''><code><span class='LineNumber'>5436</span>  * wp_suspend_cache_invalidation().
</code></pre><pre class=''><code><span class='LineNumber'>5437</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5438</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5439</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5440</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>5441</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5442</span>  * @param int|WP_Post $post Post ID or post object to remove from the cache.
</code></pre><pre class=''><code><span class='LineNumber'>5443</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5444</span> function clean_post_cache( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>5445</span> 	global $_wp_suspend_cache_invalidation, $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5446</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5447</span> 	if ( ! empty( $_wp_suspend_cache_invalidation ) )
</code></pre><pre class=''><code><span class='LineNumber'>5448</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5449</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5450</span> 	$post = get_post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>5451</span> 	if ( empty( $post ) )
</code></pre><pre class=''><code><span class='LineNumber'>5452</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5453</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5454</span> 	wp_cache_delete( $post-&gt;ID, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>5455</span> 	wp_cache_delete( $post-&gt;ID, 'post_meta' );
</code></pre><pre class=''><code><span class='LineNumber'>5456</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5457</span> 	clean_object_term_cache( $post-&gt;ID, $post-&gt;post_type );
</code></pre><pre class=''><code><span class='LineNumber'>5458</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5459</span> 	wp_cache_delete( 'wp_get_archives', 'general' );
</code></pre><pre class=''><code><span class='LineNumber'>5460</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5461</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5462</span> 	 * Fires immediately after the given post's cache is cleaned.
</code></pre><pre class=''><code><span class='LineNumber'>5463</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5464</span> 	 * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>5465</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5466</span> 	 * @param int     $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5467</span> 	 * @param WP_Post $post    Post object.
</code></pre><pre class=''><code><span class='LineNumber'>5468</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5469</span> 	do_action( 'clean_post_cache', $post-&gt;ID, $post );
</code></pre><pre class=''><code><span class='LineNumber'>5470</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5471</span> 	if ( 'page' == $post-&gt;post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>5472</span> 		wp_cache_delete( 'all_page_ids', 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>5473</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5474</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>5475</span> 		 * Fires immediately after the given page's cache is cleaned.
</code></pre><pre class=''><code><span class='LineNumber'>5476</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5477</span> 		 * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>5478</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5479</span> 		 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5480</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>5481</span> 		do_action( 'clean_page_cache', $post-&gt;ID );
</code></pre><pre class=''><code><span class='LineNumber'>5482</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5483</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5484</span> 	wp_cache_set( 'last_changed', microtime(), 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>5485</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5486</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5487</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5488</span>  * Call major cache updating functions for list of Post objects.
</code></pre><pre class=''><code><span class='LineNumber'>5489</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5490</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>5491</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5492</span>  * @param array  $posts             Array of Post objects
</code></pre><pre class=''><code><span class='LineNumber'>5493</span>  * @param string $post_type         Optional. Post type. Default 'post'.
</code></pre><pre class=''><code><span class='LineNumber'>5494</span>  * @param bool   $update_term_cache Optional. Whether to update the term cache. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>5495</span>  * @param bool   $update_meta_cache Optional. Whether to update the meta cache. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>5496</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5497</span> function update_post_caches( &amp;$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true ) {
</code></pre><pre class=''><code><span class='LineNumber'>5498</span> 	// No point in doing all this work if we didn't match any posts.
</code></pre><pre class=''><code><span class='LineNumber'>5499</span> 	if ( !$posts )
</code></pre><pre class=''><code><span class='LineNumber'>5500</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5501</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5502</span> 	update_post_cache($posts);
</code></pre><pre class=''><code><span class='LineNumber'>5503</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5504</span> 	$post_ids = array();
</code></pre><pre class=''><code><span class='LineNumber'>5505</span> 	foreach ( $posts as $post )
</code></pre><pre class=''><code><span class='LineNumber'>5506</span> 		$post_ids[] = $post-&gt;ID;
</code></pre><pre class=''><code><span class='LineNumber'>5507</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5508</span> 	if ( ! $post_type )
</code></pre><pre class=''><code><span class='LineNumber'>5509</span> 		$post_type = 'any';
</code></pre><pre class=''><code><span class='LineNumber'>5510</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5511</span> 	if ( $update_term_cache ) {
</code></pre><pre class=''><code><span class='LineNumber'>5512</span> 		if ( is_array($post_type) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5513</span> 			$ptypes = $post_type;
</code></pre><pre class=''><code><span class='LineNumber'>5514</span> 		} elseif ( 'any' == $post_type ) {
</code></pre><pre class=''><code><span class='LineNumber'>5515</span> 			// Just use the post_types in the supplied posts.
</code></pre><pre class=''><code><span class='LineNumber'>5516</span> 			foreach ( $posts as $post )
</code></pre><pre class=''><code><span class='LineNumber'>5517</span> 				$ptypes[] = $post-&gt;post_type;
</code></pre><pre class=''><code><span class='LineNumber'>5518</span> 			$ptypes = array_unique($ptypes);
</code></pre><pre class=''><code><span class='LineNumber'>5519</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>5520</span> 			$ptypes = array($post_type);
</code></pre><pre class=''><code><span class='LineNumber'>5521</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5522</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5523</span> 		if ( ! empty($ptypes) )
</code></pre><pre class=''><code><span class='LineNumber'>5524</span> 			update_object_term_cache($post_ids, $ptypes);
</code></pre><pre class=''><code><span class='LineNumber'>5525</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5526</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5527</span> 	if ( $update_meta_cache )
</code></pre><pre class=''><code><span class='LineNumber'>5528</span> 		update_postmeta_cache($post_ids);
</code></pre><pre class=''><code><span class='LineNumber'>5529</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5530</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5531</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5532</span>  * Updates metadata cache for list of post IDs.
</code></pre><pre class=''><code><span class='LineNumber'>5533</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5534</span>  * Performs SQL query to retrieve the metadata for the post IDs and updates the
</code></pre><pre class=''><code><span class='LineNumber'>5535</span>  * metadata cache for the posts. Therefore, the functions, which call this
</code></pre><pre class=''><code><span class='LineNumber'>5536</span>  * function, do not need to perform SQL queries on their own.
</code></pre><pre class=''><code><span class='LineNumber'>5537</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5538</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5539</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5540</span>  * @param array $post_ids List of post IDs.
</code></pre><pre class=''><code><span class='LineNumber'>5541</span>  * @return bool|array Returns false if there is nothing to update or an array
</code></pre><pre class=''><code><span class='LineNumber'>5542</span>  *                    of metadata.
</code></pre><pre class=''><code><span class='LineNumber'>5543</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5544</span> function update_postmeta_cache( $post_ids ) {
</code></pre><pre class=''><code><span class='LineNumber'>5545</span> 	return update_meta_cache('post', $post_ids);
</code></pre><pre class=''><code><span class='LineNumber'>5546</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5547</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5548</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5549</span>  * Will clean the attachment in the cache.
</code></pre><pre class=''><code><span class='LineNumber'>5550</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5551</span>  * Cleaning means delete from the cache. Optionally will clean the term
</code></pre><pre class=''><code><span class='LineNumber'>5552</span>  * object cache associated with the attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>5553</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5554</span>  * This function will not run if $_wp_suspend_cache_invalidation is not empty.
</code></pre><pre class=''><code><span class='LineNumber'>5555</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5556</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5557</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5558</span>  * @see wp_suspend_cache_invalidation()
</code></pre><pre class=''><code><span class='LineNumber'>5559</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5560</span>  * @param int  $id          The attachment ID in the cache to clean.
</code></pre><pre class=''><code><span class='LineNumber'>5561</span>  * @param bool $clean_terms Optional. Whether to clean terms cache. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>5562</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5563</span> function clean_attachment_cache( $id, $clean_terms = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>5564</span> 	global $_wp_suspend_cache_invalidation;
</code></pre><pre class=''><code><span class='LineNumber'>5565</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5566</span> 	if ( !empty($_wp_suspend_cache_invalidation) )
</code></pre><pre class=''><code><span class='LineNumber'>5567</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5568</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5569</span> 	$id = (int) $id;
</code></pre><pre class=''><code><span class='LineNumber'>5570</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5571</span> 	wp_cache_delete($id, 'posts');
</code></pre><pre class=''><code><span class='LineNumber'>5572</span> 	wp_cache_delete($id, 'post_meta');
</code></pre><pre class=''><code><span class='LineNumber'>5573</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5574</span> 	if ( $clean_terms )
</code></pre><pre class=''><code><span class='LineNumber'>5575</span> 		clean_object_term_cache($id, 'attachment');
</code></pre><pre class=''><code><span class='LineNumber'>5576</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5577</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>5578</span> 	 * Fires after the given attachment's cache is cleaned.
</code></pre><pre class=''><code><span class='LineNumber'>5579</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5580</span> 	 * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>5581</span> 	 *
</code></pre><pre class=''><code><span class='LineNumber'>5582</span> 	 * @param int $id Attachment ID.
</code></pre><pre class=''><code><span class='LineNumber'>5583</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>5584</span> 	do_action( 'clean_attachment_cache', $id );
</code></pre><pre class=''><code><span class='LineNumber'>5585</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5586</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5587</span> //
</code></pre><pre class=''><code><span class='LineNumber'>5588</span> // Hooks
</code></pre><pre class=''><code><span class='LineNumber'>5589</span> //
</code></pre><pre class=''><code><span class='LineNumber'>5590</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5591</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5592</span>  * Hook for managing future post transitions to published.
</code></pre><pre class=''><code><span class='LineNumber'>5593</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5594</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5595</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5596</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5597</span>  * @see wp_clear_scheduled_hook()
</code></pre><pre class=''><code><span class='LineNumber'>5598</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>5599</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5600</span>  * @param string  $new_status New post status.
</code></pre><pre class=''><code><span class='LineNumber'>5601</span>  * @param string  $old_status Previous post status.
</code></pre><pre class=''><code><span class='LineNumber'>5602</span>  * @param WP_Post $post       Post object.
</code></pre><pre class=''><code><span class='LineNumber'>5603</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5604</span> function _transition_post_status( $new_status, $old_status, $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>5605</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5606</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5607</span> 	if ( $old_status != 'publish' &amp;&amp; $new_status == 'publish' ) {
</code></pre><pre class=''><code><span class='LineNumber'>5608</span> 		// Reset GUID if transitioning to publish and it is empty.
</code></pre><pre class=''><code><span class='LineNumber'>5609</span> 		if ( '' == get_the_guid($post-&gt;ID) )
</code></pre><pre class=''><code><span class='LineNumber'>5610</span> 			$wpdb-&gt;update( $wpdb-&gt;posts, array( 'guid' =&gt; get_permalink( $post-&gt;ID ) ), array( 'ID' =&gt; $post-&gt;ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>5611</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5612</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>5613</span> 		 * Fires when a post's status is transitioned from private to published.
</code></pre><pre class=''><code><span class='LineNumber'>5614</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5615</span> 		 * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>5616</span> 		 * @deprecated 2.3.0 Use 'private_to_publish' instead.
</code></pre><pre class=''><code><span class='LineNumber'>5617</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5618</span> 		 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5619</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>5620</span> 		do_action('private_to_published', $post-&gt;ID);
</code></pre><pre class=''><code><span class='LineNumber'>5621</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5622</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5623</span> 	// If published posts changed clear the lastpostmodified cache.
</code></pre><pre class=''><code><span class='LineNumber'>5624</span> 	if ( 'publish' == $new_status || 'publish' == $old_status) {
</code></pre><pre class=''><code><span class='LineNumber'>5625</span> 		foreach ( array( 'server', 'gmt', 'blog' ) as $timezone ) {
</code></pre><pre class=''><code><span class='LineNumber'>5626</span> 			wp_cache_delete( &quot;lastpostmodified:$timezone&quot;, 'timeinfo' );
</code></pre><pre class=''><code><span class='LineNumber'>5627</span> 			wp_cache_delete( &quot;lastpostdate:$timezone&quot;, 'timeinfo' );
</code></pre><pre class=''><code><span class='LineNumber'>5628</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>5629</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5630</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5631</span> 	if ( $new_status !== $old_status ) {
</code></pre><pre class=''><code><span class='LineNumber'>5632</span> 		wp_cache_delete( _count_posts_cache_key( $post-&gt;post_type ), 'counts' );
</code></pre><pre class=''><code><span class='LineNumber'>5633</span> 		wp_cache_delete( _count_posts_cache_key( $post-&gt;post_type, 'readable' ), 'counts' );
</code></pre><pre class=''><code><span class='LineNumber'>5634</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5635</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5636</span> 	// Always clears the hook in case the post status bounced from future to draft.
</code></pre><pre class=''><code><span class='LineNumber'>5637</span> 	wp_clear_scheduled_hook('publish_future_post', array( $post-&gt;ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>5638</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5639</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5640</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5641</span>  * Hook used to schedule publication for a post marked for the future.
</code></pre><pre class=''><code><span class='LineNumber'>5642</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5643</span>  * The $post properties used and must exist are 'ID' and 'post_date_gmt'.
</code></pre><pre class=''><code><span class='LineNumber'>5644</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5645</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5646</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5647</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5648</span>  * @param int     $deprecated Not used. Can be set to null. Never implemented. Not marked
</code></pre><pre class=''><code><span class='LineNumber'>5649</span>  *                            as deprecated with _deprecated_argument() as it conflicts with
</code></pre><pre class=''><code><span class='LineNumber'>5650</span>  *                            wp_transition_post_status() and the default filter for
</code></pre><pre class=''><code><span class='LineNumber'>5651</span>  *                            {@see _future_post_hook()}.
</code></pre><pre class=''><code><span class='LineNumber'>5652</span>  * @param WP_Post $post       Post object.
</code></pre><pre class=''><code><span class='LineNumber'>5653</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5654</span> function _future_post_hook( $deprecated, $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>5655</span> 	wp_clear_scheduled_hook( 'publish_future_post', array( $post-&gt;ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>5656</span> 	wp_schedule_single_event( strtotime( get_gmt_from_date( $post-&gt;post_date ) . ' GMT') , 'publish_future_post', array( $post-&gt;ID ) );
</code></pre><pre class=''><code><span class='LineNumber'>5657</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5658</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5659</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5660</span>  * Hook to schedule pings and enclosures when a post is published.
</code></pre><pre class=''><code><span class='LineNumber'>5661</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5662</span>  * Uses XMLRPC_REQUEST and WP_IMPORTING constants.
</code></pre><pre class=''><code><span class='LineNumber'>5663</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5664</span>  * @since 2.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5665</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5666</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5667</span>  * @param int $post_id The ID in the database table of the post being published.
</code></pre><pre class=''><code><span class='LineNumber'>5668</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5669</span> function _publish_post_hook( $post_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>5670</span> 	if ( defined( 'XMLRPC_REQUEST' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5671</span> 		/**
</code></pre><pre class=''><code><span class='LineNumber'>5672</span> 		 * Fires when _publish_post_hook() is called during an XML-RPC request.
</code></pre><pre class=''><code><span class='LineNumber'>5673</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5674</span> 		 * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5675</span> 		 *
</code></pre><pre class=''><code><span class='LineNumber'>5676</span> 		 * @param int $post_id Post ID.
</code></pre><pre class=''><code><span class='LineNumber'>5677</span> 		 */
</code></pre><pre class=''><code><span class='LineNumber'>5678</span> 		do_action( 'xmlrpc_publish_post', $post_id );
</code></pre><pre class=''><code><span class='LineNumber'>5679</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5680</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5681</span> 	if ( defined('WP_IMPORTING') )
</code></pre><pre class=''><code><span class='LineNumber'>5682</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>5683</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5684</span> 	if ( get_option('default_pingback_flag') )
</code></pre><pre class=''><code><span class='LineNumber'>5685</span> 		add_post_meta( $post_id, '_pingme', '1' );
</code></pre><pre class=''><code><span class='LineNumber'>5686</span> 	add_post_meta( $post_id, '_encloseme', '1' );
</code></pre><pre class=''><code><span class='LineNumber'>5687</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5688</span> 	wp_schedule_single_event(time(), 'do_pings');
</code></pre><pre class=''><code><span class='LineNumber'>5689</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5690</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5691</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5692</span>  * Return the post's parent's post_ID
</code></pre><pre class=''><code><span class='LineNumber'>5693</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5694</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5695</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5696</span>  * @param int $post_id
</code></pre><pre class=''><code><span class='LineNumber'>5697</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5698</span>  * @return int|bool Post parent ID, otherwise false.
</code></pre><pre class=''><code><span class='LineNumber'>5699</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5700</span> function wp_get_post_parent_id( $post_ID ) {
</code></pre><pre class=''><code><span class='LineNumber'>5701</span> 	$post = get_post( $post_ID );
</code></pre><pre class=''><code><span class='LineNumber'>5702</span> 	if ( !$post || is_wp_error( $post ) )
</code></pre><pre class=''><code><span class='LineNumber'>5703</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>5704</span> 	return (int) $post-&gt;post_parent;
</code></pre><pre class=''><code><span class='LineNumber'>5705</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5706</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5707</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5708</span>  * Check the given subset of the post hierarchy for hierarchy loops.
</code></pre><pre class=''><code><span class='LineNumber'>5709</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5710</span>  * Prevents loops from forming and breaks those that it finds. Attached
</code></pre><pre class=''><code><span class='LineNumber'>5711</span>  * to the 'wp_insert_post_parent' filter.
</code></pre><pre class=''><code><span class='LineNumber'>5712</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5713</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5714</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5715</span>  * @see wp_find_hierarchy_loop()
</code></pre><pre class=''><code><span class='LineNumber'>5716</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5717</span>  * @param int $post_parent ID of the parent for the post we're checking.
</code></pre><pre class=''><code><span class='LineNumber'>5718</span>  * @param int $post_ID     ID of the post we're checking.
</code></pre><pre class=''><code><span class='LineNumber'>5719</span>  * @return int The new post_parent for the post, 0 otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>5720</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5721</span> function wp_check_post_hierarchy_for_loops( $post_parent, $post_ID ) {
</code></pre><pre class=''><code><span class='LineNumber'>5722</span> 	// Nothing fancy here - bail.
</code></pre><pre class=''><code><span class='LineNumber'>5723</span> 	if ( !$post_parent )
</code></pre><pre class=''><code><span class='LineNumber'>5724</span> 		return 0;
</code></pre><pre class=''><code><span class='LineNumber'>5725</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5726</span> 	// New post can't cause a loop.
</code></pre><pre class=''><code><span class='LineNumber'>5727</span> 	if ( empty( $post_ID ) )
</code></pre><pre class=''><code><span class='LineNumber'>5728</span> 		return $post_parent;
</code></pre><pre class=''><code><span class='LineNumber'>5729</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5730</span> 	// Can't be its own parent.
</code></pre><pre class=''><code><span class='LineNumber'>5731</span> 	if ( $post_parent == $post_ID )
</code></pre><pre class=''><code><span class='LineNumber'>5732</span> 		return 0;
</code></pre><pre class=''><code><span class='LineNumber'>5733</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5734</span> 	// Now look for larger loops.
</code></pre><pre class=''><code><span class='LineNumber'>5735</span> 	if ( !$loop = wp_find_hierarchy_loop( 'wp_get_post_parent_id', $post_ID, $post_parent ) )
</code></pre><pre class=''><code><span class='LineNumber'>5736</span> 		return $post_parent; // No loop
</code></pre><pre class=''><code><span class='LineNumber'>5737</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5738</span> 	// Setting $post_parent to the given value causes a loop.
</code></pre><pre class=''><code><span class='LineNumber'>5739</span> 	if ( isset( $loop[$post_ID] ) )
</code></pre><pre class=''><code><span class='LineNumber'>5740</span> 		return 0;
</code></pre><pre class=''><code><span class='LineNumber'>5741</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5742</span> 	// There's a loop, but it doesn't contain $post_ID. Break the loop.
</code></pre><pre class=''><code><span class='LineNumber'>5743</span> 	foreach ( array_keys( $loop ) as $loop_member )
</code></pre><pre class=''><code><span class='LineNumber'>5744</span> 		wp_update_post( array( 'ID' =&gt; $loop_member, 'post_parent' =&gt; 0 ) );
</code></pre><pre class=''><code><span class='LineNumber'>5745</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5746</span> 	return $post_parent;
</code></pre><pre class=''><code><span class='LineNumber'>5747</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5748</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5749</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5750</span>  * Set a post thumbnail.
</code></pre><pre class=''><code><span class='LineNumber'>5751</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5752</span>  * @since 3.1.0
</code></pre><pre class=''><code><span class='LineNumber'>5753</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5754</span>  * @param int|WP_Post $post         Post ID or post object where thumbnail should be attached.
</code></pre><pre class=''><code><span class='LineNumber'>5755</span>  * @param int         $thumbnail_id Thumbnail to attach.
</code></pre><pre class=''><code><span class='LineNumber'>5756</span>  * @return bool True on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>5757</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5758</span> function set_post_thumbnail( $post, $thumbnail_id ) {
</code></pre><pre class=''><code><span class='LineNumber'>5759</span> 	$post = get_post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>5760</span> 	$thumbnail_id = absint( $thumbnail_id );
</code></pre><pre class=''><code><span class='LineNumber'>5761</span> 	if ( $post &amp;&amp; $thumbnail_id &amp;&amp; get_post( $thumbnail_id ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5762</span> 		if ( wp_get_attachment_image( $thumbnail_id, 'thumbnail' ) )
</code></pre><pre class=''><code><span class='LineNumber'>5763</span> 			return update_post_meta( $post-&gt;ID, '_thumbnail_id', $thumbnail_id );
</code></pre><pre class=''><code><span class='LineNumber'>5764</span> 		else
</code></pre><pre class=''><code><span class='LineNumber'>5765</span> 			return delete_post_meta( $post-&gt;ID, '_thumbnail_id' );
</code></pre><pre class=''><code><span class='LineNumber'>5766</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5767</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>5768</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5769</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5770</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5771</span>  * Remove a post thumbnail.
</code></pre><pre class=''><code><span class='LineNumber'>5772</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5773</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5774</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5775</span>  * @param int|WP_Post $post Post ID or post object where thumbnail should be removed from.
</code></pre><pre class=''><code><span class='LineNumber'>5776</span>  * @return bool True on success, false on failure.
</code></pre><pre class=''><code><span class='LineNumber'>5777</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5778</span> function delete_post_thumbnail( $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>5779</span> 	$post = get_post( $post );
</code></pre><pre class=''><code><span class='LineNumber'>5780</span> 	if ( $post )
</code></pre><pre class=''><code><span class='LineNumber'>5781</span> 		return delete_post_meta( $post-&gt;ID, '_thumbnail_id' );
</code></pre><pre class=''><code><span class='LineNumber'>5782</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>5783</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5784</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5785</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5786</span>  * Delete auto-drafts for new posts that are &gt; 7 days old.
</code></pre><pre class=''><code><span class='LineNumber'>5787</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5788</span>  * @since 3.4.0
</code></pre><pre class=''><code><span class='LineNumber'>5789</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5790</span>  * @global wpdb $wpdb WordPress database access abstraction object.
</code></pre><pre class=''><code><span class='LineNumber'>5791</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5792</span> function wp_delete_auto_drafts() {
</code></pre><pre class=''><code><span class='LineNumber'>5793</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5794</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5795</span> 	// Cleanup old auto-drafts more than 7 days old.
</code></pre><pre class=''><code><span class='LineNumber'>5796</span> 	$old_posts = $wpdb-&gt;get_col( &quot;SELECT ID FROM $wpdb-&gt;posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) &gt; post_date&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>5797</span> 	foreach ( (array) $old_posts as $delete ) {
</code></pre><pre class=''><code><span class='LineNumber'>5798</span> 		// Force delete.
</code></pre><pre class=''><code><span class='LineNumber'>5799</span> 		wp_delete_post( $delete, true );
</code></pre><pre class=''><code><span class='LineNumber'>5800</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5801</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5802</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5803</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5804</span>  * Update the custom taxonomies' term counts when a post's status is changed.
</code></pre><pre class=''><code><span class='LineNumber'>5805</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5806</span>  * For example, default posts term counts (for custom taxonomies) don't include
</code></pre><pre class=''><code><span class='LineNumber'>5807</span>  * private / draft posts.
</code></pre><pre class=''><code><span class='LineNumber'>5808</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5809</span>  * @since 3.3.0
</code></pre><pre class=''><code><span class='LineNumber'>5810</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5811</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5812</span>  * @param string  $new_status New post status.
</code></pre><pre class=''><code><span class='LineNumber'>5813</span>  * @param string  $old_status Old post status.
</code></pre><pre class=''><code><span class='LineNumber'>5814</span>  * @param WP_Post $post       Post object.
</code></pre><pre class=''><code><span class='LineNumber'>5815</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5816</span> function _update_term_count_on_transition_post_status( $new_status, $old_status, $post ) {
</code></pre><pre class=''><code><span class='LineNumber'>5817</span> 	// Update counts for the post's terms.
</code></pre><pre class=''><code><span class='LineNumber'>5818</span> 	foreach ( (array) get_object_taxonomies( $post-&gt;post_type ) as $taxonomy ) {
</code></pre><pre class=''><code><span class='LineNumber'>5819</span> 		$tt_ids = wp_get_object_terms( $post-&gt;ID, $taxonomy, array( 'fields' =&gt; 'tt_ids' ) );
</code></pre><pre class=''><code><span class='LineNumber'>5820</span> 		wp_update_term_count( $tt_ids, $taxonomy );
</code></pre><pre class=''><code><span class='LineNumber'>5821</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5822</span> }
</code></pre><pre class=''><code><span class='LineNumber'>5823</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5824</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>5825</span>  * Adds any posts from the given ids to the cache that do not already exist in cache
</code></pre><pre class=''><code><span class='LineNumber'>5826</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5827</span>  * @since 3.4.0
</code></pre><pre class=''><code><span class='LineNumber'>5828</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>5829</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5830</span>  * @see update_post_caches()
</code></pre><pre class=''><code><span class='LineNumber'>5831</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5832</span>  * @param array $post_ids          ID list
</code></pre><pre class=''><code><span class='LineNumber'>5833</span>  * @param bool  $update_term_cache Optional. Whether to update the term cache. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>5834</span>  * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.
</code></pre><pre class=''><code><span class='LineNumber'>5835</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>5836</span> function _prime_post_caches( $ids, $update_term_cache = true, $update_meta_cache = true ) {
</code></pre><pre class=''><code><span class='LineNumber'>5837</span> 	global $wpdb;
</code></pre><pre class=''><code><span class='LineNumber'>5838</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5839</span> 	$non_cached_ids = _get_non_cached_ids( $ids, 'posts' );
</code></pre><pre class=''><code><span class='LineNumber'>5840</span> 	if ( !empty( $non_cached_ids ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>5841</span> 		$fresh_posts = $wpdb-&gt;get_results( sprintf( &quot;SELECT $wpdb-&gt;posts.* FROM $wpdb-&gt;posts WHERE ID IN (%s)&quot;, join( &quot;,&quot;, $non_cached_ids ) ) );
</code></pre><pre class=''><code><span class='LineNumber'>5842</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5843</span> 		update_post_caches( $fresh_posts, 'any', $update_term_cache, $update_meta_cache );
</code></pre><pre class=''><code><span class='LineNumber'>5844</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>5845</span> }
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/model/deploy/GitDeployProxy.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 28/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 21:47
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\Proxy;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class GitDeployProxy extends Proxy
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 		const NAME        = __CLASS__;
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		const ACTION_ADD  = &quot;gitmodule/model/GitDeployProxy/add&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		const POST_ACTION = &quot;gitmodule/model/GitDeployProxy/post&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		function onRegister()
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 			add_action( self::ACTION_ADD, array($this, &quot;add&quot;), 0, 1 );
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 			if ( isset($_POST[ 'action' ]) )
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 				switch ( $_POST[ 'action' ] )
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 				{
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 					case self::POST_ACTION:
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 						$this-&gt;onPostAction();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 						break;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		function add( $deploymentID, $key = NULL, $override = FALSE )
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			// CHECK
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Is this item deploying? If not: continue. If yes: Return conflict message.
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$currentStatus = get_post_meta( $deploymentID, StatusMetaField::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			switch ( $currentStatus )
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 				case StatusMetaField::PROCESSING:
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 					die(__( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ));
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 					return new WP_Error( 'error', __( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ) );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 			// Is revision submitted? If not: fetch latest revision. If yes: Is the revision submitted valid?
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 			// Is comment submitted? If not: fetch latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 			// Step 0: Change status to DEPLOYING / PROCESSING
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 			// Step 1: Clone git
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 			// Step 2: Fetch file list (all files if deploy from scratch, else list changes) (Is repository path submitted?)
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 			// Step 3: Connect to FTP and deploy file list
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 			// Step 4: Post to URL that deployment is done
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 			// END PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 			// Step 1: Notify people
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 			// Step 2: Delete files
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 			// Step 3: Change status to DEPLOYED
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 			$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 		protected function deploy( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 			// Step #1: Change status to PROCESSING.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 			if ( get_post_meta( $deploymentID, StatusMetaField::NAME, TRUE ) == StatusMetaField::ERROR ) return FALSE;
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 			else update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::PROCESSING );
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 			$currentDeploymentStage = get_post_meta( $deploymentID, DeploymentStageMetaField::NAME, TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 			switch ( $currentDeploymentStage )
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 				case DeploymentStageMetaField::CLONING:
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 					// Step #3: Fetch changed files, connect to FTP and upload.
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 					// Keep in mind: All files if 'deploy from scratch is ticked'
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 					// Keep in mind: Is repository path submitted?
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 					// If no revision is submitted, set it now to the latest
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 					// If no comment is submitted, set it now to the latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 					$revision       = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 					$comment        = $this-&gt;getComment( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 					$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $this-&gt;getRepositoryID( $deploymentID ) );
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 					if ( empty($revision) )
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log --pretty=format:'%H' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 						$revision = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 					if ( empty($comment) )
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log $revision --pretty=format:'%s' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 						$comment = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), $comment );
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 					// OK ready to upload
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::UPLOADING );
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 					$this-&gt;upload( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 				case DeploymentStageMetaField::UPLOADING:
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 					// Step #4: Cleanup. Delete files.
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 					// Step #5: Notify people.
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 					$this-&gt;notify( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 					// Step #6: Update webhook revision.
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 					$revision  = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 					$webhookID = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 					update_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 					// Step #7: Change status to OK / DONE.
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::DONE );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::OK );
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 					// Step #2: Clone.
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::CLONING );
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 					$this-&gt;gitClone( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 		public function getComment( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 		{
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>166</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 		public function getRevision( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>170</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>171</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>173</span> 
</code></pre><pre class=''><code><span class='LineNumber'>174</span> 		public function getWebhookID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>176</span> 			return intval( get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>177</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 		public function getRepositoryID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 			return intval( get_post_meta( $this-&gt;getWebhookID( $deploymentID ), GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitRepositoryPostType::NAME ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 		protected function cleanUp( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 		protected function notify( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 		protected function gitClone( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 			$repositoryID   = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 			$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 			$gitSSHURL      = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::ADDRESS ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 			$branch         = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::BRANCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 			$keyID          = apply_filters( GitRepositoryProxy::FILTER_KEY_ID, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 			$keyPath        = GitKeyProxy::locatePrivateSSHKey( $keyID );
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 			$keyPassphrase  = get_post_meta( $keyID, GitKeyMetaBox::constructMetaKey( GitKeyMetaBox::NAME, GitKeyMetaBox::PASSPHRASE ) );
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>205</span> //			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID &gt; /dev/null &amp; echo $!&quot;, $pid, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>206</span> //			update_post_meta( $deploymentID, PIDMetaField::NAME, $pid );
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 			var_dump( $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 		protected function upload( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 			$webhookID         = $this-&gt;getWebhookID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 			$repositoryID      = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 			$repositoryPath    = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 			$revision          = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 			$fromPath          = get_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::GIT_REPOSITORY_PATH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 			$deployFromScratch = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::DEPLOY_FROM_SCRATCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) . &quot; $repositoryPath $revision $fromPath $deployFromScratch&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 			update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::FILE_LIST ), implode( &quot;\n&quot;, $output ) );
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 		/* POST ACTION HOOKS */
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 		protected function onPostAction()
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 			$deploymentID = $_POST[ 'objectID' ];
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 			$exitCode     = $_POST[ 'exitCode' ];
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 			switch ( intval( $exitCode ) )
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 				case 0:
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 					// Current process was successful. Continue deployment.
</code></pre><pre class=''><code><span class='LineNumber'>236</span> 					$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>239</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>240</span> 
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 					// Current process was NOT successful. Interrupt deployment and cleanup.
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::ERROR );
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 			exit;
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/model/deploy/GitDeployProxy.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 28/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 21:47
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\Proxy;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class GitDeployProxy extends Proxy
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 		const NAME        = __CLASS__;
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		const ACTION_ADD  = &quot;gitmodule/model/GitDeployProxy/add&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		const POST_ACTION = &quot;gitmodule/model/GitDeployProxy/post&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		function onRegister()
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 			add_action( self::ACTION_ADD, array($this, &quot;add&quot;), 0, 1 );
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 			if ( isset($_POST[ 'action' ]) )
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 				switch ( $_POST[ 'action' ] )
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 				{
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 					case self::POST_ACTION:
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 						$this-&gt;onPostAction();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 						break;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		function add( $deploymentID, $key = NULL, $override = FALSE )
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			// CHECK
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Is this item deploying? If not: continue. If yes: Return conflict message.
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$currentStatus = get_post_meta( $deploymentID, StatusMetaField::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			switch ( $currentStatus )
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 				case StatusMetaField::PROCESSING:
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 					die(__( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ));
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 					return new WP_Error( 'error', __( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ) );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 			// Is revision submitted? If not: fetch latest revision. If yes: Is the revision submitted valid?
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 			// Is comment submitted? If not: fetch latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 			// Step 0: Change status to DEPLOYING / PROCESSING
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 			// Step 1: Clone git
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 			// Step 2: Fetch file list (all files if deploy from scratch, else list changes) (Is repository path submitted?)
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 			// Step 3: Connect to FTP and deploy file list
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 			// Step 4: Post to URL that deployment is done
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 			// END PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 			// Step 1: Notify people
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 			// Step 2: Delete files
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 			// Step 3: Change status to DEPLOYED
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 			$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 		protected function deploy( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 			// Step #1: Change status to PROCESSING.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 			if ( get_post_meta( $deploymentID, StatusMetaField::NAME, TRUE ) == StatusMetaField::ERROR ) return FALSE;
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 			else update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::PROCESSING );
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 			$currentDeploymentStage = get_post_meta( $deploymentID, DeploymentStageMetaField::NAME, TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 			switch ( $currentDeploymentStage )
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 				case DeploymentStageMetaField::CLONING:
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 					// Step #3: Fetch changed files, connect to FTP and upload.
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 					// Keep in mind: All files if 'deploy from scratch is ticked'
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 					// Keep in mind: Is repository path submitted?
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 					// If no revision is submitted, set it now to the latest
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 					// If no comment is submitted, set it now to the latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 					$revision       = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>102</span> 					$comment        = $this-&gt;getComment( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 					$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $this-&gt;getRepositoryID( $deploymentID ) );
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 					if ( empty($revision) )
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log --pretty=format:'%H' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 						$revision = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 					if ( empty($comment) )
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log $revision --pretty=format:'%s' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 						$comment = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), $comment );
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 					// OK ready to upload
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::UPLOADING );
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 					$this-&gt;upload( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 				case DeploymentStageMetaField::UPLOADING:
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 					// Step #4: Cleanup. Delete files.
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 					// Step #5: Notify people.
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 					$this-&gt;notify( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 					// Step #6: Update webhook revision.
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 					$revision  = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 					$webhookID = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 					update_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 					// Step #7: Change status to OK / DONE.
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::DONE );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::OK );
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 					// Step #2: Clone.
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::CLONING );
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 					$this-&gt;gitClone( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 		public function getComment( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>166</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 		public function getRevision( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>170</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>171</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>173</span> 
</code></pre><pre class=''><code><span class='LineNumber'>174</span> 		public function getWebhookID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>176</span> 			return intval( get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>177</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 		public function getRepositoryID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 			return intval( get_post_meta( $this-&gt;getWebhookID( $deploymentID ), GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitRepositoryPostType::NAME ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 		protected function cleanUp( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 		protected function notify( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 		protected function gitClone( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 			$repositoryID   = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 			$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 			$gitSSHURL      = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::ADDRESS ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 			$branch         = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::BRANCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 			$keyID          = apply_filters( GitRepositoryProxy::FILTER_KEY_ID, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 			$keyPath        = GitKeyProxy::locatePrivateSSHKey( $keyID );
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 			$keyPassphrase  = get_post_meta( $keyID, GitKeyMetaBox::constructMetaKey( GitKeyMetaBox::NAME, GitKeyMetaBox::PASSPHRASE ) );
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>205</span> //			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID &gt; /dev/null &amp; echo $!&quot;, $pid, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>206</span> //			update_post_meta( $deploymentID, PIDMetaField::NAME, $pid );
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 			var_dump( $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 		protected function upload( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 			$webhookID         = $this-&gt;getWebhookID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 			$repositoryID      = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 			$repositoryPath    = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 			$revision          = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 			$fromPath          = get_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::GIT_REPOSITORY_PATH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 			$deployFromScratch = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::DEPLOY_FROM_SCRATCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) . &quot; $repositoryPath $revision $fromPath $deployFromScratch&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 			update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::FILE_LIST ), implode( &quot;\n&quot;, $output ) );
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 		/* POST ACTION HOOKS */
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 		protected function onPostAction()
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 			$deploymentID = $_POST[ 'objectID' ];
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 			$exitCode     = $_POST[ 'exitCode' ];
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 			switch ( intval( $exitCode ) )
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 				case 0:
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 					// Current process was successful. Continue deployment.
</code></pre><pre class=''><code><span class='LineNumber'>236</span> 					$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>239</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>240</span> 
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 					// Current process was NOT successful. Interrupt deployment and cleanup.
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::ERROR );
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 			exit;
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/model/deploy/GitDeployProxy.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 28/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 21:47
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\Proxy;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class GitDeployProxy extends Proxy
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 		const NAME        = __CLASS__;
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		const ACTION_ADD  = &quot;gitmodule/model/GitDeployProxy/add&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		const POST_ACTION = &quot;gitmodule/model/GitDeployProxy/post&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		function onRegister()
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 			add_action( self::ACTION_ADD, array($this, &quot;add&quot;), 0, 1 );
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 			if ( isset($_POST[ 'action' ]) )
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 				switch ( $_POST[ 'action' ] )
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 				{
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 					case self::POST_ACTION:
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 						$this-&gt;onPostAction();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 						break;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		function add( $deploymentID, $key = NULL, $override = FALSE )
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			// CHECK
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Is this item deploying? If not: continue. If yes: Return conflict message.
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$currentStatus = get_post_meta( $deploymentID, StatusMetaField::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			switch ( $currentStatus )
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 				case StatusMetaField::PROCESSING:
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 					die(__( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ));
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 					return new WP_Error( 'error', __( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ) );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 			// Is revision submitted? If not: fetch latest revision. If yes: Is the revision submitted valid?
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 			// Is comment submitted? If not: fetch latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 			// Step 0: Change status to DEPLOYING / PROCESSING
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 			// Step 1: Clone git
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 			// Step 2: Fetch file list (all files if deploy from scratch, else list changes) (Is repository path submitted?)
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 			// Step 3: Connect to FTP and deploy file list
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 			// Step 4: Post to URL that deployment is done
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 			// END PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 			// Step 1: Notify people
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 			// Step 2: Delete files
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 			// Step 3: Change status to DEPLOYED
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 			$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 		protected function deploy( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 			// Step #1: Change status to PROCESSING.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 			if ( get_post_meta( $deploymentID, StatusMetaField::NAME, TRUE ) == StatusMetaField::ERROR ) return FALSE;
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 			else update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::PROCESSING );
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 			$currentDeploymentStage = get_post_meta( $deploymentID, DeploymentStageMetaField::NAME, TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 			switch ( $currentDeploymentStage )
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 				case DeploymentStageMetaField::CLONING:
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 					// Step #3: Fetch changed files, connect to FTP and upload.
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 					// Keep in mind: All files if 'deploy from scratch is ticked'
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 					// Keep in mind: Is repository path submitted?
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 					// If no revision is submitted, set it now to the latest
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 					// If no comment is submitted, set it now to the latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 					$revision       = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 					$comment        = $this-&gt;getComment( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 					$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $this-&gt;getRepositoryID( $deploymentID ) );
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 					if ( empty($revision) )
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log --pretty=format:'%H' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 						$revision = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 					if ( empty($comment) )
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log $revision --pretty=format:'%s' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 						$comment = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), $comment );
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 					// OK ready to upload
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::UPLOADING );
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 					$this-&gt;upload( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 				case DeploymentStageMetaField::UPLOADING:
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 					// Step #4: Cleanup. Delete files.
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 					// Step #5: Notify people.
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 					$this-&gt;notify( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 					// Step #6: Update webhook revision.
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 					$revision  = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 					$webhookID = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 					update_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 					// Step #7: Change status to OK / DONE.
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::DONE );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::OK );
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 					// Step #2: Clone.
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::CLONING );
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 					$this-&gt;gitClone( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 		public function getComment( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>166</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 		public function getRevision( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>170</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>171</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>173</span> 
</code></pre><pre class=''><code><span class='LineNumber'>174</span> 		public function getWebhookID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>176</span> 			return intval( get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>177</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 		public function getRepositoryID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 			return intval( get_post_meta( $this-&gt;getWebhookID( $deploymentID ), GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitRepositoryPostType::NAME ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 		protected function cleanUp( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 		protected function notify( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 		protected function gitClone( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 			$repositoryID   = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 			$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 			$gitSSHURL      = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::ADDRESS ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 			$branch         = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::BRANCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 			$keyID          = apply_filters( GitRepositoryProxy::FILTER_KEY_ID, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 			$keyPath        = GitKeyProxy::locatePrivateSSHKey( $keyID );
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 			$keyPassphrase  = get_post_meta( $keyID, GitKeyMetaBox::constructMetaKey( GitKeyMetaBox::NAME, GitKeyMetaBox::PASSPHRASE ) );
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>205</span> //			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID &gt; /dev/null &amp; echo $!&quot;, $pid, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>206</span> //			update_post_meta( $deploymentID, PIDMetaField::NAME, $pid );
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 			var_dump( $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 		protected function upload( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 			$webhookID         = $this-&gt;getWebhookID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 			$repositoryID      = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 			$repositoryPath    = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 			$revision          = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 			$fromPath          = get_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::GIT_REPOSITORY_PATH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 			$deployFromScratch = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::DEPLOY_FROM_SCRATCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) . &quot; $repositoryPath $revision $fromPath $deployFromScratch&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 			update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::FILE_LIST ), implode( &quot;\n&quot;, $output ) );
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 		/* POST ACTION HOOKS */
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 		protected function onPostAction()
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 			$deploymentID = $_POST[ 'objectID' ];
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 			$exitCode     = $_POST[ 'exitCode' ];
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 			switch ( intval( $exitCode ) )
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 				case 0:
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 					// Current process was successful. Continue deployment.
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>236</span> 					$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>239</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>240</span> 
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 					// Current process was NOT successful. Interrupt deployment and cleanup.
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::ERROR );
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 			exit;
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/model/deploy/GitDeployProxy.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 28/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 21:47
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\Proxy;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class GitDeployProxy extends Proxy
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 		const NAME        = __CLASS__;
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		const ACTION_ADD  = &quot;gitmodule/model/GitDeployProxy/add&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		const POST_ACTION = &quot;gitmodule/model/GitDeployProxy/post&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		function onRegister()
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 			add_action( self::ACTION_ADD, array($this, &quot;add&quot;), 0, 1 );
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 			if ( isset($_POST[ 'action' ]) )
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 				switch ( $_POST[ 'action' ] )
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 				{
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 					case self::POST_ACTION:
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>36</span> 						$this-&gt;onPostAction();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 						break;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 				}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		function add( $deploymentID, $key = NULL, $override = FALSE )
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			// CHECK
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Is this item deploying? If not: continue. If yes: Return conflict message.
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$currentStatus = get_post_meta( $deploymentID, StatusMetaField::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			switch ( $currentStatus )
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 				case StatusMetaField::PROCESSING:
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 					die(__( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ));
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 					return new WP_Error( 'error', __( &quot;This webhook has already been triggered and is currently processing.&quot;, TutoMVC::NAME ) );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 			// Is revision submitted? If not: fetch latest revision. If yes: Is the revision submitted valid?
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 			// Is comment submitted? If not: fetch latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 			// Step 0: Change status to DEPLOYING / PROCESSING
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 			// Step 1: Clone git
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 			// Step 2: Fetch file list (all files if deploy from scratch, else list changes) (Is repository path submitted?)
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 			// Step 3: Connect to FTP and deploy file list
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 			// Step 4: Post to URL that deployment is done
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 			// END PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 			// Step 1: Notify people
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 			// Step 2: Delete files
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 			// Step 3: Change status to DEPLOYED
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 			$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 		protected function deploy( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 			// PROCESS
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 			// Step #1: Change status to PROCESSING.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 			/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 			if ( get_post_meta( $deploymentID, StatusMetaField::NAME, TRUE ) == StatusMetaField::ERROR ) return FALSE;
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 			else update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::PROCESSING );
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 			$currentDeploymentStage = get_post_meta( $deploymentID, DeploymentStageMetaField::NAME, TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 			switch ( $currentDeploymentStage )
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 				case DeploymentStageMetaField::CLONING:
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 					// Step #3: Fetch changed files, connect to FTP and upload.
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 					// Keep in mind: All files if 'deploy from scratch is ticked'
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 					// Keep in mind: Is repository path submitted?
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>99</span> 					// If no revision is submitted, set it now to the latest
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 					// If no comment is submitted, set it now to the latest commit message
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 					$revision       = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 					$comment        = $this-&gt;getComment( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 					$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $this-&gt;getRepositoryID( $deploymentID ) );
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 					if ( empty($revision) )
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log --pretty=format:'%H' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 						$revision = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 					if ( empty($comment) )
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 					{
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 						exec( &quot;cd $repositoryPath &amp;&amp; git log $revision --pretty=format:'%s' -n 1&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 						$comment = implode( &quot;&quot;, $output );
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 						update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), $comment );
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 					}
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 					// OK ready to upload
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::UPLOADING );
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 					$this-&gt;upload( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 				case DeploymentStageMetaField::UPLOADING:
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 					// Step #4: Cleanup. Delete files.
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 					// Step #5: Notify people.
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 					$this-&gt;notify( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 					// Step #6: Update webhook revision.
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 					$revision  = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 					$webhookID = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 					update_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::REVISION ), $revision );
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>142</span> 					// Step #7: Change status to OK / DONE.
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::DONE );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::OK );
</code></pre><pre class=''><code><span class='LineNumber'>146</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>147</span> 
</code></pre><pre class=''><code><span class='LineNumber'>148</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>149</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>150</span> 
</code></pre><pre class=''><code><span class='LineNumber'>151</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>152</span> 					// Step #2: Clone.
</code></pre><pre class=''><code><span class='LineNumber'>153</span> 					/////////////////////////////////////////////////////////////////////////////////////////////////////////
</code></pre><pre class=''><code><span class='LineNumber'>154</span> 					update_post_meta( $deploymentID, DeploymentStageMetaField::NAME, DeploymentStageMetaField::CLONING );
</code></pre><pre class=''><code><span class='LineNumber'>155</span> 
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 					$this-&gt;gitClone( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>157</span> 
</code></pre><pre class=''><code><span class='LineNumber'>158</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 			return TRUE;
</code></pre><pre class=''><code><span class='LineNumber'>162</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>164</span> 		public function getComment( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>165</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>166</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::COMMENT ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>168</span> 
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 		public function getRevision( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>170</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>171</span> 			return get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::REVISION ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>173</span> 
</code></pre><pre class=''><code><span class='LineNumber'>174</span> 		public function getWebhookID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>176</span> 			return intval( get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::GIT_WEBHOOK ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>177</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 		public function getRepositoryID( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 			return intval( get_post_meta( $this-&gt;getWebhookID( $deploymentID ), GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitRepositoryPostType::NAME ), TRUE ) );
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 		protected function cleanUp( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 		protected function notify( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 		protected function gitClone( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 			$repositoryID   = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 			$repositoryPath = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 			$gitSSHURL      = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::ADDRESS ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 			$branch         = get_post_meta( $repositoryID, GitRepositoryMetaBox::constructMetaKey( GitRepositoryMetaBox::NAME, GitRepositoryMetaBox::BRANCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 			$keyID          = apply_filters( GitRepositoryProxy::FILTER_KEY_ID, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 			$keyPath        = GitKeyProxy::locatePrivateSSHKey( $keyID );
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 			$keyPassphrase  = get_post_meta( $keyID, GitKeyMetaBox::constructMetaKey( GitKeyMetaBox::NAME, GitKeyMetaBox::PASSPHRASE ) );
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>205</span> //			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID &gt; /dev/null &amp; echo $!&quot;, $pid, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>206</span> //			update_post_meta( $deploymentID, PIDMetaField::NAME, $pid );
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-clone.sh&quot; ) . &quot; $repositoryPath $gitSSHURL $branch $keyPath $keyPassphrase $deploymentID&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 			var_dump( $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 		protected function upload( $deploymentID )
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 			$webhookID         = $this-&gt;getWebhookID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 			$repositoryID      = $this-&gt;getRepositoryID( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 			$repositoryPath    = apply_filters( GitRepositoryProxy::FILTER_LOCATE_REPOSITORY, $repositoryID );
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 			$revision          = $this-&gt;getRevision( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 			$fromPath          = get_post_meta( $webhookID, GitWebhookMetaBox::constructMetaKey( GitWebhookMetaBox::NAME, GitWebhookMetaBox::GIT_REPOSITORY_PATH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 			$deployFromScratch = get_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::DEPLOY_FROM_SCRATCH ), TRUE );
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 			exec( &quot;chmod +x &quot; . $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) );
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 			exec( $this-&gt;getSystem()-&gt;getVO()-&gt;getRoot( &quot;src/shell/git-deploy.sh&quot; ) . &quot; $repositoryPath $revision $fromPath $deployFromScratch&quot;, $output, $returnVar );
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 			update_post_meta( $deploymentID, GitDeployMetaBox::constructMetaKey( GitDeployMetaBox::NAME, GitDeployMetaBox::FILE_LIST ), implode( &quot;\n&quot;, $output ) );
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>224</span> 
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 		/* POST ACTION HOOKS */
</code></pre><pre class=''><code><span class='LineNumber'>226</span> 		protected function onPostAction()
</code></pre><pre class=''><code><span class='LineNumber'>227</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 			$deploymentID = $_POST[ 'objectID' ];
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 			$exitCode     = $_POST[ 'exitCode' ];
</code></pre><pre class=''><code><span class='LineNumber'>230</span> 
</code></pre><pre class=''><code><span class='LineNumber'>231</span> 			switch ( intval( $exitCode ) )
</code></pre><pre class=''><code><span class='LineNumber'>232</span> 			{
</code></pre><pre class=''><code><span class='LineNumber'>233</span> 				case 0:
</code></pre><pre class=''><code><span class='LineNumber'>234</span> 
</code></pre><pre class=''><code><span class='LineNumber'>235</span> 					// Current process was successful. Continue deployment.
</code></pre><pre class=''><code><span class='LineNumber'>236</span> 					$this-&gt;deploy( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>237</span> 
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>239</span> 				default:
</code></pre><pre class=''><code><span class='LineNumber'>240</span> 
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 					// Current process was NOT successful. Interrupt deployment and cleanup.
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 					update_post_meta( $deploymentID, StatusMetaField::NAME, StatusMetaField::ERROR );
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 					$this-&gt;cleanUp( $deploymentID );
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 					break;
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 			exit;
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/core/model/Model.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> namespace tutomvc;
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4</span> class Model
</code></pre><pre class=''><code><span class='LineNumber'>5</span> {
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	/* PROTECTED VARS */
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	protected $_facadeKey;
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	protected $_proxyMap = array();
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	protected static $_instanceMap = array();
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	public function __construct( $key )
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 		if( array_key_exists( $key, $this::$_instanceMap ) ) die( &quot;ERROR! A Model with that particular namespace already exists.&quot; );
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		$this::$_instanceMap[ $key ] = $this;
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 		$this-&gt;_facadeKey = $key;
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 	
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 	/* PUBLIC STATIC METHODS */
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 	public static function getInstance( $key )
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 		if( !array_key_exists($key, self::$_instanceMap) ) self::$_instanceMap[ $key ] = new Model( $key );
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 		
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 		return self::$_instanceMap[ $key ];
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 	/* PUBLIC METHODS */
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 	public function registerProxy( $proxy )
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 		$proxy-&gt;initializeFacadeKey( $this-&gt;_facadeKey );
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 		$this-&gt;_proxyMap[ $proxy-&gt;getName() ] = $proxy;
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>36</span> 		$proxy-&gt;onRegister();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 		return $proxy;
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 	public function getProxy( $name )
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 		return $this-&gt;hasProxy($name) ? $this-&gt;_proxyMap[$name] : NULL;
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 	public function hasProxy( $name )
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 		return isset ($this-&gt;_proxyMap[ $name ] );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>50</span> }</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/controller/InitAction.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 17/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 09:48
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\ActionCommand;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class InitAction extends ActionCommand
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 		const NAME = &quot;init&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 		function execute()
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 			$this-&gt;prepModel();
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 			$this-&gt;prepView();
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 			$this-&gt;prepController();
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 		private function prepModel()
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 			// SSH Key
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitKeyPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitKeyMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitKeyProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 			// Server
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new ServerPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new ServerMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new ServerProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 			// Repository
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitRepositoryPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitRepositoryMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitRepositoryProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Webhook
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitWebhookPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitWebhookMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitWebhookProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 			// Deploy
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitDeployPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitDeployMetaBox() );
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>55</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitDeployProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 		private function prepView()
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 		private function prepController()
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/system/modules/git/controller/InitAction.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 	 * Created by PhpStorm.
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 	 * User: johannesbuvnas
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 	 * Date: 17/11/14
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	 * Time: 09:48
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	namespace tutomvc\modules\git;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	use tutomvc\ActionCommand;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	use tutomvc\TutoMVC;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	class InitAction extends ActionCommand
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 		const NAME = &quot;init&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		function __construct()
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 			parent::__construct( self::NAME );
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 		function execute()
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 		{
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>25</span> 			$this-&gt;prepModel();
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 			$this-&gt;prepView();
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 			$this-&gt;prepController();
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 		private function prepModel()
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 			// SSH Key
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitKeyPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitKeyMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitKeyProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 			// Server
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new ServerPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new ServerMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new ServerProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 			// Repository
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitRepositoryPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitRepositoryMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitRepositoryProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 			// Webhook
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitWebhookPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitWebhookMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitWebhookProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 			// Deploy
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 			$this-&gt;getSystem()-&gt;postTypeCenter-&gt;add( new GitDeployPostType() );
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 			$this-&gt;getSystem()-&gt;metaCenter-&gt;add( new GitDeployMetaBox() );
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 			$this-&gt;getFacade()-&gt;model-&gt;registerProxy( new GitDeployProxy() );
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 		private function prepView()
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 		private function prepController()
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 		{
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 	}</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-content/plugins/tutomvc/src/php/core/controller/command/Command.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> namespace tutomvc;
</code></pre><pre class=''><code><span class='LineNumber'>3</span> 
</code></pre><pre class=''><code><span class='LineNumber'>4</span> class Command extends CoreClass implements ICommand
</code></pre><pre class=''><code><span class='LineNumber'>5</span> {
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 	const NAME = &quot;&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 	/* VARS */
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 	public $registered = FALSE;
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 	protected $_name;
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 	protected $_executionLimit = -1;
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 	protected $_executions = 0;
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 	protected $_args;
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 	function __construct( $name = NULL )
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>18</span> 		$this-&gt;setName( $name );
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 
</code></pre><pre class=''><code><span class='LineNumber'>22</span> 	/* PUBLIC METHODS */
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 	* Override.
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 	*/
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 	public function register()
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 	* Override.
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 	*/
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 	public function execute()
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 	public function remove()
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 		
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 	public function setName( $name )
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 		$this-&gt;_name = is_null( $name ) ? $this::NAME : $name;
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 	public function getName()
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 		return $this-&gt;_name;
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 	public function setExecutionLimit( $limit )
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 		$this-&gt;_executionLimit = $limit;
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 	public function getExecutionLimit()
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 		return $this-&gt;_executionLimit;
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 	public function getExecutionCount()
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 		return $this-&gt;_executions;
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 	public function hasReachedExecutionLimit()
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 		return $this-&gt;_executionLimit &gt; -1 &amp;&amp; $this-&gt;_executions &gt;= $this-&gt;_executionLimit;
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 	* Get arguments parsed when executed.
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 	*/
</code></pre><pre class=''><code><span class='LineNumber'>75</span> 	protected function getArgs()
</code></pre><pre class=''><code><span class='LineNumber'>76</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 		return $this-&gt;_args;
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 	protected function getArg( $index )
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>81</span> 		return array_key_exists($index, $this-&gt;_args) ? $this-&gt;_args[$index] : NULL;
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 	/**
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 	*	Do not override.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 	*/
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 	public function preExecution()
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 	{
</code></pre><pre class=''><code><span class='LineNumber'>89</span> 		if( $this-&gt;hasReachedExecutionLimit() ) return;
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 		$this-&gt;_executions++;
</code></pre><pre class=''><code><span class='LineNumber'>92</span> 		$this-&gt;_args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>94</span> 		return call_user_func_array( array( $this, &quot;execute&quot; ), func_get_args() );
</code></pre><pre class=''><code><span class='LineNumber'>95</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>96</span> }
</code></pre><pre class=''><code><span class='LineNumber'>97</span> 
</code></pre><pre class=''><code><span class='LineNumber'>98</span> interface ICommand
</code></pre><pre class=''><code><span class='LineNumber'>99</span> {
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 	public function setName( $name );
</code></pre><pre class=''><code><span class='LineNumber'>101</span> 	public function getName();
</code></pre><pre class=''><code><span class='LineNumber'>102</span> 	public function register();
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 	public function setExecutionLimit( $limit );
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 	public function getExecutionLimit();
</code></pre><pre class=''><code><span class='LineNumber'>105</span> 	public function getExecutionCount();
</code></pre><pre class=''><code><span class='LineNumber'>106</span> 	public function hasReachedExecutionLimit();
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 	public function preExecution();
</code></pre><pre class=''><code><span class='LineNumber'>108</span> }</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-includes/plugin.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * The plugin API is located in this file, which allows for creating actions
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  * and filters and hooking functions, and methods. The functions or methods will
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  * then be run when the action or filter is called.
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  * The API callback examples reference functions, but can be methods of classes.
</code></pre><pre class=''><code><span class='LineNumber'>8</span>  * To hook methods, you'll need to pass an array one of two ways.
</code></pre><pre class=''><code><span class='LineNumber'>9</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * Any of the syntaxes explained in the PHP documentation for the
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  * {@link http://us2.php.net/manual/en/language.pseudo-types.php#language.types.callback 'callback'}
</code></pre><pre class=''><code><span class='LineNumber'>12</span>  * type are valid.
</code></pre><pre class=''><code><span class='LineNumber'>13</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>14</span>  * Also see the {@link http://codex.wordpress.org/Plugin_API Plugin API} for
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  * more information and examples on how to use a lot of these functions.
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>18</span>  * @subpackage Plugin
</code></pre><pre class=''><code><span class='LineNumber'>19</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>20</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>21</span> 
</code></pre><pre class=''><code><span class='LineNumber'>22</span> // Initialize the filter globals.
</code></pre><pre class=''><code><span class='LineNumber'>23</span> global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>24</span> 
</code></pre><pre class=''><code><span class='LineNumber'>25</span> if ( ! isset( $wp_filter ) )
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 	$wp_filter = array();
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 
</code></pre><pre class=''><code><span class='LineNumber'>28</span> if ( ! isset( $wp_actions ) )
</code></pre><pre class=''><code><span class='LineNumber'>29</span> 	$wp_actions = array();
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 
</code></pre><pre class=''><code><span class='LineNumber'>31</span> if ( ! isset( $merged_filters ) )
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 	$merged_filters = array();
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 
</code></pre><pre class=''><code><span class='LineNumber'>34</span> if ( ! isset( $wp_current_filter ) )
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 	$wp_current_filter = array();
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 
</code></pre><pre class=''><code><span class='LineNumber'>37</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>38</span>  * Hook a function or method to a specific filter action.
</code></pre><pre class=''><code><span class='LineNumber'>39</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>40</span>  * WordPress offers filter hooks to allow plugins to modify
</code></pre><pre class=''><code><span class='LineNumber'>41</span>  * various types of internal data at runtime.
</code></pre><pre class=''><code><span class='LineNumber'>42</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>43</span>  * A plugin can modify data by binding a callback to a filter hook. When the filter
</code></pre><pre class=''><code><span class='LineNumber'>44</span>  * is later applied, each bound callback is run in order of priority, and given
</code></pre><pre class=''><code><span class='LineNumber'>45</span>  * the opportunity to modify a value by returning a new value.
</code></pre><pre class=''><code><span class='LineNumber'>46</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>47</span>  * The following example shows how a callback function is bound to a filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>48</span>  * Note that $example is passed to the callback, (maybe) modified, then returned:
</code></pre><pre class=''><code><span class='LineNumber'>49</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>50</span>  * &lt;code&gt;
</code></pre><pre class=''><code><span class='LineNumber'>51</span>  * function example_callback( $example ) {
</code></pre><pre class=''><code><span class='LineNumber'>52</span>  * 	// Maybe modify $example in some way
</code></pre><pre class=''><code><span class='LineNumber'>53</span>  * 	return $example;
</code></pre><pre class=''><code><span class='LineNumber'>54</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>55</span>  * add_filter( 'example_filter', 'example_callback' );
</code></pre><pre class=''><code><span class='LineNumber'>56</span>  * &lt;/code&gt;
</code></pre><pre class=''><code><span class='LineNumber'>57</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>58</span>  * Since WordPress 1.5.1, bound callbacks can take as many arguments as are
</code></pre><pre class=''><code><span class='LineNumber'>59</span>  * passed as parameters in the corresponding apply_filters() call. The $accepted_args
</code></pre><pre class=''><code><span class='LineNumber'>60</span>  * parameter allows for calling functions only when the number of args match.
</code></pre><pre class=''><code><span class='LineNumber'>61</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>62</span>  * &lt;strong&gt;Note:&lt;/strong&gt; the function will return true whether or not the callback
</code></pre><pre class=''><code><span class='LineNumber'>63</span>  * is valid. It is up to you to take care. This is done for optimization purposes,
</code></pre><pre class=''><code><span class='LineNumber'>64</span>  * so everything is as quick as possible.
</code></pre><pre class=''><code><span class='LineNumber'>65</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>66</span>  * @since 0.71
</code></pre><pre class=''><code><span class='LineNumber'>67</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>68</span>  * @global array $wp_filter      A multidimensional array of all hooks and the callbacks hooked to them.
</code></pre><pre class=''><code><span class='LineNumber'>69</span>  * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added,
</code></pre><pre class=''><code><span class='LineNumber'>70</span>  *                               it doesn't need to run through that process.
</code></pre><pre class=''><code><span class='LineNumber'>71</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>72</span>  * @param string   $tag             The name of the filter to hook the $function_to_add callback to.
</code></pre><pre class=''><code><span class='LineNumber'>73</span>  * @param callback $function_to_add The callback to be run when the filter is applied.
</code></pre><pre class=''><code><span class='LineNumber'>74</span>  * @param int      $priority        Optional. Used to specify the order in which the functions
</code></pre><pre class=''><code><span class='LineNumber'>75</span>  *                                  associated with a particular action are executed. Default 10.
</code></pre><pre class=''><code><span class='LineNumber'>76</span>  *                                  Lower numbers correspond with earlier execution,
</code></pre><pre class=''><code><span class='LineNumber'>77</span>  *                                  and functions with the same priority are executed
</code></pre><pre class=''><code><span class='LineNumber'>78</span>  *                                  in the order in which they were added to the action.
</code></pre><pre class=''><code><span class='LineNumber'>79</span>  * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.
</code></pre><pre class=''><code><span class='LineNumber'>80</span>  * @return boolean true
</code></pre><pre class=''><code><span class='LineNumber'>81</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>82</span> function add_filter( $tag, $function_to_add, $priority = 10, $accepted_args = 1 ) {
</code></pre><pre class=''><code><span class='LineNumber'>83</span> 	global $wp_filter, $merged_filters;
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);
</code></pre><pre class=''><code><span class='LineNumber'>86</span> 	$wp_filter[$tag][$priority][$idx] = array('function' =&gt; $function_to_add, 'accepted_args' =&gt; $accepted_args);
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 	unset( $merged_filters[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 	return true;
</code></pre><pre class=''><code><span class='LineNumber'>89</span> }
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 
</code></pre><pre class=''><code><span class='LineNumber'>91</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>92</span>  * Check if any filter has been registered for a hook.
</code></pre><pre class=''><code><span class='LineNumber'>93</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>94</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>95</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>96</span>  * @global array $wp_filter Stores all of the filters.
</code></pre><pre class=''><code><span class='LineNumber'>97</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>98</span>  * @param string        $tag               The name of the filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>99</span>  * @param callback|bool $function_to_check Optional. The callback to check for. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>100</span>  * @return bool|int If $function_to_check is omitted, returns boolean for whether the hook has
</code></pre><pre class=''><code><span class='LineNumber'>101</span>  *                  anything registered. When checking a specific function, the priority of that
</code></pre><pre class=''><code><span class='LineNumber'>102</span>  *                  hook is returned, or false if the function is not attached. When using the
</code></pre><pre class=''><code><span class='LineNumber'>103</span>  *                  $function_to_check argument, this function may return a non-boolean value
</code></pre><pre class=''><code><span class='LineNumber'>104</span>  *                  that evaluates to false (e.g.) 0, so use the === operator for testing the
</code></pre><pre class=''><code><span class='LineNumber'>105</span>  *                  return value.
</code></pre><pre class=''><code><span class='LineNumber'>106</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>107</span> function has_filter($tag, $function_to_check = false) {
</code></pre><pre class=''><code><span class='LineNumber'>108</span> 	// Don't reset the internal array pointer
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 	$wp_filter = $GLOBALS['wp_filter'];
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 	$has = ! empty( $wp_filter[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>112</span> 
</code></pre><pre class=''><code><span class='LineNumber'>113</span> 	// Make sure at least one priority has a filter callback
</code></pre><pre class=''><code><span class='LineNumber'>114</span> 	if ( $has ) {
</code></pre><pre class=''><code><span class='LineNumber'>115</span> 		$exists = false;
</code></pre><pre class=''><code><span class='LineNumber'>116</span> 		foreach ( $wp_filter[ $tag ] as $callbacks ) {
</code></pre><pre class=''><code><span class='LineNumber'>117</span> 			if ( ! empty( $callbacks ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>118</span> 				$exists = true;
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 				break;
</code></pre><pre class=''><code><span class='LineNumber'>120</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>121</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>122</span> 
</code></pre><pre class=''><code><span class='LineNumber'>123</span> 		if ( ! $exists ) {
</code></pre><pre class=''><code><span class='LineNumber'>124</span> 			$has = false;
</code></pre><pre class=''><code><span class='LineNumber'>125</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>126</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>127</span> 
</code></pre><pre class=''><code><span class='LineNumber'>128</span> 	if ( false === $function_to_check || false == $has )
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 		return $has;
</code></pre><pre class=''><code><span class='LineNumber'>130</span> 
</code></pre><pre class=''><code><span class='LineNumber'>131</span> 	if ( !$idx = _wp_filter_build_unique_id($tag, $function_to_check, false) )
</code></pre><pre class=''><code><span class='LineNumber'>132</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>133</span> 
</code></pre><pre class=''><code><span class='LineNumber'>134</span> 	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {
</code></pre><pre class=''><code><span class='LineNumber'>135</span> 		if ( isset($wp_filter[$tag][$priority][$idx]) )
</code></pre><pre class=''><code><span class='LineNumber'>136</span> 			return $priority;
</code></pre><pre class=''><code><span class='LineNumber'>137</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 
</code></pre><pre class=''><code><span class='LineNumber'>139</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>140</span> }
</code></pre><pre class=''><code><span class='LineNumber'>141</span> 
</code></pre><pre class=''><code><span class='LineNumber'>142</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>143</span>  * Call the functions added to a filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>144</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>145</span>  * The callback functions attached to filter hook $tag are invoked by calling
</code></pre><pre class=''><code><span class='LineNumber'>146</span>  * this function. This function can be used to create a new filter hook by
</code></pre><pre class=''><code><span class='LineNumber'>147</span>  * simply calling this function with the name of the new hook specified using
</code></pre><pre class=''><code><span class='LineNumber'>148</span>  * the $tag parameter.
</code></pre><pre class=''><code><span class='LineNumber'>149</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>150</span>  * The function allows for additional arguments to be added and passed to hooks.
</code></pre><pre class=''><code><span class='LineNumber'>151</span>  * &lt;code&gt;
</code></pre><pre class=''><code><span class='LineNumber'>152</span>  * // Our filter callback function
</code></pre><pre class=''><code><span class='LineNumber'>153</span>  * function example_callback( $string, $arg1, $arg2 ) {
</code></pre><pre class=''><code><span class='LineNumber'>154</span>  *	// (maybe) modify $string
</code></pre><pre class=''><code><span class='LineNumber'>155</span>  *	return $string;
</code></pre><pre class=''><code><span class='LineNumber'>156</span>  * }
</code></pre><pre class=''><code><span class='LineNumber'>157</span>  * add_filter( 'example_filter', 'example_callback', 10, 3 );
</code></pre><pre class=''><code><span class='LineNumber'>158</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>159</span>  * // Apply the filters by calling the 'example_callback' function we
</code></pre><pre class=''><code><span class='LineNumber'>160</span>  * // &quot;hooked&quot; to 'example_filter' using the add_filter() function above.
</code></pre><pre class=''><code><span class='LineNumber'>161</span>  * // - 'example_filter' is the filter hook $tag
</code></pre><pre class=''><code><span class='LineNumber'>162</span>  * // - 'filter me' is the value being filtered
</code></pre><pre class=''><code><span class='LineNumber'>163</span>  * // - $arg1 and $arg2 are the additional arguments passed to the callback.
</code></pre><pre class=''><code><span class='LineNumber'>164</span>  * $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );
</code></pre><pre class=''><code><span class='LineNumber'>165</span>  * &lt;/code&gt;
</code></pre><pre class=''><code><span class='LineNumber'>166</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>167</span>  * @since 0.71
</code></pre><pre class=''><code><span class='LineNumber'>168</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>169</span>  * @global array $wp_filter         Stores all of the filters.
</code></pre><pre class=''><code><span class='LineNumber'>170</span>  * @global array $merged_filters    Merges the filter hooks using this function.
</code></pre><pre class=''><code><span class='LineNumber'>171</span>  * @global array $wp_current_filter Stores the list of current filters with the current one last.
</code></pre><pre class=''><code><span class='LineNumber'>172</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>173</span>  * @param string $tag   The name of the filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>174</span>  * @param mixed  $value The value on which the filters hooked to &lt;tt&gt;$tag&lt;/tt&gt; are applied on.
</code></pre><pre class=''><code><span class='LineNumber'>175</span>  * @param mixed  $var   Additional variables passed to the functions hooked to &lt;tt&gt;$tag&lt;/tt&gt;.
</code></pre><pre class=''><code><span class='LineNumber'>176</span>  * @return mixed The filtered value after all hooked functions are applied to it.
</code></pre><pre class=''><code><span class='LineNumber'>177</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>178</span> function apply_filters( $tag, $value ) {
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 	global $wp_filter, $merged_filters, $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 	$args = array();
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 
</code></pre><pre class=''><code><span class='LineNumber'>183</span> 	// Do 'all' actions first.
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 	if ( isset($wp_filter['all']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>185</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>186</span> 		$args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>187</span> 		_wp_call_all_hook($args);
</code></pre><pre class=''><code><span class='LineNumber'>188</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>189</span> 
</code></pre><pre class=''><code><span class='LineNumber'>190</span> 	if ( !isset($wp_filter[$tag]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 		if ( isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>192</span> 			array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 		return $value;
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>195</span> 
</code></pre><pre class=''><code><span class='LineNumber'>196</span> 	if ( !isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>198</span> 
</code></pre><pre class=''><code><span class='LineNumber'>199</span> 	// Sort.
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 	if ( !isset( $merged_filters[ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>201</span> 		ksort($wp_filter[$tag]);
</code></pre><pre class=''><code><span class='LineNumber'>202</span> 		$merged_filters[ $tag ] = true;
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>204</span> 
</code></pre><pre class=''><code><span class='LineNumber'>205</span> 	reset( $wp_filter[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>206</span> 
</code></pre><pre class=''><code><span class='LineNumber'>207</span> 	if ( empty($args) )
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 		$args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>209</span> 
</code></pre><pre class=''><code><span class='LineNumber'>210</span> 	do {
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 		foreach( (array) current($wp_filter[$tag]) as $the_ )
</code></pre><pre class=''><code><span class='LineNumber'>212</span> 			if ( !is_null($the_['function']) ){
</code></pre><pre class=''><code><span class='LineNumber'>213</span> 				$args[1] = $value;
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>216</span> 
</code></pre><pre class=''><code><span class='LineNumber'>217</span> 	} while ( next($wp_filter[$tag]) !== false );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 
</code></pre><pre class=''><code><span class='LineNumber'>219</span> 	array_pop( $wp_current_filter );
</code></pre><pre class=''><code><span class='LineNumber'>220</span> 
</code></pre><pre class=''><code><span class='LineNumber'>221</span> 	return $value;
</code></pre><pre class=''><code><span class='LineNumber'>222</span> }
</code></pre><pre class=''><code><span class='LineNumber'>223</span> 
</code></pre><pre class=''><code><span class='LineNumber'>224</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>225</span>  * Execute functions hooked on a specific filter hook, specifying arguments in an array.
</code></pre><pre class=''><code><span class='LineNumber'>226</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>227</span>  * @see apply_filters() This function is identical, but the arguments passed to the
</code></pre><pre class=''><code><span class='LineNumber'>228</span>  * functions hooked to &lt;tt&gt;$tag&lt;/tt&gt; are supplied using an array.
</code></pre><pre class=''><code><span class='LineNumber'>229</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>230</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>231</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>232</span>  * @global array $wp_filter         Stores all of the filters
</code></pre><pre class=''><code><span class='LineNumber'>233</span>  * @global array $merged_filters    Merges the filter hooks using this function.
</code></pre><pre class=''><code><span class='LineNumber'>234</span>  * @global array $wp_current_filter Stores the list of current filters with the current one last
</code></pre><pre class=''><code><span class='LineNumber'>235</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>236</span>  * @param string $tag  The name of the filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>237</span>  * @param array  $args The arguments supplied to the functions hooked to $tag.
</code></pre><pre class=''><code><span class='LineNumber'>238</span>  * @return mixed The filtered value after all hooked functions are applied to it.
</code></pre><pre class=''><code><span class='LineNumber'>239</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>240</span> function apply_filters_ref_array($tag, $args) {
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 	global $wp_filter, $merged_filters, $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>242</span> 
</code></pre><pre class=''><code><span class='LineNumber'>243</span> 	// Do 'all' actions first
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 	if ( isset($wp_filter['all']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>245</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>246</span> 		$all_args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>247</span> 		_wp_call_all_hook($all_args);
</code></pre><pre class=''><code><span class='LineNumber'>248</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>249</span> 
</code></pre><pre class=''><code><span class='LineNumber'>250</span> 	if ( !isset($wp_filter[$tag]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 		if ( isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>252</span> 			array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>253</span> 		return $args[0];
</code></pre><pre class=''><code><span class='LineNumber'>254</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>255</span> 
</code></pre><pre class=''><code><span class='LineNumber'>256</span> 	if ( !isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>257</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>258</span> 
</code></pre><pre class=''><code><span class='LineNumber'>259</span> 	// Sort
</code></pre><pre class=''><code><span class='LineNumber'>260</span> 	if ( !isset( $merged_filters[ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>261</span> 		ksort($wp_filter[$tag]);
</code></pre><pre class=''><code><span class='LineNumber'>262</span> 		$merged_filters[ $tag ] = true;
</code></pre><pre class=''><code><span class='LineNumber'>263</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>264</span> 
</code></pre><pre class=''><code><span class='LineNumber'>265</span> 	reset( $wp_filter[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>266</span> 
</code></pre><pre class=''><code><span class='LineNumber'>267</span> 	do {
</code></pre><pre class=''><code><span class='LineNumber'>268</span> 		foreach( (array) current($wp_filter[$tag]) as $the_ )
</code></pre><pre class=''><code><span class='LineNumber'>269</span> 			if ( !is_null($the_['function']) )
</code></pre><pre class=''><code><span class='LineNumber'>270</span> 				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
</code></pre><pre class=''><code><span class='LineNumber'>271</span> 
</code></pre><pre class=''><code><span class='LineNumber'>272</span> 	} while ( next($wp_filter[$tag]) !== false );
</code></pre><pre class=''><code><span class='LineNumber'>273</span> 
</code></pre><pre class=''><code><span class='LineNumber'>274</span> 	array_pop( $wp_current_filter );
</code></pre><pre class=''><code><span class='LineNumber'>275</span> 
</code></pre><pre class=''><code><span class='LineNumber'>276</span> 	return $args[0];
</code></pre><pre class=''><code><span class='LineNumber'>277</span> }
</code></pre><pre class=''><code><span class='LineNumber'>278</span> 
</code></pre><pre class=''><code><span class='LineNumber'>279</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>280</span>  * Removes a function from a specified filter hook.
</code></pre><pre class=''><code><span class='LineNumber'>281</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>282</span>  * This function removes a function attached to a specified filter hook. This
</code></pre><pre class=''><code><span class='LineNumber'>283</span>  * method can be used to remove default functions attached to a specific filter
</code></pre><pre class=''><code><span class='LineNumber'>284</span>  * hook and possibly replace them with a substitute.
</code></pre><pre class=''><code><span class='LineNumber'>285</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>286</span>  * To remove a hook, the $function_to_remove and $priority arguments must match
</code></pre><pre class=''><code><span class='LineNumber'>287</span>  * when the hook was added. This goes for both filters and actions. No warning
</code></pre><pre class=''><code><span class='LineNumber'>288</span>  * will be given on removal failure.
</code></pre><pre class=''><code><span class='LineNumber'>289</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>290</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>291</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>292</span>  * @param string   $tag                The filter hook to which the function to be removed is hooked.
</code></pre><pre class=''><code><span class='LineNumber'>293</span>  * @param callback $function_to_remove The name of the function which should be removed.
</code></pre><pre class=''><code><span class='LineNumber'>294</span>  * @param int      $priority           Optional. The priority of the function. Default 10.
</code></pre><pre class=''><code><span class='LineNumber'>295</span>  * @return boolean Whether the function existed before it was removed.
</code></pre><pre class=''><code><span class='LineNumber'>296</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>297</span> function remove_filter( $tag, $function_to_remove, $priority = 10 ) {
</code></pre><pre class=''><code><span class='LineNumber'>298</span> 	$function_to_remove = _wp_filter_build_unique_id( $tag, $function_to_remove, $priority );
</code></pre><pre class=''><code><span class='LineNumber'>299</span> 
</code></pre><pre class=''><code><span class='LineNumber'>300</span> 	$r = isset( $GLOBALS['wp_filter'][ $tag ][ $priority ][ $function_to_remove ] );
</code></pre><pre class=''><code><span class='LineNumber'>301</span> 
</code></pre><pre class=''><code><span class='LineNumber'>302</span> 	if ( true === $r ) {
</code></pre><pre class=''><code><span class='LineNumber'>303</span> 		unset( $GLOBALS['wp_filter'][ $tag ][ $priority ][ $function_to_remove ] );
</code></pre><pre class=''><code><span class='LineNumber'>304</span> 		if ( empty( $GLOBALS['wp_filter'][ $tag ][ $priority ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>305</span> 			unset( $GLOBALS['wp_filter'][ $tag ][ $priority ] );
</code></pre><pre class=''><code><span class='LineNumber'>306</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>307</span> 		if ( empty( $GLOBALS['wp_filter'][ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>308</span> 			$GLOBALS['wp_filter'][ $tag ] = array();
</code></pre><pre class=''><code><span class='LineNumber'>309</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>310</span> 		unset( $GLOBALS['merged_filters'][ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>311</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>312</span> 
</code></pre><pre class=''><code><span class='LineNumber'>313</span> 	return $r;
</code></pre><pre class=''><code><span class='LineNumber'>314</span> }
</code></pre><pre class=''><code><span class='LineNumber'>315</span> 
</code></pre><pre class=''><code><span class='LineNumber'>316</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>317</span>  * Remove all of the hooks from a filter.
</code></pre><pre class=''><code><span class='LineNumber'>318</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>319</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>320</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>321</span>  * @param string   $tag      The filter to remove hooks from.
</code></pre><pre class=''><code><span class='LineNumber'>322</span>  * @param int|bool $priority Optional. The priority number to remove. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>323</span>  * @return bool True when finished.
</code></pre><pre class=''><code><span class='LineNumber'>324</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>325</span> function remove_all_filters( $tag, $priority = false ) {
</code></pre><pre class=''><code><span class='LineNumber'>326</span> 	global $wp_filter, $merged_filters;
</code></pre><pre class=''><code><span class='LineNumber'>327</span> 
</code></pre><pre class=''><code><span class='LineNumber'>328</span> 	if ( isset( $wp_filter[ $tag ]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>329</span> 		if ( false !== $priority &amp;&amp; isset( $wp_filter[ $tag ][ $priority ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>330</span> 			$wp_filter[ $tag ][ $priority ] = array();
</code></pre><pre class=''><code><span class='LineNumber'>331</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>332</span> 			$wp_filter[ $tag ] = array();
</code></pre><pre class=''><code><span class='LineNumber'>333</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>334</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>335</span> 
</code></pre><pre class=''><code><span class='LineNumber'>336</span> 	if ( isset( $merged_filters[ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>337</span> 		unset( $merged_filters[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>338</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>339</span> 
</code></pre><pre class=''><code><span class='LineNumber'>340</span> 	return true;
</code></pre><pre class=''><code><span class='LineNumber'>341</span> }
</code></pre><pre class=''><code><span class='LineNumber'>342</span> 
</code></pre><pre class=''><code><span class='LineNumber'>343</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>344</span>  * Retrieve the name of the current filter or action.
</code></pre><pre class=''><code><span class='LineNumber'>345</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>346</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>347</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>348</span>  * @return string Hook name of the current filter or action.
</code></pre><pre class=''><code><span class='LineNumber'>349</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>350</span> function current_filter() {
</code></pre><pre class=''><code><span class='LineNumber'>351</span> 	global $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>352</span> 	return end( $wp_current_filter );
</code></pre><pre class=''><code><span class='LineNumber'>353</span> }
</code></pre><pre class=''><code><span class='LineNumber'>354</span> 
</code></pre><pre class=''><code><span class='LineNumber'>355</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>356</span>  * Retrieve the name of the current action.
</code></pre><pre class=''><code><span class='LineNumber'>357</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>358</span>  * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>359</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>360</span>  * @uses current_filter()
</code></pre><pre class=''><code><span class='LineNumber'>361</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>362</span>  * @return string Hook name of the current action.
</code></pre><pre class=''><code><span class='LineNumber'>363</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>364</span> function current_action() {
</code></pre><pre class=''><code><span class='LineNumber'>365</span> 	return current_filter();
</code></pre><pre class=''><code><span class='LineNumber'>366</span> }
</code></pre><pre class=''><code><span class='LineNumber'>367</span> 
</code></pre><pre class=''><code><span class='LineNumber'>368</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>369</span>  * Retrieve the name of a filter currently being processed.
</code></pre><pre class=''><code><span class='LineNumber'>370</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>371</span>  * The function current_filter() only returns the most recent filter or action
</code></pre><pre class=''><code><span class='LineNumber'>372</span>  * being executed. did_action() returns true once the action is initially
</code></pre><pre class=''><code><span class='LineNumber'>373</span>  * processed.
</code></pre><pre class=''><code><span class='LineNumber'>374</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>375</span>  * This function allows detection for any filter currently being
</code></pre><pre class=''><code><span class='LineNumber'>376</span>  * executed (despite not being the most recent filter to fire, in the case of
</code></pre><pre class=''><code><span class='LineNumber'>377</span>  * hooks called from hook callbacks) to be verified.
</code></pre><pre class=''><code><span class='LineNumber'>378</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>379</span>  * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>380</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>381</span>  * @see current_filter()
</code></pre><pre class=''><code><span class='LineNumber'>382</span>  * @see did_action()
</code></pre><pre class=''><code><span class='LineNumber'>383</span>  * @global array $wp_current_filter Current filter.
</code></pre><pre class=''><code><span class='LineNumber'>384</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>385</span>  * @param null|string $filter Optional. Filter to check. Defaults to null, which
</code></pre><pre class=''><code><span class='LineNumber'>386</span>  *                            checks if any filter is currently being run.
</code></pre><pre class=''><code><span class='LineNumber'>387</span>  * @return bool Whether the filter is currently in the stack.
</code></pre><pre class=''><code><span class='LineNumber'>388</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>389</span> function doing_filter( $filter = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>390</span> 	global $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>391</span> 
</code></pre><pre class=''><code><span class='LineNumber'>392</span> 	if ( null === $filter ) {
</code></pre><pre class=''><code><span class='LineNumber'>393</span> 		return ! empty( $wp_current_filter );
</code></pre><pre class=''><code><span class='LineNumber'>394</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>395</span> 
</code></pre><pre class=''><code><span class='LineNumber'>396</span> 	return in_array( $filter, $wp_current_filter );
</code></pre><pre class=''><code><span class='LineNumber'>397</span> }
</code></pre><pre class=''><code><span class='LineNumber'>398</span> 
</code></pre><pre class=''><code><span class='LineNumber'>399</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>400</span>  * Retrieve the name of an action currently being processed.
</code></pre><pre class=''><code><span class='LineNumber'>401</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>402</span>  * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>403</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>404</span>  * @uses doing_filter()
</code></pre><pre class=''><code><span class='LineNumber'>405</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>406</span>  * @param string|null $action Optional. Action to check. Defaults to null, which checks
</code></pre><pre class=''><code><span class='LineNumber'>407</span>  *                            if any action is currently being run.
</code></pre><pre class=''><code><span class='LineNumber'>408</span>  * @return bool Whether the action is currently in the stack.
</code></pre><pre class=''><code><span class='LineNumber'>409</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>410</span> function doing_action( $action = null ) {
</code></pre><pre class=''><code><span class='LineNumber'>411</span> 	return doing_filter( $action );
</code></pre><pre class=''><code><span class='LineNumber'>412</span> }
</code></pre><pre class=''><code><span class='LineNumber'>413</span> 
</code></pre><pre class=''><code><span class='LineNumber'>414</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>415</span>  * Hooks a function on to a specific action.
</code></pre><pre class=''><code><span class='LineNumber'>416</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>417</span>  * Actions are the hooks that the WordPress core launches at specific points
</code></pre><pre class=''><code><span class='LineNumber'>418</span>  * during execution, or when specific events occur. Plugins can specify that
</code></pre><pre class=''><code><span class='LineNumber'>419</span>  * one or more of its PHP functions are executed at these points, using the
</code></pre><pre class=''><code><span class='LineNumber'>420</span>  * Action API.
</code></pre><pre class=''><code><span class='LineNumber'>421</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>422</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>423</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>424</span>  * @uses add_filter() Adds an action. Parameter list and functionality are the same.
</code></pre><pre class=''><code><span class='LineNumber'>425</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>426</span>  * @param string   $tag             The name of the action to which the $function_to_add is hooked.
</code></pre><pre class=''><code><span class='LineNumber'>427</span>  * @param callback $function_to_add The name of the function you wish to be called.
</code></pre><pre class=''><code><span class='LineNumber'>428</span>  * @param int      $priority        Optional. Used to specify the order in which the functions
</code></pre><pre class=''><code><span class='LineNumber'>429</span>  *                                  associated with a particular action are executed. Default 10.
</code></pre><pre class=''><code><span class='LineNumber'>430</span>  *                                  Lower numbers correspond with earlier execution,
</code></pre><pre class=''><code><span class='LineNumber'>431</span>  *                                  and functions with the same priority are executed
</code></pre><pre class=''><code><span class='LineNumber'>432</span>  *                                  in the order in which they were added to the action.
</code></pre><pre class=''><code><span class='LineNumber'>433</span>  * @param int      $accepted_args   Optional. The number of arguments the function accept. Default 1.
</code></pre><pre class=''><code><span class='LineNumber'>434</span>  * @return bool Will always return true.
</code></pre><pre class=''><code><span class='LineNumber'>435</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>436</span> function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {
</code></pre><pre class=''><code><span class='LineNumber'>437</span> 	return add_filter($tag, $function_to_add, $priority, $accepted_args);
</code></pre><pre class=''><code><span class='LineNumber'>438</span> }
</code></pre><pre class=''><code><span class='LineNumber'>439</span> 
</code></pre><pre class=''><code><span class='LineNumber'>440</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>441</span>  * Execute functions hooked on a specific action hook.
</code></pre><pre class=''><code><span class='LineNumber'>442</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>443</span>  * This function invokes all functions attached to action hook $tag. It is
</code></pre><pre class=''><code><span class='LineNumber'>444</span>  * possible to create new action hooks by simply calling this function,
</code></pre><pre class=''><code><span class='LineNumber'>445</span>  * specifying the name of the new hook using the &lt;tt&gt;$tag&lt;/tt&gt; parameter.
</code></pre><pre class=''><code><span class='LineNumber'>446</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>447</span>  * You can pass extra arguments to the hooks, much like you can with
</code></pre><pre class=''><code><span class='LineNumber'>448</span>  * apply_filters().
</code></pre><pre class=''><code><span class='LineNumber'>449</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>450</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>451</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>452</span>  * @see apply_filters() This function works similar with the exception that nothing
</code></pre><pre class=''><code><span class='LineNumber'>453</span>  *                      is returned and only the functions or methods are called.
</code></pre><pre class=''><code><span class='LineNumber'>454</span>  * @global array $wp_filter  Stores all of the filters
</code></pre><pre class=''><code><span class='LineNumber'>455</span>  * @global array $wp_actions Increments the amount of times action was triggered.
</code></pre><pre class=''><code><span class='LineNumber'>456</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>457</span>  * @param string $tag The name of the action to be executed.
</code></pre><pre class=''><code><span class='LineNumber'>458</span>  * @param mixed  $arg Optional. Additional arguments which are passed on to the
</code></pre><pre class=''><code><span class='LineNumber'>459</span>  *                    functions hooked to the action. Default empty.
</code></pre><pre class=''><code><span class='LineNumber'>460</span>  * @return null Will return null if $tag does not exist in $wp_filter array.
</code></pre><pre class=''><code><span class='LineNumber'>461</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>462</span> function do_action($tag, $arg = '') {
</code></pre><pre class=''><code><span class='LineNumber'>463</span> 	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>464</span> 
</code></pre><pre class=''><code><span class='LineNumber'>465</span> 	if ( ! isset($wp_actions[$tag]) )
</code></pre><pre class=''><code><span class='LineNumber'>466</span> 		$wp_actions[$tag] = 1;
</code></pre><pre class=''><code><span class='LineNumber'>467</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>468</span> 		++$wp_actions[$tag];
</code></pre><pre class=''><code><span class='LineNumber'>469</span> 
</code></pre><pre class=''><code><span class='LineNumber'>470</span> 	// Do 'all' actions first
</code></pre><pre class=''><code><span class='LineNumber'>471</span> 	if ( isset($wp_filter['all']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>472</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>473</span> 		$all_args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>474</span> 		_wp_call_all_hook($all_args);
</code></pre><pre class=''><code><span class='LineNumber'>475</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>476</span> 
</code></pre><pre class=''><code><span class='LineNumber'>477</span> 	if ( !isset($wp_filter[$tag]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>478</span> 		if ( isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>479</span> 			array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>480</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>481</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>482</span> 
</code></pre><pre class=''><code><span class='LineNumber'>483</span> 	if ( !isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>484</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>485</span> 
</code></pre><pre class=''><code><span class='LineNumber'>486</span> 	$args = array();
</code></pre><pre class=''><code><span class='LineNumber'>487</span> 	if ( is_array($arg) &amp;&amp; 1 == count($arg) &amp;&amp; isset($arg[0]) &amp;&amp; is_object($arg[0]) ) // array(&amp;$this)
</code></pre><pre class=''><code><span class='LineNumber'>488</span> 		$args[] =&amp; $arg[0];
</code></pre><pre class=''><code><span class='LineNumber'>489</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>490</span> 		$args[] = $arg;
</code></pre><pre class=''><code><span class='LineNumber'>491</span> 	for ( $a = 2; $a &lt; func_num_args(); $a++ )
</code></pre><pre class=''><code><span class='LineNumber'>492</span> 		$args[] = func_get_arg($a);
</code></pre><pre class=''><code><span class='LineNumber'>493</span> 
</code></pre><pre class=''><code><span class='LineNumber'>494</span> 	// Sort
</code></pre><pre class=''><code><span class='LineNumber'>495</span> 	if ( !isset( $merged_filters[ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>496</span> 		ksort($wp_filter[$tag]);
</code></pre><pre class=''><code><span class='LineNumber'>497</span> 		$merged_filters[ $tag ] = true;
</code></pre><pre class=''><code><span class='LineNumber'>498</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>499</span> 
</code></pre><pre class=''><code><span class='LineNumber'>500</span> 	reset( $wp_filter[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>501</span> 
</code></pre><pre class=''><code><span class='LineNumber'>502</span> 	do {
</code></pre><pre class=''><code><span class='LineNumber'>503</span> 		foreach ( (array) current($wp_filter[$tag]) as $the_ )
</code></pre><pre class=''><code><span class='LineNumber'>504</span> 			if ( !is_null($the_['function']) )
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>505</span> 				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
</code></pre><pre class=''><code><span class='LineNumber'>506</span> 
</code></pre><pre class=''><code><span class='LineNumber'>507</span> 	} while ( next($wp_filter[$tag]) !== false );
</code></pre><pre class=''><code><span class='LineNumber'>508</span> 
</code></pre><pre class=''><code><span class='LineNumber'>509</span> 	array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>510</span> }
</code></pre><pre class=''><code><span class='LineNumber'>511</span> 
</code></pre><pre class=''><code><span class='LineNumber'>512</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>513</span>  * Retrieve the number of times an action is fired.
</code></pre><pre class=''><code><span class='LineNumber'>514</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>515</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>516</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>517</span>  * @global array $wp_actions Increments the amount of times action was triggered.
</code></pre><pre class=''><code><span class='LineNumber'>518</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>519</span>  * @param string $tag The name of the action hook.
</code></pre><pre class=''><code><span class='LineNumber'>520</span>  * @return int The number of times action hook $tag is fired.
</code></pre><pre class=''><code><span class='LineNumber'>521</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>522</span> function did_action($tag) {
</code></pre><pre class=''><code><span class='LineNumber'>523</span> 	global $wp_actions;
</code></pre><pre class=''><code><span class='LineNumber'>524</span> 
</code></pre><pre class=''><code><span class='LineNumber'>525</span> 	if ( ! isset( $wp_actions[ $tag ] ) )
</code></pre><pre class=''><code><span class='LineNumber'>526</span> 		return 0;
</code></pre><pre class=''><code><span class='LineNumber'>527</span> 
</code></pre><pre class=''><code><span class='LineNumber'>528</span> 	return $wp_actions[$tag];
</code></pre><pre class=''><code><span class='LineNumber'>529</span> }
</code></pre><pre class=''><code><span class='LineNumber'>530</span> 
</code></pre><pre class=''><code><span class='LineNumber'>531</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>532</span>  * Execute functions hooked on a specific action hook, specifying arguments in an array.
</code></pre><pre class=''><code><span class='LineNumber'>533</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>534</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>535</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>536</span>  * @see do_action() This function is identical, but the arguments passed to the
</code></pre><pre class=''><code><span class='LineNumber'>537</span>  *                  functions hooked to $tag&lt; are supplied using an array.
</code></pre><pre class=''><code><span class='LineNumber'>538</span>  * @global array $wp_filter  Stores all of the filters
</code></pre><pre class=''><code><span class='LineNumber'>539</span>  * @global array $wp_actions Increments the amount of times action was triggered.
</code></pre><pre class=''><code><span class='LineNumber'>540</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>541</span>  * @param string $tag  The name of the action to be executed.
</code></pre><pre class=''><code><span class='LineNumber'>542</span>  * @param array  $args The arguments supplied to the functions hooked to &lt;tt&gt;$tag&lt;/tt&gt;
</code></pre><pre class=''><code><span class='LineNumber'>543</span>  * @return null Will return null if $tag does not exist in $wp_filter array
</code></pre><pre class=''><code><span class='LineNumber'>544</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>545</span> function do_action_ref_array($tag, $args) {
</code></pre><pre class=''><code><span class='LineNumber'>546</span> 	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;
</code></pre><pre class=''><code><span class='LineNumber'>547</span> 
</code></pre><pre class=''><code><span class='LineNumber'>548</span> 	if ( ! isset($wp_actions[$tag]) )
</code></pre><pre class=''><code><span class='LineNumber'>549</span> 		$wp_actions[$tag] = 1;
</code></pre><pre class=''><code><span class='LineNumber'>550</span> 	else
</code></pre><pre class=''><code><span class='LineNumber'>551</span> 		++$wp_actions[$tag];
</code></pre><pre class=''><code><span class='LineNumber'>552</span> 
</code></pre><pre class=''><code><span class='LineNumber'>553</span> 	// Do 'all' actions first
</code></pre><pre class=''><code><span class='LineNumber'>554</span> 	if ( isset($wp_filter['all']) ) {
</code></pre><pre class=''><code><span class='LineNumber'>555</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>556</span> 		$all_args = func_get_args();
</code></pre><pre class=''><code><span class='LineNumber'>557</span> 		_wp_call_all_hook($all_args);
</code></pre><pre class=''><code><span class='LineNumber'>558</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>559</span> 
</code></pre><pre class=''><code><span class='LineNumber'>560</span> 	if ( !isset($wp_filter[$tag]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>561</span> 		if ( isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>562</span> 			array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>563</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>564</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>565</span> 
</code></pre><pre class=''><code><span class='LineNumber'>566</span> 	if ( !isset($wp_filter['all']) )
</code></pre><pre class=''><code><span class='LineNumber'>567</span> 		$wp_current_filter[] = $tag;
</code></pre><pre class=''><code><span class='LineNumber'>568</span> 
</code></pre><pre class=''><code><span class='LineNumber'>569</span> 	// Sort
</code></pre><pre class=''><code><span class='LineNumber'>570</span> 	if ( !isset( $merged_filters[ $tag ] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>571</span> 		ksort($wp_filter[$tag]);
</code></pre><pre class=''><code><span class='LineNumber'>572</span> 		$merged_filters[ $tag ] = true;
</code></pre><pre class=''><code><span class='LineNumber'>573</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>574</span> 
</code></pre><pre class=''><code><span class='LineNumber'>575</span> 	reset( $wp_filter[ $tag ] );
</code></pre><pre class=''><code><span class='LineNumber'>576</span> 
</code></pre><pre class=''><code><span class='LineNumber'>577</span> 	do {
</code></pre><pre class=''><code><span class='LineNumber'>578</span> 		foreach( (array) current($wp_filter[$tag]) as $the_ )
</code></pre><pre class=''><code><span class='LineNumber'>579</span> 			if ( !is_null($the_['function']) )
</code></pre><pre class=''><code><span class='LineNumber'>580</span> 				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
</code></pre><pre class=''><code><span class='LineNumber'>581</span> 
</code></pre><pre class=''><code><span class='LineNumber'>582</span> 	} while ( next($wp_filter[$tag]) !== false );
</code></pre><pre class=''><code><span class='LineNumber'>583</span> 
</code></pre><pre class=''><code><span class='LineNumber'>584</span> 	array_pop($wp_current_filter);
</code></pre><pre class=''><code><span class='LineNumber'>585</span> }
</code></pre><pre class=''><code><span class='LineNumber'>586</span> 
</code></pre><pre class=''><code><span class='LineNumber'>587</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>588</span>  * Check if any action has been registered for a hook.
</code></pre><pre class=''><code><span class='LineNumber'>589</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>590</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>591</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>592</span>  * @see has_filter() has_action() is an alias of has_filter().
</code></pre><pre class=''><code><span class='LineNumber'>593</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>594</span>  * @param string        $tag               The name of the action hook.
</code></pre><pre class=''><code><span class='LineNumber'>595</span>  * @param callback|bool $function_to_check Optional. The callback to check for. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>596</span>  * @return bool|int If $function_to_check is omitted, returns boolean for whether the hook has
</code></pre><pre class=''><code><span class='LineNumber'>597</span>  *                  anything registered. When checking a specific function, the priority of that
</code></pre><pre class=''><code><span class='LineNumber'>598</span>  *                  hook is returned, or false if the function is not attached. When using the
</code></pre><pre class=''><code><span class='LineNumber'>599</span>  *                  $function_to_check argument, this function may return a non-boolean value
</code></pre><pre class=''><code><span class='LineNumber'>600</span>  *                  that evaluates to false (e.g.) 0, so use the === operator for testing the
</code></pre><pre class=''><code><span class='LineNumber'>601</span>  *                  return value.
</code></pre><pre class=''><code><span class='LineNumber'>602</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>603</span> function has_action($tag, $function_to_check = false) {
</code></pre><pre class=''><code><span class='LineNumber'>604</span> 	return has_filter($tag, $function_to_check);
</code></pre><pre class=''><code><span class='LineNumber'>605</span> }
</code></pre><pre class=''><code><span class='LineNumber'>606</span> 
</code></pre><pre class=''><code><span class='LineNumber'>607</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>608</span>  * Removes a function from a specified action hook.
</code></pre><pre class=''><code><span class='LineNumber'>609</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>610</span>  * This function removes a function attached to a specified action hook. This
</code></pre><pre class=''><code><span class='LineNumber'>611</span>  * method can be used to remove default functions attached to a specific filter
</code></pre><pre class=''><code><span class='LineNumber'>612</span>  * hook and possibly replace them with a substitute.
</code></pre><pre class=''><code><span class='LineNumber'>613</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>614</span>  * @since 1.2.0
</code></pre><pre class=''><code><span class='LineNumber'>615</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>616</span>  * @param string   $tag                The action hook to which the function to be removed is hooked.
</code></pre><pre class=''><code><span class='LineNumber'>617</span>  * @param callback $function_to_remove The name of the function which should be removed.
</code></pre><pre class=''><code><span class='LineNumber'>618</span>  * @param int      $priority           Optional. The priority of the function. Default 10.
</code></pre><pre class=''><code><span class='LineNumber'>619</span>  * @return boolean Whether the function is removed.
</code></pre><pre class=''><code><span class='LineNumber'>620</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>621</span> function remove_action( $tag, $function_to_remove, $priority = 10 ) {
</code></pre><pre class=''><code><span class='LineNumber'>622</span> 	return remove_filter( $tag, $function_to_remove, $priority );
</code></pre><pre class=''><code><span class='LineNumber'>623</span> }
</code></pre><pre class=''><code><span class='LineNumber'>624</span> 
</code></pre><pre class=''><code><span class='LineNumber'>625</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>626</span>  * Remove all of the hooks from an action.
</code></pre><pre class=''><code><span class='LineNumber'>627</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>628</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>629</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>630</span>  * @param string   $tag      The action to remove hooks from.
</code></pre><pre class=''><code><span class='LineNumber'>631</span>  * @param int|bool $priority The priority number to remove them from. Default false.
</code></pre><pre class=''><code><span class='LineNumber'>632</span>  * @return bool True when finished.
</code></pre><pre class=''><code><span class='LineNumber'>633</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>634</span> function remove_all_actions($tag, $priority = false) {
</code></pre><pre class=''><code><span class='LineNumber'>635</span> 	return remove_all_filters($tag, $priority);
</code></pre><pre class=''><code><span class='LineNumber'>636</span> }
</code></pre><pre class=''><code><span class='LineNumber'>637</span> 
</code></pre><pre class=''><code><span class='LineNumber'>638</span> //
</code></pre><pre class=''><code><span class='LineNumber'>639</span> // Functions for handling plugins.
</code></pre><pre class=''><code><span class='LineNumber'>640</span> //
</code></pre><pre class=''><code><span class='LineNumber'>641</span> 
</code></pre><pre class=''><code><span class='LineNumber'>642</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>643</span>  * Gets the basename of a plugin.
</code></pre><pre class=''><code><span class='LineNumber'>644</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>645</span>  * This method extracts the name of a plugin from its filename.
</code></pre><pre class=''><code><span class='LineNumber'>646</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>647</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>648</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>649</span>  * @uses WP_PLUGIN_DIR, WPMU_PLUGIN_DIR
</code></pre><pre class=''><code><span class='LineNumber'>650</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>651</span>  * @param string $file The filename of plugin.
</code></pre><pre class=''><code><span class='LineNumber'>652</span>  * @return string The name of a plugin.
</code></pre><pre class=''><code><span class='LineNumber'>653</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>654</span> function plugin_basename( $file ) {
</code></pre><pre class=''><code><span class='LineNumber'>655</span> 	global $wp_plugin_paths;
</code></pre><pre class=''><code><span class='LineNumber'>656</span> 
</code></pre><pre class=''><code><span class='LineNumber'>657</span> 	foreach ( $wp_plugin_paths as $dir =&gt; $realdir ) {
</code></pre><pre class=''><code><span class='LineNumber'>658</span> 		if ( strpos( $file, $realdir ) === 0 ) {
</code></pre><pre class=''><code><span class='LineNumber'>659</span> 			$file = $dir . substr( $file, strlen( $realdir ) );
</code></pre><pre class=''><code><span class='LineNumber'>660</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>661</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>662</span> 
</code></pre><pre class=''><code><span class='LineNumber'>663</span> 	$file = wp_normalize_path( $file );
</code></pre><pre class=''><code><span class='LineNumber'>664</span> 	$plugin_dir = wp_normalize_path( WP_PLUGIN_DIR );
</code></pre><pre class=''><code><span class='LineNumber'>665</span> 	$mu_plugin_dir = wp_normalize_path( WPMU_PLUGIN_DIR );
</code></pre><pre class=''><code><span class='LineNumber'>666</span> 
</code></pre><pre class=''><code><span class='LineNumber'>667</span> 	$file = preg_replace('#^' . preg_quote($plugin_dir, '#') . '/|^' . preg_quote($mu_plugin_dir, '#') . '/#','',$file); // get relative path from plugins dir
</code></pre><pre class=''><code><span class='LineNumber'>668</span> 	$file = trim($file, '/');
</code></pre><pre class=''><code><span class='LineNumber'>669</span> 	return $file;
</code></pre><pre class=''><code><span class='LineNumber'>670</span> }
</code></pre><pre class=''><code><span class='LineNumber'>671</span> 
</code></pre><pre class=''><code><span class='LineNumber'>672</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>673</span>  * Register a plugin's real path.
</code></pre><pre class=''><code><span class='LineNumber'>674</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>675</span>  * This is used in plugin_basename() to resolve symlinked paths.
</code></pre><pre class=''><code><span class='LineNumber'>676</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>677</span>  * @since 3.9.0
</code></pre><pre class=''><code><span class='LineNumber'>678</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>679</span>  * @see plugin_basename()
</code></pre><pre class=''><code><span class='LineNumber'>680</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>681</span>  * @param string $file Known path to the file.
</code></pre><pre class=''><code><span class='LineNumber'>682</span>  * @return bool Whether the path was able to be registered.
</code></pre><pre class=''><code><span class='LineNumber'>683</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>684</span> function wp_register_plugin_realpath( $file ) {
</code></pre><pre class=''><code><span class='LineNumber'>685</span> 	global $wp_plugin_paths;
</code></pre><pre class=''><code><span class='LineNumber'>686</span> 
</code></pre><pre class=''><code><span class='LineNumber'>687</span> 	// Normalize, but store as static to avoid recalculation of a constant value
</code></pre><pre class=''><code><span class='LineNumber'>688</span> 	static $wp_plugin_path, $wpmu_plugin_path;
</code></pre><pre class=''><code><span class='LineNumber'>689</span> 	if ( ! isset( $wp_plugin_path ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>690</span> 		$wp_plugin_path   = wp_normalize_path( WP_PLUGIN_DIR   );
</code></pre><pre class=''><code><span class='LineNumber'>691</span> 		$wpmu_plugin_path = wp_normalize_path( WPMU_PLUGIN_DIR );
</code></pre><pre class=''><code><span class='LineNumber'>692</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>693</span> 
</code></pre><pre class=''><code><span class='LineNumber'>694</span> 	$plugin_path = wp_normalize_path( dirname( $file ) );
</code></pre><pre class=''><code><span class='LineNumber'>695</span> 	$plugin_realpath = wp_normalize_path( dirname( realpath( $file ) ) );
</code></pre><pre class=''><code><span class='LineNumber'>696</span> 
</code></pre><pre class=''><code><span class='LineNumber'>697</span> 	if ( $plugin_path === $wp_plugin_path || $plugin_path === $wpmu_plugin_path ) {
</code></pre><pre class=''><code><span class='LineNumber'>698</span> 		return false;
</code></pre><pre class=''><code><span class='LineNumber'>699</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>700</span> 
</code></pre><pre class=''><code><span class='LineNumber'>701</span> 	if ( $plugin_path !== $plugin_realpath ) {
</code></pre><pre class=''><code><span class='LineNumber'>702</span> 		$wp_plugin_paths[ $plugin_path ] = $plugin_realpath;
</code></pre><pre class=''><code><span class='LineNumber'>703</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>704</span> 
</code></pre><pre class=''><code><span class='LineNumber'>705</span> 	return true;
</code></pre><pre class=''><code><span class='LineNumber'>706</span> }
</code></pre><pre class=''><code><span class='LineNumber'>707</span> 
</code></pre><pre class=''><code><span class='LineNumber'>708</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>709</span>  * Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.
</code></pre><pre class=''><code><span class='LineNumber'>710</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>711</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>712</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>713</span>  * @param string $file The filename of the plugin (__FILE__).
</code></pre><pre class=''><code><span class='LineNumber'>714</span>  * @return string the filesystem path of the directory that contains the plugin.
</code></pre><pre class=''><code><span class='LineNumber'>715</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>716</span> function plugin_dir_path( $file ) {
</code></pre><pre class=''><code><span class='LineNumber'>717</span> 	return trailingslashit( dirname( $file ) );
</code></pre><pre class=''><code><span class='LineNumber'>718</span> }
</code></pre><pre class=''><code><span class='LineNumber'>719</span> 
</code></pre><pre class=''><code><span class='LineNumber'>720</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>721</span>  * Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.
</code></pre><pre class=''><code><span class='LineNumber'>722</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>723</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>724</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>725</span>  * @param string $file The filename of the plugin (__FILE__).
</code></pre><pre class=''><code><span class='LineNumber'>726</span>  * @return string the URL path of the directory that contains the plugin.
</code></pre><pre class=''><code><span class='LineNumber'>727</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>728</span> function plugin_dir_url( $file ) {
</code></pre><pre class=''><code><span class='LineNumber'>729</span> 	return trailingslashit( plugins_url( '', $file ) );
</code></pre><pre class=''><code><span class='LineNumber'>730</span> }
</code></pre><pre class=''><code><span class='LineNumber'>731</span> 
</code></pre><pre class=''><code><span class='LineNumber'>732</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>733</span>  * Set the activation hook for a plugin.
</code></pre><pre class=''><code><span class='LineNumber'>734</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>735</span>  * When a plugin is activated, the action 'activate_PLUGINNAME' hook is
</code></pre><pre class=''><code><span class='LineNumber'>736</span>  * called. In the name of this hook, PLUGINNAME is replaced with the name
</code></pre><pre class=''><code><span class='LineNumber'>737</span>  * of the plugin, including the optional subdirectory. For example, when the
</code></pre><pre class=''><code><span class='LineNumber'>738</span>  * plugin is located in wp-content/plugins/sampleplugin/sample.php, then
</code></pre><pre class=''><code><span class='LineNumber'>739</span>  * the name of this hook will become 'activate_sampleplugin/sample.php'.
</code></pre><pre class=''><code><span class='LineNumber'>740</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>741</span>  * When the plugin consists of only one file and is (as by default) located at
</code></pre><pre class=''><code><span class='LineNumber'>742</span>  * wp-content/plugins/sample.php the name of this hook will be
</code></pre><pre class=''><code><span class='LineNumber'>743</span>  * 'activate_sample.php'.
</code></pre><pre class=''><code><span class='LineNumber'>744</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>745</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>746</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>747</span>  * @param string   $file     The filename of the plugin including the path.
</code></pre><pre class=''><code><span class='LineNumber'>748</span>  * @param callback $function The function hooked to the 'activate_PLUGIN' action.
</code></pre><pre class=''><code><span class='LineNumber'>749</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>750</span> function register_activation_hook($file, $function) {
</code></pre><pre class=''><code><span class='LineNumber'>751</span> 	$file = plugin_basename($file);
</code></pre><pre class=''><code><span class='LineNumber'>752</span> 	add_action('activate_' . $file, $function);
</code></pre><pre class=''><code><span class='LineNumber'>753</span> }
</code></pre><pre class=''><code><span class='LineNumber'>754</span> 
</code></pre><pre class=''><code><span class='LineNumber'>755</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>756</span>  * Set the deactivation hook for a plugin.
</code></pre><pre class=''><code><span class='LineNumber'>757</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>758</span>  * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is
</code></pre><pre class=''><code><span class='LineNumber'>759</span>  * called. In the name of this hook, PLUGINNAME is replaced with the name
</code></pre><pre class=''><code><span class='LineNumber'>760</span>  * of the plugin, including the optional subdirectory. For example, when the
</code></pre><pre class=''><code><span class='LineNumber'>761</span>  * plugin is located in wp-content/plugins/sampleplugin/sample.php, then
</code></pre><pre class=''><code><span class='LineNumber'>762</span>  * the name of this hook will become 'deactivate_sampleplugin/sample.php'.
</code></pre><pre class=''><code><span class='LineNumber'>763</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>764</span>  * When the plugin consists of only one file and is (as by default) located at
</code></pre><pre class=''><code><span class='LineNumber'>765</span>  * wp-content/plugins/sample.php the name of this hook will be
</code></pre><pre class=''><code><span class='LineNumber'>766</span>  * 'deactivate_sample.php'.
</code></pre><pre class=''><code><span class='LineNumber'>767</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>768</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>769</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>770</span>  * @param string   $file     The filename of the plugin including the path.
</code></pre><pre class=''><code><span class='LineNumber'>771</span>  * @param callback $function The function hooked to the 'deactivate_PLUGIN' action.
</code></pre><pre class=''><code><span class='LineNumber'>772</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>773</span> function register_deactivation_hook($file, $function) {
</code></pre><pre class=''><code><span class='LineNumber'>774</span> 	$file = plugin_basename($file);
</code></pre><pre class=''><code><span class='LineNumber'>775</span> 	add_action('deactivate_' . $file, $function);
</code></pre><pre class=''><code><span class='LineNumber'>776</span> }
</code></pre><pre class=''><code><span class='LineNumber'>777</span> 
</code></pre><pre class=''><code><span class='LineNumber'>778</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>779</span>  * Set the uninstallation hook for a plugin.
</code></pre><pre class=''><code><span class='LineNumber'>780</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>781</span>  * Registers the uninstall hook that will be called when the user clicks on the
</code></pre><pre class=''><code><span class='LineNumber'>782</span>  * uninstall link that calls for the plugin to uninstall itself. The link won't
</code></pre><pre class=''><code><span class='LineNumber'>783</span>  * be active unless the plugin hooks into the action.
</code></pre><pre class=''><code><span class='LineNumber'>784</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>785</span>  * The plugin should not run arbitrary code outside of functions, when
</code></pre><pre class=''><code><span class='LineNumber'>786</span>  * registering the uninstall hook. In order to run using the hook, the plugin
</code></pre><pre class=''><code><span class='LineNumber'>787</span>  * will have to be included, which means that any code laying outside of a
</code></pre><pre class=''><code><span class='LineNumber'>788</span>  * function will be run during the uninstall process. The plugin should not
</code></pre><pre class=''><code><span class='LineNumber'>789</span>  * hinder the uninstall process.
</code></pre><pre class=''><code><span class='LineNumber'>790</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>791</span>  * If the plugin can not be written without running code within the plugin, then
</code></pre><pre class=''><code><span class='LineNumber'>792</span>  * the plugin should create a file named 'uninstall.php' in the base plugin
</code></pre><pre class=''><code><span class='LineNumber'>793</span>  * folder. This file will be called, if it exists, during the uninstall process
</code></pre><pre class=''><code><span class='LineNumber'>794</span>  * bypassing the uninstall hook. The plugin, when using the 'uninstall.php'
</code></pre><pre class=''><code><span class='LineNumber'>795</span>  * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before
</code></pre><pre class=''><code><span class='LineNumber'>796</span>  * executing.
</code></pre><pre class=''><code><span class='LineNumber'>797</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>798</span>  * @since 2.7.0
</code></pre><pre class=''><code><span class='LineNumber'>799</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>800</span>  * @param string   $file     Plugin file.
</code></pre><pre class=''><code><span class='LineNumber'>801</span>  * @param callback $callback The callback to run when the hook is called. Must be
</code></pre><pre class=''><code><span class='LineNumber'>802</span>  *                           a static method or function.
</code></pre><pre class=''><code><span class='LineNumber'>803</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>804</span> function register_uninstall_hook( $file, $callback ) {
</code></pre><pre class=''><code><span class='LineNumber'>805</span> 	if ( is_array( $callback ) &amp;&amp; is_object( $callback[0] ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>806</span> 		_doing_it_wrong( __FUNCTION__, __( 'Only a static class method or function can be used in an uninstall hook.' ), '3.1' );
</code></pre><pre class=''><code><span class='LineNumber'>807</span> 		return;
</code></pre><pre class=''><code><span class='LineNumber'>808</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>809</span> 
</code></pre><pre class=''><code><span class='LineNumber'>810</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>811</span> 	 * The option should not be autoloaded, because it is not needed in most
</code></pre><pre class=''><code><span class='LineNumber'>812</span> 	 * cases. Emphasis should be put on using the 'uninstall.php' way of
</code></pre><pre class=''><code><span class='LineNumber'>813</span> 	 * uninstalling the plugin.
</code></pre><pre class=''><code><span class='LineNumber'>814</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>815</span> 	$uninstallable_plugins = (array) get_option('uninstall_plugins');
</code></pre><pre class=''><code><span class='LineNumber'>816</span> 	$uninstallable_plugins[plugin_basename($file)] = $callback;
</code></pre><pre class=''><code><span class='LineNumber'>817</span> 
</code></pre><pre class=''><code><span class='LineNumber'>818</span> 	update_option('uninstall_plugins', $uninstallable_plugins);
</code></pre><pre class=''><code><span class='LineNumber'>819</span> }
</code></pre><pre class=''><code><span class='LineNumber'>820</span> 
</code></pre><pre class=''><code><span class='LineNumber'>821</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>822</span>  * Call the 'all' hook, which will process the functions hooked into it.
</code></pre><pre class=''><code><span class='LineNumber'>823</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>824</span>  * The 'all' hook passes all of the arguments or parameters that were used for
</code></pre><pre class=''><code><span class='LineNumber'>825</span>  * the hook, which this function was called for.
</code></pre><pre class=''><code><span class='LineNumber'>826</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>827</span>  * This function is used internally for apply_filters(), do_action(), and
</code></pre><pre class=''><code><span class='LineNumber'>828</span>  * do_action_ref_array() and is not meant to be used from outside those
</code></pre><pre class=''><code><span class='LineNumber'>829</span>  * functions. This function does not check for the existence of the all hook, so
</code></pre><pre class=''><code><span class='LineNumber'>830</span>  * it will fail unless the all hook exists prior to this function call.
</code></pre><pre class=''><code><span class='LineNumber'>831</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>832</span>  * @since 2.5.0
</code></pre><pre class=''><code><span class='LineNumber'>833</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>834</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>835</span>  * @uses $wp_filter Used to process all of the functions in the 'all' hook.
</code></pre><pre class=''><code><span class='LineNumber'>836</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>837</span>  * @param array $args The collected parameters from the hook that was called.
</code></pre><pre class=''><code><span class='LineNumber'>838</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>839</span> function _wp_call_all_hook($args) {
</code></pre><pre class=''><code><span class='LineNumber'>840</span> 	global $wp_filter;
</code></pre><pre class=''><code><span class='LineNumber'>841</span> 
</code></pre><pre class=''><code><span class='LineNumber'>842</span> 	reset( $wp_filter['all'] );
</code></pre><pre class=''><code><span class='LineNumber'>843</span> 	do {
</code></pre><pre class=''><code><span class='LineNumber'>844</span> 		foreach( (array) current($wp_filter['all']) as $the_ )
</code></pre><pre class=''><code><span class='LineNumber'>845</span> 			if ( !is_null($the_['function']) )
</code></pre><pre class=''><code><span class='LineNumber'>846</span> 				call_user_func_array($the_['function'], $args);
</code></pre><pre class=''><code><span class='LineNumber'>847</span> 
</code></pre><pre class=''><code><span class='LineNumber'>848</span> 	} while ( next($wp_filter['all']) !== false );
</code></pre><pre class=''><code><span class='LineNumber'>849</span> }
</code></pre><pre class=''><code><span class='LineNumber'>850</span> 
</code></pre><pre class=''><code><span class='LineNumber'>851</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>852</span>  * Build Unique ID for storage and retrieval.
</code></pre><pre class=''><code><span class='LineNumber'>853</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>854</span>  * The old way to serialize the callback caused issues and this function is the
</code></pre><pre class=''><code><span class='LineNumber'>855</span>  * solution. It works by checking for objects and creating an a new property in
</code></pre><pre class=''><code><span class='LineNumber'>856</span>  * the class to keep track of the object and new objects of the same class that
</code></pre><pre class=''><code><span class='LineNumber'>857</span>  * need to be added.
</code></pre><pre class=''><code><span class='LineNumber'>858</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>859</span>  * It also allows for the removal of actions and filters for objects after they
</code></pre><pre class=''><code><span class='LineNumber'>860</span>  * change class properties. It is possible to include the property $wp_filter_id
</code></pre><pre class=''><code><span class='LineNumber'>861</span>  * in your class and set it to &quot;null&quot; or a number to bypass the workaround.
</code></pre><pre class=''><code><span class='LineNumber'>862</span>  * However this will prevent you from adding new classes and any new classes
</code></pre><pre class=''><code><span class='LineNumber'>863</span>  * will overwrite the previous hook by the same class.
</code></pre><pre class=''><code><span class='LineNumber'>864</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>865</span>  * Functions and static method callbacks are just returned as strings and
</code></pre><pre class=''><code><span class='LineNumber'>866</span>  * shouldn't have any speed penalty.
</code></pre><pre class=''><code><span class='LineNumber'>867</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>868</span>  * @link http://trac.wordpress.org/ticket/3875
</code></pre><pre class=''><code><span class='LineNumber'>869</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>870</span>  * @since 2.2.3
</code></pre><pre class=''><code><span class='LineNumber'>871</span>  * @access private
</code></pre><pre class=''><code><span class='LineNumber'>872</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>873</span>  * @global array $wp_filter Storage for all of the filters and actions.
</code></pre><pre class=''><code><span class='LineNumber'>874</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>875</span>  * @param string   $tag      Used in counting how many hooks were applied
</code></pre><pre class=''><code><span class='LineNumber'>876</span>  * @param callback $function Used for creating unique id
</code></pre><pre class=''><code><span class='LineNumber'>877</span>  * @param int|bool $priority Used in counting how many hooks were applied. If === false
</code></pre><pre class=''><code><span class='LineNumber'>878</span>  *                           and $function is an object reference, we return the unique
</code></pre><pre class=''><code><span class='LineNumber'>879</span>  *                           id only if it already has one, false otherwise.
</code></pre><pre class=''><code><span class='LineNumber'>880</span>  * @return string|bool Unique ID for usage as array key or false if $priority === false
</code></pre><pre class=''><code><span class='LineNumber'>881</span>  *                     and $function is an object reference, and it does not already have
</code></pre><pre class=''><code><span class='LineNumber'>882</span>  *                     a unique id.
</code></pre><pre class=''><code><span class='LineNumber'>883</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>884</span> function _wp_filter_build_unique_id($tag, $function, $priority) {
</code></pre><pre class=''><code><span class='LineNumber'>885</span> 	global $wp_filter;
</code></pre><pre class=''><code><span class='LineNumber'>886</span> 	static $filter_id_count = 0;
</code></pre><pre class=''><code><span class='LineNumber'>887</span> 
</code></pre><pre class=''><code><span class='LineNumber'>888</span> 	if ( is_string($function) )
</code></pre><pre class=''><code><span class='LineNumber'>889</span> 		return $function;
</code></pre><pre class=''><code><span class='LineNumber'>890</span> 
</code></pre><pre class=''><code><span class='LineNumber'>891</span> 	if ( is_object($function) ) {
</code></pre><pre class=''><code><span class='LineNumber'>892</span> 		// Closures are currently implemented as objects
</code></pre><pre class=''><code><span class='LineNumber'>893</span> 		$function = array( $function, '' );
</code></pre><pre class=''><code><span class='LineNumber'>894</span> 	} else {
</code></pre><pre class=''><code><span class='LineNumber'>895</span> 		$function = (array) $function;
</code></pre><pre class=''><code><span class='LineNumber'>896</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>897</span> 
</code></pre><pre class=''><code><span class='LineNumber'>898</span> 	if (is_object($function[0]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>899</span> 		// Object Class Calling
</code></pre><pre class=''><code><span class='LineNumber'>900</span> 		if ( function_exists('spl_object_hash') ) {
</code></pre><pre class=''><code><span class='LineNumber'>901</span> 			return spl_object_hash($function[0]) . $function[1];
</code></pre><pre class=''><code><span class='LineNumber'>902</span> 		} else {
</code></pre><pre class=''><code><span class='LineNumber'>903</span> 			$obj_idx = get_class($function[0]).$function[1];
</code></pre><pre class=''><code><span class='LineNumber'>904</span> 			if ( !isset($function[0]-&gt;wp_filter_id) ) {
</code></pre><pre class=''><code><span class='LineNumber'>905</span> 				if ( false === $priority )
</code></pre><pre class=''><code><span class='LineNumber'>906</span> 					return false;
</code></pre><pre class=''><code><span class='LineNumber'>907</span> 				$obj_idx .= isset($wp_filter[$tag][$priority]) ? count((array)$wp_filter[$tag][$priority]) : $filter_id_count;
</code></pre><pre class=''><code><span class='LineNumber'>908</span> 				$function[0]-&gt;wp_filter_id = $filter_id_count;
</code></pre><pre class=''><code><span class='LineNumber'>909</span> 				++$filter_id_count;
</code></pre><pre class=''><code><span class='LineNumber'>910</span> 			} else {
</code></pre><pre class=''><code><span class='LineNumber'>911</span> 				$obj_idx .= $function[0]-&gt;wp_filter_id;
</code></pre><pre class=''><code><span class='LineNumber'>912</span> 			}
</code></pre><pre class=''><code><span class='LineNumber'>913</span> 
</code></pre><pre class=''><code><span class='LineNumber'>914</span> 			return $obj_idx;
</code></pre><pre class=''><code><span class='LineNumber'>915</span> 		}
</code></pre><pre class=''><code><span class='LineNumber'>916</span> 	} else if ( is_string($function[0]) ) {
</code></pre><pre class=''><code><span class='LineNumber'>917</span> 		// Static Calling
</code></pre><pre class=''><code><span class='LineNumber'>918</span> 		return $function[0] . '::' . $function[1];
</code></pre><pre class=''><code><span class='LineNumber'>919</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>920</span> }
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-settings.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Used to set up and fix common variables and include
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  * the WordPress procedural and class library.
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  * Allows for some configuration in wp-config.php (see default-constants.php)
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>8</span>  * @internal This file must be parsable by PHP4.
</code></pre><pre class=''><code><span class='LineNumber'>9</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>12</span> 
</code></pre><pre class=''><code><span class='LineNumber'>13</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>14</span>  * Stores the location of the WordPress directory of functions, classes, and core content.
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  * @since 1.0.0
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>18</span> define( 'WPINC', 'wp-includes' );
</code></pre><pre class=''><code><span class='LineNumber'>19</span> 
</code></pre><pre class=''><code><span class='LineNumber'>20</span> // Include files required for initialization.
</code></pre><pre class=''><code><span class='LineNumber'>21</span> require( ABSPATH . WPINC . '/load.php' );
</code></pre><pre class=''><code><span class='LineNumber'>22</span> require( ABSPATH . WPINC . '/default-constants.php' );
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 
</code></pre><pre class=''><code><span class='LineNumber'>24</span> /*
</code></pre><pre class=''><code><span class='LineNumber'>25</span>  * These can't be directly globalized in version.php. When updating,
</code></pre><pre class=''><code><span class='LineNumber'>26</span>  * we're including version.php from another install and don't want
</code></pre><pre class=''><code><span class='LineNumber'>27</span>  * these values to be overridden if already set.
</code></pre><pre class=''><code><span class='LineNumber'>28</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>29</span> global $wp_version, $wp_db_version, $tinymce_version, $required_php_version, $required_mysql_version;
</code></pre><pre class=''><code><span class='LineNumber'>30</span> require( ABSPATH . WPINC . '/version.php' );
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 
</code></pre><pre class=''><code><span class='LineNumber'>32</span> // Set initial default constants including WP_MEMORY_LIMIT, WP_MAX_MEMORY_LIMIT, WP_DEBUG, WP_CONTENT_DIR and WP_CACHE.
</code></pre><pre class=''><code><span class='LineNumber'>33</span> wp_initial_constants();
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 
</code></pre><pre class=''><code><span class='LineNumber'>35</span> // Check for the required PHP version and for the MySQL extension or a database drop-in.
</code></pre><pre class=''><code><span class='LineNumber'>36</span> wp_check_php_mysql_versions();
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> // Disable magic quotes at runtime. Magic quotes are added using wpdb later in wp-settings.php.
</code></pre><pre class=''><code><span class='LineNumber'>39</span> @ini_set( 'magic_quotes_runtime', 0 );
</code></pre><pre class=''><code><span class='LineNumber'>40</span> @ini_set( 'magic_quotes_sybase',  0 );
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 
</code></pre><pre class=''><code><span class='LineNumber'>42</span> // WordPress calculates offsets from UTC.
</code></pre><pre class=''><code><span class='LineNumber'>43</span> date_default_timezone_set( 'UTC' );
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 
</code></pre><pre class=''><code><span class='LineNumber'>45</span> // Turn register_globals off.
</code></pre><pre class=''><code><span class='LineNumber'>46</span> wp_unregister_GLOBALS();
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 
</code></pre><pre class=''><code><span class='LineNumber'>48</span> // Standardize $_SERVER variables across setups.
</code></pre><pre class=''><code><span class='LineNumber'>49</span> wp_fix_server_vars();
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 
</code></pre><pre class=''><code><span class='LineNumber'>51</span> // Check if we have received a request due to missing favicon.ico
</code></pre><pre class=''><code><span class='LineNumber'>52</span> wp_favicon_request();
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 
</code></pre><pre class=''><code><span class='LineNumber'>54</span> // Check if we're in maintenance mode.
</code></pre><pre class=''><code><span class='LineNumber'>55</span> wp_maintenance();
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 
</code></pre><pre class=''><code><span class='LineNumber'>57</span> // Start loading timer.
</code></pre><pre class=''><code><span class='LineNumber'>58</span> timer_start();
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 
</code></pre><pre class=''><code><span class='LineNumber'>60</span> // Check if we're in WP_DEBUG mode.
</code></pre><pre class=''><code><span class='LineNumber'>61</span> wp_debug_mode();
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 
</code></pre><pre class=''><code><span class='LineNumber'>63</span> // For an advanced caching plugin to use. Uses a static drop-in because you would only want one.
</code></pre><pre class=''><code><span class='LineNumber'>64</span> if ( WP_CACHE )
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 	WP_DEBUG ? include( WP_CONTENT_DIR . '/advanced-cache.php' ) : @include( WP_CONTENT_DIR . '/advanced-cache.php' );
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 
</code></pre><pre class=''><code><span class='LineNumber'>67</span> // Define WP_LANG_DIR if not set.
</code></pre><pre class=''><code><span class='LineNumber'>68</span> wp_set_lang_dir();
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 
</code></pre><pre class=''><code><span class='LineNumber'>70</span> // Load early WordPress files.
</code></pre><pre class=''><code><span class='LineNumber'>71</span> require( ABSPATH . WPINC . '/compat.php' );
</code></pre><pre class=''><code><span class='LineNumber'>72</span> require( ABSPATH . WPINC . '/functions.php' );
</code></pre><pre class=''><code><span class='LineNumber'>73</span> require( ABSPATH . WPINC . '/class-wp.php' );
</code></pre><pre class=''><code><span class='LineNumber'>74</span> require( ABSPATH . WPINC . '/class-wp-error.php' );
</code></pre><pre class=''><code><span class='LineNumber'>75</span> require( ABSPATH . WPINC . '/plugin.php' );
</code></pre><pre class=''><code><span class='LineNumber'>76</span> require( ABSPATH . WPINC . '/pomo/mo.php' );
</code></pre><pre class=''><code><span class='LineNumber'>77</span> 
</code></pre><pre class=''><code><span class='LineNumber'>78</span> // Include the wpdb class and, if present, a db.php database drop-in.
</code></pre><pre class=''><code><span class='LineNumber'>79</span> require_wp_db();
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 
</code></pre><pre class=''><code><span class='LineNumber'>81</span> // Set the database table prefix and the format specifiers for database table columns.
</code></pre><pre class=''><code><span class='LineNumber'>82</span> $GLOBALS['table_prefix'] = $table_prefix;
</code></pre><pre class=''><code><span class='LineNumber'>83</span> wp_set_wpdb_vars();
</code></pre><pre class=''><code><span class='LineNumber'>84</span> 
</code></pre><pre class=''><code><span class='LineNumber'>85</span> // Start the WordPress object cache, or an external object cache if the drop-in is present.
</code></pre><pre class=''><code><span class='LineNumber'>86</span> wp_start_object_cache();
</code></pre><pre class=''><code><span class='LineNumber'>87</span> 
</code></pre><pre class=''><code><span class='LineNumber'>88</span> // Attach the default filters.
</code></pre><pre class=''><code><span class='LineNumber'>89</span> require( ABSPATH . WPINC . '/default-filters.php' );
</code></pre><pre class=''><code><span class='LineNumber'>90</span> 
</code></pre><pre class=''><code><span class='LineNumber'>91</span> // Initialize multisite if enabled.
</code></pre><pre class=''><code><span class='LineNumber'>92</span> if ( is_multisite() ) {
</code></pre><pre class=''><code><span class='LineNumber'>93</span> 	require( ABSPATH . WPINC . '/ms-blogs.php' );
</code></pre><pre class=''><code><span class='LineNumber'>94</span> 	require( ABSPATH . WPINC . '/ms-settings.php' );
</code></pre><pre class=''><code><span class='LineNumber'>95</span> } elseif ( ! defined( 'MULTISITE' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>96</span> 	define( 'MULTISITE', false );
</code></pre><pre class=''><code><span class='LineNumber'>97</span> }
</code></pre><pre class=''><code><span class='LineNumber'>98</span> 
</code></pre><pre class=''><code><span class='LineNumber'>99</span> register_shutdown_function( 'shutdown_action_hook' );
</code></pre><pre class=''><code><span class='LineNumber'>100</span> 
</code></pre><pre class=''><code><span class='LineNumber'>101</span> // Stop most of WordPress from being loaded if we just want the basics.
</code></pre><pre class=''><code><span class='LineNumber'>102</span> if ( SHORTINIT )
</code></pre><pre class=''><code><span class='LineNumber'>103</span> 	return false;
</code></pre><pre class=''><code><span class='LineNumber'>104</span> 
</code></pre><pre class=''><code><span class='LineNumber'>105</span> // Load the L10n library.
</code></pre><pre class=''><code><span class='LineNumber'>106</span> require_once( ABSPATH . WPINC . '/l10n.php' );
</code></pre><pre class=''><code><span class='LineNumber'>107</span> 
</code></pre><pre class=''><code><span class='LineNumber'>108</span> // Run the installer if WordPress is not installed.
</code></pre><pre class=''><code><span class='LineNumber'>109</span> wp_not_installed();
</code></pre><pre class=''><code><span class='LineNumber'>110</span> 
</code></pre><pre class=''><code><span class='LineNumber'>111</span> // Load most of WordPress.
</code></pre><pre class=''><code><span class='LineNumber'>112</span> require( ABSPATH . WPINC . '/class-wp-walker.php' );
</code></pre><pre class=''><code><span class='LineNumber'>113</span> require( ABSPATH . WPINC . '/class-wp-ajax-response.php' );
</code></pre><pre class=''><code><span class='LineNumber'>114</span> require( ABSPATH . WPINC . '/formatting.php' );
</code></pre><pre class=''><code><span class='LineNumber'>115</span> require( ABSPATH . WPINC . '/capabilities.php' );
</code></pre><pre class=''><code><span class='LineNumber'>116</span> require( ABSPATH . WPINC . '/query.php' );
</code></pre><pre class=''><code><span class='LineNumber'>117</span> require( ABSPATH . WPINC . '/date.php' );
</code></pre><pre class=''><code><span class='LineNumber'>118</span> require( ABSPATH . WPINC . '/theme.php' );
</code></pre><pre class=''><code><span class='LineNumber'>119</span> require( ABSPATH . WPINC . '/class-wp-theme.php' );
</code></pre><pre class=''><code><span class='LineNumber'>120</span> require( ABSPATH . WPINC . '/template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>121</span> require( ABSPATH . WPINC . '/user.php' );
</code></pre><pre class=''><code><span class='LineNumber'>122</span> require( ABSPATH . WPINC . '/session.php' );
</code></pre><pre class=''><code><span class='LineNumber'>123</span> require( ABSPATH . WPINC . '/meta.php' );
</code></pre><pre class=''><code><span class='LineNumber'>124</span> require( ABSPATH . WPINC . '/general-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>125</span> require( ABSPATH . WPINC . '/link-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>126</span> require( ABSPATH . WPINC . '/author-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>127</span> require( ABSPATH . WPINC . '/post.php' );
</code></pre><pre class=''><code><span class='LineNumber'>128</span> require( ABSPATH . WPINC . '/post-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>129</span> require( ABSPATH . WPINC . '/revision.php' );
</code></pre><pre class=''><code><span class='LineNumber'>130</span> require( ABSPATH . WPINC . '/post-formats.php' );
</code></pre><pre class=''><code><span class='LineNumber'>131</span> require( ABSPATH . WPINC . '/post-thumbnail-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>132</span> require( ABSPATH . WPINC . '/category.php' );
</code></pre><pre class=''><code><span class='LineNumber'>133</span> require( ABSPATH . WPINC . '/category-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>134</span> require( ABSPATH . WPINC . '/comment.php' );
</code></pre><pre class=''><code><span class='LineNumber'>135</span> require( ABSPATH . WPINC . '/comment-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>136</span> require( ABSPATH . WPINC . '/rewrite.php' );
</code></pre><pre class=''><code><span class='LineNumber'>137</span> require( ABSPATH . WPINC . '/feed.php' );
</code></pre><pre class=''><code><span class='LineNumber'>138</span> require( ABSPATH . WPINC . '/bookmark.php' );
</code></pre><pre class=''><code><span class='LineNumber'>139</span> require( ABSPATH . WPINC . '/bookmark-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>140</span> require( ABSPATH . WPINC . '/kses.php' );
</code></pre><pre class=''><code><span class='LineNumber'>141</span> require( ABSPATH . WPINC . '/cron.php' );
</code></pre><pre class=''><code><span class='LineNumber'>142</span> require( ABSPATH . WPINC . '/deprecated.php' );
</code></pre><pre class=''><code><span class='LineNumber'>143</span> require( ABSPATH . WPINC . '/script-loader.php' );
</code></pre><pre class=''><code><span class='LineNumber'>144</span> require( ABSPATH . WPINC . '/taxonomy.php' );
</code></pre><pre class=''><code><span class='LineNumber'>145</span> require( ABSPATH . WPINC . '/update.php' );
</code></pre><pre class=''><code><span class='LineNumber'>146</span> require( ABSPATH . WPINC . '/canonical.php' );
</code></pre><pre class=''><code><span class='LineNumber'>147</span> require( ABSPATH . WPINC . '/shortcodes.php' );
</code></pre><pre class=''><code><span class='LineNumber'>148</span> require( ABSPATH . WPINC . '/class-wp-embed.php' );
</code></pre><pre class=''><code><span class='LineNumber'>149</span> require( ABSPATH . WPINC . '/media.php' );
</code></pre><pre class=''><code><span class='LineNumber'>150</span> require( ABSPATH . WPINC . '/http.php' );
</code></pre><pre class=''><code><span class='LineNumber'>151</span> require( ABSPATH . WPINC . '/class-http.php' );
</code></pre><pre class=''><code><span class='LineNumber'>152</span> require( ABSPATH . WPINC . '/widgets.php' );
</code></pre><pre class=''><code><span class='LineNumber'>153</span> require( ABSPATH . WPINC . '/nav-menu.php' );
</code></pre><pre class=''><code><span class='LineNumber'>154</span> require( ABSPATH . WPINC . '/nav-menu-template.php' );
</code></pre><pre class=''><code><span class='LineNumber'>155</span> require( ABSPATH . WPINC . '/admin-bar.php' );
</code></pre><pre class=''><code><span class='LineNumber'>156</span> 
</code></pre><pre class=''><code><span class='LineNumber'>157</span> // Load multisite-specific files.
</code></pre><pre class=''><code><span class='LineNumber'>158</span> if ( is_multisite() ) {
</code></pre><pre class=''><code><span class='LineNumber'>159</span> 	require( ABSPATH . WPINC . '/ms-functions.php' );
</code></pre><pre class=''><code><span class='LineNumber'>160</span> 	require( ABSPATH . WPINC . '/ms-default-filters.php' );
</code></pre><pre class=''><code><span class='LineNumber'>161</span> 	require( ABSPATH . WPINC . '/ms-deprecated.php' );
</code></pre><pre class=''><code><span class='LineNumber'>162</span> }
</code></pre><pre class=''><code><span class='LineNumber'>163</span> 
</code></pre><pre class=''><code><span class='LineNumber'>164</span> // Define constants that rely on the API to obtain the default value.
</code></pre><pre class=''><code><span class='LineNumber'>165</span> // Define must-use plugin directory constants, which may be overridden in the sunrise.php drop-in.
</code></pre><pre class=''><code><span class='LineNumber'>166</span> wp_plugin_directory_constants();
</code></pre><pre class=''><code><span class='LineNumber'>167</span> 
</code></pre><pre class=''><code><span class='LineNumber'>168</span> $GLOBALS['wp_plugin_paths'] = array();
</code></pre><pre class=''><code><span class='LineNumber'>169</span> 
</code></pre><pre class=''><code><span class='LineNumber'>170</span> // Load must-use plugins.
</code></pre><pre class=''><code><span class='LineNumber'>171</span> foreach ( wp_get_mu_plugins() as $mu_plugin ) {
</code></pre><pre class=''><code><span class='LineNumber'>172</span> 	include_once( $mu_plugin );
</code></pre><pre class=''><code><span class='LineNumber'>173</span> }
</code></pre><pre class=''><code><span class='LineNumber'>174</span> unset( $mu_plugin );
</code></pre><pre class=''><code><span class='LineNumber'>175</span> 
</code></pre><pre class=''><code><span class='LineNumber'>176</span> // Load network activated plugins.
</code></pre><pre class=''><code><span class='LineNumber'>177</span> if ( is_multisite() ) {
</code></pre><pre class=''><code><span class='LineNumber'>178</span> 	foreach( wp_get_active_network_plugins() as $network_plugin ) {
</code></pre><pre class=''><code><span class='LineNumber'>179</span> 		wp_register_plugin_realpath( $network_plugin );
</code></pre><pre class=''><code><span class='LineNumber'>180</span> 		include_once( $network_plugin );
</code></pre><pre class=''><code><span class='LineNumber'>181</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>182</span> 	unset( $network_plugin );
</code></pre><pre class=''><code><span class='LineNumber'>183</span> }
</code></pre><pre class=''><code><span class='LineNumber'>184</span> 
</code></pre><pre class=''><code><span class='LineNumber'>185</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>186</span>  * Fires once all must-use and network-activated plugins have loaded.
</code></pre><pre class=''><code><span class='LineNumber'>187</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>188</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>189</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>190</span> do_action( 'muplugins_loaded' );
</code></pre><pre class=''><code><span class='LineNumber'>191</span> 
</code></pre><pre class=''><code><span class='LineNumber'>192</span> if ( is_multisite() )
</code></pre><pre class=''><code><span class='LineNumber'>193</span> 	ms_cookie_constants(  );
</code></pre><pre class=''><code><span class='LineNumber'>194</span> 
</code></pre><pre class=''><code><span class='LineNumber'>195</span> // Define constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies().
</code></pre><pre class=''><code><span class='LineNumber'>196</span> wp_cookie_constants();
</code></pre><pre class=''><code><span class='LineNumber'>197</span> 
</code></pre><pre class=''><code><span class='LineNumber'>198</span> // Define and enforce our SSL constants
</code></pre><pre class=''><code><span class='LineNumber'>199</span> wp_ssl_constants();
</code></pre><pre class=''><code><span class='LineNumber'>200</span> 
</code></pre><pre class=''><code><span class='LineNumber'>201</span> // Create common globals.
</code></pre><pre class=''><code><span class='LineNumber'>202</span> require( ABSPATH . WPINC . '/vars.php' );
</code></pre><pre class=''><code><span class='LineNumber'>203</span> 
</code></pre><pre class=''><code><span class='LineNumber'>204</span> // Make taxonomies and posts available to plugins and themes.
</code></pre><pre class=''><code><span class='LineNumber'>205</span> // @plugin authors: warning: these get registered again on the init hook.
</code></pre><pre class=''><code><span class='LineNumber'>206</span> create_initial_taxonomies();
</code></pre><pre class=''><code><span class='LineNumber'>207</span> create_initial_post_types();
</code></pre><pre class=''><code><span class='LineNumber'>208</span> 
</code></pre><pre class=''><code><span class='LineNumber'>209</span> // Register the default theme directory root
</code></pre><pre class=''><code><span class='LineNumber'>210</span> register_theme_directory( get_theme_root() );
</code></pre><pre class=''><code><span class='LineNumber'>211</span> 
</code></pre><pre class=''><code><span class='LineNumber'>212</span> // Load active plugins.
</code></pre><pre class=''><code><span class='LineNumber'>213</span> foreach ( wp_get_active_and_valid_plugins() as $plugin ) {
</code></pre><pre class=''><code><span class='LineNumber'>214</span> 	wp_register_plugin_realpath( $plugin );
</code></pre><pre class=''><code><span class='LineNumber'>215</span> 	include_once( $plugin );
</code></pre><pre class=''><code><span class='LineNumber'>216</span> }
</code></pre><pre class=''><code><span class='LineNumber'>217</span> unset( $plugin );
</code></pre><pre class=''><code><span class='LineNumber'>218</span> 
</code></pre><pre class=''><code><span class='LineNumber'>219</span> // Load pluggable functions.
</code></pre><pre class=''><code><span class='LineNumber'>220</span> require( ABSPATH . WPINC . '/pluggable.php' );
</code></pre><pre class=''><code><span class='LineNumber'>221</span> require( ABSPATH . WPINC . '/pluggable-deprecated.php' );
</code></pre><pre class=''><code><span class='LineNumber'>222</span> 
</code></pre><pre class=''><code><span class='LineNumber'>223</span> // Set internal encoding.
</code></pre><pre class=''><code><span class='LineNumber'>224</span> wp_set_internal_encoding();
</code></pre><pre class=''><code><span class='LineNumber'>225</span> 
</code></pre><pre class=''><code><span class='LineNumber'>226</span> // Run wp_cache_postload() if object cache is enabled and the function exists.
</code></pre><pre class=''><code><span class='LineNumber'>227</span> if ( WP_CACHE &amp;&amp; function_exists( 'wp_cache_postload' ) )
</code></pre><pre class=''><code><span class='LineNumber'>228</span> 	wp_cache_postload();
</code></pre><pre class=''><code><span class='LineNumber'>229</span> 
</code></pre><pre class=''><code><span class='LineNumber'>230</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>231</span>  * Fires once activated plugins have loaded.
</code></pre><pre class=''><code><span class='LineNumber'>232</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>233</span>  * Pluggable functions are also available at this point in the loading order.
</code></pre><pre class=''><code><span class='LineNumber'>234</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>235</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>236</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>237</span> do_action( 'plugins_loaded' );
</code></pre><pre class=''><code><span class='LineNumber'>238</span> 
</code></pre><pre class=''><code><span class='LineNumber'>239</span> // Define constants which affect functionality if not already defined.
</code></pre><pre class=''><code><span class='LineNumber'>240</span> wp_functionality_constants();
</code></pre><pre class=''><code><span class='LineNumber'>241</span> 
</code></pre><pre class=''><code><span class='LineNumber'>242</span> // Add magic quotes and set up $_REQUEST ( $_GET + $_POST )
</code></pre><pre class=''><code><span class='LineNumber'>243</span> wp_magic_quotes();
</code></pre><pre class=''><code><span class='LineNumber'>244</span> 
</code></pre><pre class=''><code><span class='LineNumber'>245</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>246</span>  * Fires when comment cookies are sanitized.
</code></pre><pre class=''><code><span class='LineNumber'>247</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>248</span>  * @since 2.0.11
</code></pre><pre class=''><code><span class='LineNumber'>249</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>250</span> do_action( 'sanitize_comment_cookies' );
</code></pre><pre class=''><code><span class='LineNumber'>251</span> 
</code></pre><pre class=''><code><span class='LineNumber'>252</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>253</span>  * WordPress Query object
</code></pre><pre class=''><code><span class='LineNumber'>254</span>  * @global object $wp_the_query
</code></pre><pre class=''><code><span class='LineNumber'>255</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>256</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>257</span> $GLOBALS['wp_the_query'] = new WP_Query();
</code></pre><pre class=''><code><span class='LineNumber'>258</span> 
</code></pre><pre class=''><code><span class='LineNumber'>259</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>260</span>  * Holds the reference to @see $wp_the_query
</code></pre><pre class=''><code><span class='LineNumber'>261</span>  * Use this global for WordPress queries
</code></pre><pre class=''><code><span class='LineNumber'>262</span>  * @global object $wp_query
</code></pre><pre class=''><code><span class='LineNumber'>263</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>264</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>265</span> $GLOBALS['wp_query'] = $GLOBALS['wp_the_query'];
</code></pre><pre class=''><code><span class='LineNumber'>266</span> 
</code></pre><pre class=''><code><span class='LineNumber'>267</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>268</span>  * Holds the WordPress Rewrite object for creating pretty URLs
</code></pre><pre class=''><code><span class='LineNumber'>269</span>  * @global object $wp_rewrite
</code></pre><pre class=''><code><span class='LineNumber'>270</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>271</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>272</span> $GLOBALS['wp_rewrite'] = new WP_Rewrite();
</code></pre><pre class=''><code><span class='LineNumber'>273</span> 
</code></pre><pre class=''><code><span class='LineNumber'>274</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>275</span>  * WordPress Object
</code></pre><pre class=''><code><span class='LineNumber'>276</span>  * @global object $wp
</code></pre><pre class=''><code><span class='LineNumber'>277</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>278</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>279</span> $GLOBALS['wp'] = new WP();
</code></pre><pre class=''><code><span class='LineNumber'>280</span> 
</code></pre><pre class=''><code><span class='LineNumber'>281</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>282</span>  * WordPress Widget Factory Object
</code></pre><pre class=''><code><span class='LineNumber'>283</span>  * @global object $wp_widget_factory
</code></pre><pre class=''><code><span class='LineNumber'>284</span>  * @since 2.8.0
</code></pre><pre class=''><code><span class='LineNumber'>285</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>286</span> $GLOBALS['wp_widget_factory'] = new WP_Widget_Factory();
</code></pre><pre class=''><code><span class='LineNumber'>287</span> 
</code></pre><pre class=''><code><span class='LineNumber'>288</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>289</span>  * WordPress User Roles
</code></pre><pre class=''><code><span class='LineNumber'>290</span>  * @global object $wp_roles
</code></pre><pre class=''><code><span class='LineNumber'>291</span>  * @since 2.0.0
</code></pre><pre class=''><code><span class='LineNumber'>292</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>293</span> $GLOBALS['wp_roles'] = new WP_Roles();
</code></pre><pre class=''><code><span class='LineNumber'>294</span> 
</code></pre><pre class=''><code><span class='LineNumber'>295</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>296</span>  * Fires before the theme is loaded.
</code></pre><pre class=''><code><span class='LineNumber'>297</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>298</span>  * @since 2.6.0
</code></pre><pre class=''><code><span class='LineNumber'>299</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>300</span> do_action( 'setup_theme' );
</code></pre><pre class=''><code><span class='LineNumber'>301</span> 
</code></pre><pre class=''><code><span class='LineNumber'>302</span> // Define the template related constants.
</code></pre><pre class=''><code><span class='LineNumber'>303</span> wp_templating_constants(  );
</code></pre><pre class=''><code><span class='LineNumber'>304</span> 
</code></pre><pre class=''><code><span class='LineNumber'>305</span> // Load the default text localization domain.
</code></pre><pre class=''><code><span class='LineNumber'>306</span> load_default_textdomain();
</code></pre><pre class=''><code><span class='LineNumber'>307</span> 
</code></pre><pre class=''><code><span class='LineNumber'>308</span> $locale = get_locale();
</code></pre><pre class=''><code><span class='LineNumber'>309</span> $locale_file = WP_LANG_DIR . &quot;/$locale.php&quot;;
</code></pre><pre class=''><code><span class='LineNumber'>310</span> if ( ( 0 === validate_file( $locale ) ) &amp;&amp; is_readable( $locale_file ) )
</code></pre><pre class=''><code><span class='LineNumber'>311</span> 	require( $locale_file );
</code></pre><pre class=''><code><span class='LineNumber'>312</span> unset( $locale_file );
</code></pre><pre class=''><code><span class='LineNumber'>313</span> 
</code></pre><pre class=''><code><span class='LineNumber'>314</span> // Pull in locale data after loading text domain.
</code></pre><pre class=''><code><span class='LineNumber'>315</span> require_once( ABSPATH . WPINC . '/locale.php' );
</code></pre><pre class=''><code><span class='LineNumber'>316</span> 
</code></pre><pre class=''><code><span class='LineNumber'>317</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>318</span>  * WordPress Locale object for loading locale domain date and various strings.
</code></pre><pre class=''><code><span class='LineNumber'>319</span>  * @global object $wp_locale
</code></pre><pre class=''><code><span class='LineNumber'>320</span>  * @since 2.1.0
</code></pre><pre class=''><code><span class='LineNumber'>321</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>322</span> $GLOBALS['wp_locale'] = new WP_Locale();
</code></pre><pre class=''><code><span class='LineNumber'>323</span> 
</code></pre><pre class=''><code><span class='LineNumber'>324</span> // Load the functions for the active theme, for both parent and child theme if applicable.
</code></pre><pre class=''><code><span class='LineNumber'>325</span> if ( ! defined( 'WP_INSTALLING' ) || 'wp-activate.php' === $pagenow ) {
</code></pre><pre class=''><code><span class='LineNumber'>326</span> 	if ( TEMPLATEPATH !== STYLESHEETPATH &amp;&amp; file_exists( STYLESHEETPATH . '/functions.php' ) )
</code></pre><pre class=''><code><span class='LineNumber'>327</span> 		include( STYLESHEETPATH . '/functions.php' );
</code></pre><pre class=''><code><span class='LineNumber'>328</span> 	if ( file_exists( TEMPLATEPATH . '/functions.php' ) )
</code></pre><pre class=''><code><span class='LineNumber'>329</span> 		include( TEMPLATEPATH . '/functions.php' );
</code></pre><pre class=''><code><span class='LineNumber'>330</span> }
</code></pre><pre class=''><code><span class='LineNumber'>331</span> 
</code></pre><pre class=''><code><span class='LineNumber'>332</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>333</span>  * Fires after the theme is loaded.
</code></pre><pre class=''><code><span class='LineNumber'>334</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>335</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>336</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>337</span> do_action( 'after_setup_theme' );
</code></pre><pre class=''><code><span class='LineNumber'>338</span> 
</code></pre><pre class=''><code><span class='LineNumber'>339</span> // Set up current user.
</code></pre><pre class=''><code><span class='LineNumber'>340</span> $GLOBALS['wp']-&gt;init();
</code></pre><pre class=''><code><span class='LineNumber'>341</span> 
</code></pre><pre class=''><code><span class='LineNumber'>342</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>343</span>  * Fires after WordPress has finished loading but before any headers are sent.
</code></pre><pre class=''><code><span class='LineNumber'>344</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>345</span>  * Most of WP is loaded at this stage, and the user is authenticated. WP continues
</code></pre><pre class=''><code><span class='LineNumber'>346</span>  * to load on the init hook that follows (e.g. widgets), and many plugins instantiate
</code></pre><pre class=''><code><span class='LineNumber'>347</span>  * themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.).
</code></pre><pre class=''><code><span class='LineNumber'>348</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>349</span>  * If you wish to plug an action once WP is loaded, use the wp_loaded hook below.
</code></pre><pre class=''><code><span class='LineNumber'>350</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>351</span>  * @since 1.5.0
</code></pre><pre class=''><code><span class='LineNumber'>352</span>  */
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>353</span> do_action( 'init' );
</code></pre><pre class=''><code><span class='LineNumber'>354</span> 
</code></pre><pre class=''><code><span class='LineNumber'>355</span> // Check site status
</code></pre><pre class=''><code><span class='LineNumber'>356</span> if ( is_multisite() ) {
</code></pre><pre class=''><code><span class='LineNumber'>357</span> 	if ( true !== ( $file = ms_site_check() ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>358</span> 		require( $file );
</code></pre><pre class=''><code><span class='LineNumber'>359</span> 		die();
</code></pre><pre class=''><code><span class='LineNumber'>360</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>361</span> 	unset($file);
</code></pre><pre class=''><code><span class='LineNumber'>362</span> }
</code></pre><pre class=''><code><span class='LineNumber'>363</span> 
</code></pre><pre class=''><code><span class='LineNumber'>364</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>365</span>  * This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.
</code></pre><pre class=''><code><span class='LineNumber'>366</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>367</span>  * AJAX requests should use wp-admin/admin-ajax.php. admin-ajax.php can handle requests for
</code></pre><pre class=''><code><span class='LineNumber'>368</span>  * users not logged in.
</code></pre><pre class=''><code><span class='LineNumber'>369</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>370</span>  * @link http://codex.wordpress.org/AJAX_in_Plugins
</code></pre><pre class=''><code><span class='LineNumber'>371</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>372</span>  * @since 3.0.0
</code></pre><pre class=''><code><span class='LineNumber'>373</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>374</span> do_action( 'wp_loaded' );
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-config.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /** Enable W3 Total Cache */
</code></pre><pre class=''><code><span class='LineNumber'>3</span> define('WP_CACHE', true); // Added by W3 Total Cache
</code></pre><pre class=''><code><span class='LineNumber'>4</span> 
</code></pre><pre class=''><code><span class='LineNumber'>5</span> 
</code></pre><pre class=''><code><span class='LineNumber'>6</span> 
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * The base configurations of the WordPress.
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>12</span>  * This file has the following configurations: MySQL settings, Table Prefix,
</code></pre><pre class=''><code><span class='LineNumber'>13</span>  * Secret Keys, WordPress Language, and ABSPATH. You can find more information
</code></pre><pre class=''><code><span class='LineNumber'>14</span>  * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  * wp-config.php} Codex page. You can get the MySQL settings from your web host.
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  * This file is used by the wp-config.php creation script during the
</code></pre><pre class=''><code><span class='LineNumber'>18</span>  * installation. You don't have to use the web site, you can just copy this file
</code></pre><pre class=''><code><span class='LineNumber'>19</span>  * to &quot;wp-config.php&quot; and fill in the values.
</code></pre><pre class=''><code><span class='LineNumber'>20</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>21</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>22</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 
</code></pre><pre class=''><code><span class='LineNumber'>24</span> // ** MySQL settings - You can get this info from your web host ** //
</code></pre><pre class=''><code><span class='LineNumber'>25</span> /** The name of the database for WordPress */
</code></pre><pre class=''><code><span class='LineNumber'>26</span> 
</code></pre><pre class=''><code><span class='LineNumber'>27</span> // gohearplug.com
</code></pre><pre class=''><code><span class='LineNumber'>28</span> if(in_array($_SERVER['SERVER_NAME'], array(&quot;local.surfears.com&quot;)))
</code></pre><pre class=''><code><span class='LineNumber'>29</span> {
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 	define('DB_NAME', 'com_surfears_www');
</code></pre><pre class=''><code><span class='LineNumber'>31</span> 	define('DB_USER', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 	define('DB_PASSWORD', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>33</span> }
</code></pre><pre class=''><code><span class='LineNumber'>34</span> else if($_SERVER['SERVER_NAME'] == &quot;local.stats.telia.com&quot;)
</code></pre><pre class=''><code><span class='LineNumber'>35</span> {
</code></pre><pre class=''><code><span class='LineNumber'>36</span> 	define('DB_NAME', 'com_telia_stats_www');
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 	define('DB_USER', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 	define('DB_PASSWORD', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>39</span> }
</code></pre><pre class=''><code><span class='LineNumber'>40</span> else if($_SERVER['SERVER_NAME'] == &quot;teliastats.psweb.se&quot;)
</code></pre><pre class=''><code><span class='LineNumber'>41</span> {
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 	define('DB_NAME', 'pswebse_se_psweb_teliastats_www');
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 	define('DB_USER', 'pswebse_admin');
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 	define('DB_PASSWORD', 'rSR8;QoGJFv;');
</code></pre><pre class=''><code><span class='LineNumber'>45</span> }
</code></pre><pre class=''><code><span class='LineNumber'>46</span> else if($_SERVER['SERVER_NAME'] == &quot;local.peoplepartner.se&quot;)
</code></pre><pre class=''><code><span class='LineNumber'>47</span> {
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 	define('DB_NAME', 'se_peoplepartner_www');
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 	define('DB_USER', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 	define('DB_PASSWORD', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>51</span> }
</code></pre><pre class=''><code><span class='LineNumber'>52</span> else if($_SERVER['SERVER_NAME'] == &quot;peoplepartner.se&quot;)
</code></pre><pre class=''><code><span class='LineNumber'>53</span> {
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 	define('DB_NAME', 'pswebse_se_peoplepartner_www');
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 	define('DB_USER', 'pswebse_pp');
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 	define('DB_PASSWORD', 'iFhXVr$z[w(H');
</code></pre><pre class=''><code><span class='LineNumber'>57</span> }
</code></pre><pre class=''><code><span class='LineNumber'>58</span> else if(in_array($_SERVER['SERVER_NAME'], array(&quot;local.tutomvc.com&quot;)))
</code></pre><pre class=''><code><span class='LineNumber'>59</span> {
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 	define('DB_NAME', 'com_tutomvc_www');
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 	define('DB_USER', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 	define('DB_PASSWORD', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>63</span> }
</code></pre><pre class=''><code><span class='LineNumber'>64</span> else if(in_array($_SERVER['SERVER_NAME'], array(&quot;local.constructionclimatechallenge.com&quot;)))
</code></pre><pre class=''><code><span class='LineNumber'>65</span> {
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 	define('DB_NAME', 'com_constructionclimatechallenge_www');
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 	define('DB_USER', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 	define('DB_PASSWORD', 'root');
</code></pre><pre class=''><code><span class='LineNumber'>69</span> }
</code></pre><pre class=''><code><span class='LineNumber'>70</span> else if(in_array($_SERVER['SERVER_NAME'], array(&quot;vceccc.psweb.se&quot;)))
</code></pre><pre class=''><code><span class='LineNumber'>71</span> {
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 	define('DB_NAME', 'pswebse_se_psweb_vceccc_www');
</code></pre><pre class=''><code><span class='LineNumber'>73</span> 	define('DB_USER', 'pswebse_admin');
</code></pre><pre class=''><code><span class='LineNumber'>74</span> 	define('DB_PASSWORD', 'rSR8;QoGJFv;');
</code></pre><pre class=''><code><span class='LineNumber'>75</span> }
</code></pre><pre class=''><code><span class='LineNumber'>76</span> else if(in_array($_SERVER['SERVER_NAME'], array(&quot;tutomvc.psweb.se&quot;)))
</code></pre><pre class=''><code><span class='LineNumber'>77</span> {
</code></pre><pre class=''><code><span class='LineNumber'>78</span> 	define('DB_NAME', 'pswebse_tutomvc');
</code></pre><pre class=''><code><span class='LineNumber'>79</span> 	define('DB_USER', 'pswebse_admin');
</code></pre><pre class=''><code><span class='LineNumber'>80</span> 	define('DB_PASSWORD', 'rSR8;QoGJFv;');
</code></pre><pre class=''><code><span class='LineNumber'>81</span> }
</code></pre><pre class=''><code><span class='LineNumber'>82</span> 
</code></pre><pre class=''><code><span class='LineNumber'>83</span> /** MySQL hostname */
</code></pre><pre class=''><code><span class='LineNumber'>84</span> define('DB_HOST', 'localhost');
</code></pre><pre class=''><code><span class='LineNumber'>85</span> 
</code></pre><pre class=''><code><span class='LineNumber'>86</span> /** Database Charset to use in creating database tables. */
</code></pre><pre class=''><code><span class='LineNumber'>87</span> define('DB_CHARSET', 'utf8');
</code></pre><pre class=''><code><span class='LineNumber'>88</span> 
</code></pre><pre class=''><code><span class='LineNumber'>89</span> /** The Database Collate type. Don't change this if in doubt. */
</code></pre><pre class=''><code><span class='LineNumber'>90</span> define('DB_COLLATE', '');
</code></pre><pre class=''><code><span class='LineNumber'>91</span> 
</code></pre><pre class=''><code><span class='LineNumber'>92</span> /**#@+
</code></pre><pre class=''><code><span class='LineNumber'>93</span>  * Authentication Unique Keys and Salts.
</code></pre><pre class=''><code><span class='LineNumber'>94</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>95</span>  * Change these to different unique phrases!
</code></pre><pre class=''><code><span class='LineNumber'>96</span>  * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
</code></pre><pre class=''><code><span class='LineNumber'>97</span>  * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
</code></pre><pre class=''><code><span class='LineNumber'>98</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>99</span>  * @since 2.6.0
</code></pre><pre class=''><code><span class='LineNumber'>100</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>101</span> define('AUTH_KEY',         '8rR$&lt;3oe/kleJ45Cm=H-Od=wRxu?ta`^sCwu$At1CrMcO.&gt;V|7EK%e3$R7ShhX~{');
</code></pre><pre class=''><code><span class='LineNumber'>102</span> define('SECURE_AUTH_KEY',  'P@Ch9u%y,=&gt;DTQ4P5X/MBsr09LB@sx@HpFZ+|,@eJ)iA8xX$7Rb~+Oo%X~sK/gi0');
</code></pre><pre class=''><code><span class='LineNumber'>103</span> define('LOGGED_IN_KEY',    '+*:;`mg7.2q7Z87+@1Y3fk{~=B~qh%ng0^$2{Ow6VPV$][-Wf*f;+gZ!3jTF7&amp;;G');
</code></pre><pre class=''><code><span class='LineNumber'>104</span> define('NONCE_KEY',        '~_h6_%U1gU+w4[JwUKu_16c$Ds,-a,1t Sw`S=LV^+E8Q8O5Y!{!V1&amp;?o&amp;5i}t+c');
</code></pre><pre class=''><code><span class='LineNumber'>105</span> define('AUTH_SALT',        'zjU_AW.|h_c!hR{K3-j 5LkybP]~v}^sqfo puo)Z$VXEU}(@Xz5p 0;|rdgA+$]');
</code></pre><pre class=''><code><span class='LineNumber'>106</span> define('SECURE_AUTH_SALT', 'Nexp/_0#}X5Yl&gt;7;yCq5;IP/]1O^t-Ui&amp;JdcT/Qc-b!F&lt;jRi:T%H`*`o-|+&lt;ueGu');
</code></pre><pre class=''><code><span class='LineNumber'>107</span> define('LOGGED_IN_SALT',   'Yw3UplnvUGk(KHkrEF=O|K)&amp;e-Ch,]k`F3C#W} 1@m{?+^!pR6K0:XO!S%1P`X[7');
</code></pre><pre class=''><code><span class='LineNumber'>108</span> define('NONCE_SALT',       'Qr&gt;FRb&lt;s0/PFVr$kyy3hM+]W0K7g]*2RONH$yaTh9`2BHwP(/V4c:({$wExXW&gt;S=');
</code></pre><pre class=''><code><span class='LineNumber'>109</span> 
</code></pre><pre class=''><code><span class='LineNumber'>110</span> /**#@-*/
</code></pre><pre class=''><code><span class='LineNumber'>111</span> 
</code></pre><pre class=''><code><span class='LineNumber'>112</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>113</span>  * WordPress Database Table prefix.
</code></pre><pre class=''><code><span class='LineNumber'>114</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>115</span>  * You can have multiple installations in one database if you give each a unique
</code></pre><pre class=''><code><span class='LineNumber'>116</span>  * prefix. Only numbers, letters, and underscores please!
</code></pre><pre class=''><code><span class='LineNumber'>117</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>118</span> $table_prefix  = 'wp_';
</code></pre><pre class=''><code><span class='LineNumber'>119</span> 
</code></pre><pre class=''><code><span class='LineNumber'>120</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>121</span>  * WordPress Localized Language, defaults to English.
</code></pre><pre class=''><code><span class='LineNumber'>122</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>123</span>  * Change this to localize WordPress. A corresponding MO file for the chosen
</code></pre><pre class=''><code><span class='LineNumber'>124</span>  * language must be installed to wp-content/languages. For example, install
</code></pre><pre class=''><code><span class='LineNumber'>125</span>  * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German
</code></pre><pre class=''><code><span class='LineNumber'>126</span>  * language support.
</code></pre><pre class=''><code><span class='LineNumber'>127</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>128</span> define('WPLANG', '');
</code></pre><pre class=''><code><span class='LineNumber'>129</span> 
</code></pre><pre class=''><code><span class='LineNumber'>130</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>131</span>  * For developers: WordPress debugging mode.
</code></pre><pre class=''><code><span class='LineNumber'>132</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>133</span>  * Change this to true to enable the display of notices during development.
</code></pre><pre class=''><code><span class='LineNumber'>134</span>  * It is strongly recommended that plugin and theme developers use WP_DEBUG
</code></pre><pre class=''><code><span class='LineNumber'>135</span>  * in their development environments.
</code></pre><pre class=''><code><span class='LineNumber'>136</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>137</span> define('WP_DEBUG', false);
</code></pre><pre class=''><code><span class='LineNumber'>138</span> 
</code></pre><pre class=''><code><span class='LineNumber'>139</span> /* That's all, stop editing! Happy blogging. */
</code></pre><pre class=''><code><span class='LineNumber'>140</span> 
</code></pre><pre class=''><code><span class='LineNumber'>141</span> /** Absolute path to the WordPress directory. */
</code></pre><pre class=''><code><span class='LineNumber'>142</span> if ( !defined('ABSPATH') )
</code></pre><pre class=''><code><span class='LineNumber'>143</span> 	define('ABSPATH', dirname(__FILE__) . '/');
</code></pre><pre class=''><code><span class='LineNumber'>144</span> 
</code></pre><pre class=''><code><span class='LineNumber'>145</span> /** Sets up WordPress vars and included files. */
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>146</span> require_once(ABSPATH . 'wp-settings.php');
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-load.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Bootstrap file for setting the ABSPATH constant
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  * and loading the wp-config.php file. The wp-config.php
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  * file will then load the wp-settings.php file, which
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  * will then set up the WordPress environment.
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>8</span>  * If the wp-config.php file is not found then an error
</code></pre><pre class=''><code><span class='LineNumber'>9</span>  * will be displayed asking the visitor to set up the
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * wp-config.php file.
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>12</span>  * Will also search for wp-config.php in WordPress' parent
</code></pre><pre class=''><code><span class='LineNumber'>13</span>  * directory to allow the WordPress directory to remain
</code></pre><pre class=''><code><span class='LineNumber'>14</span>  * untouched.
</code></pre><pre class=''><code><span class='LineNumber'>15</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>16</span>  * @internal This file must be parsable by PHP4.
</code></pre><pre class=''><code><span class='LineNumber'>17</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>18</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>19</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>20</span> 
</code></pre><pre class=''><code><span class='LineNumber'>21</span> /** Define ABSPATH as this file's directory */
</code></pre><pre class=''><code><span class='LineNumber'>22</span> define( 'ABSPATH', dirname(__FILE__) . '/' );
</code></pre><pre class=''><code><span class='LineNumber'>23</span> 
</code></pre><pre class=''><code><span class='LineNumber'>24</span> error_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );
</code></pre><pre class=''><code><span class='LineNumber'>25</span> 
</code></pre><pre class=''><code><span class='LineNumber'>26</span> if ( file_exists( ABSPATH . 'wp-config.php') ) {
</code></pre><pre class=''><code><span class='LineNumber'>27</span> 
</code></pre><pre class=''><code><span class='LineNumber'>28</span> 	/** The config file resides in ABSPATH */
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>29</span> 	require_once( ABSPATH . 'wp-config.php' );
</code></pre><pre class=''><code><span class='LineNumber'>30</span> 
</code></pre><pre class=''><code><span class='LineNumber'>31</span> } elseif ( file_exists( dirname(ABSPATH) . '/wp-config.php' ) &amp;&amp; ! file_exists( dirname(ABSPATH) . '/wp-settings.php' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>32</span> 
</code></pre><pre class=''><code><span class='LineNumber'>33</span> 	/** The config file resides one level above ABSPATH but is not part of another install */
</code></pre><pre class=''><code><span class='LineNumber'>34</span> 	require_once( dirname(ABSPATH) . '/wp-config.php' );
</code></pre><pre class=''><code><span class='LineNumber'>35</span> 
</code></pre><pre class=''><code><span class='LineNumber'>36</span> } else {
</code></pre><pre class=''><code><span class='LineNumber'>37</span> 
</code></pre><pre class=''><code><span class='LineNumber'>38</span> 	// A config file doesn't exist
</code></pre><pre class=''><code><span class='LineNumber'>39</span> 
</code></pre><pre class=''><code><span class='LineNumber'>40</span> 	define( 'WPINC', 'wp-includes' );
</code></pre><pre class=''><code><span class='LineNumber'>41</span> 	require_once( ABSPATH . WPINC . '/load.php' );
</code></pre><pre class=''><code><span class='LineNumber'>42</span> 
</code></pre><pre class=''><code><span class='LineNumber'>43</span> 	// Standardize $_SERVER variables across setups.
</code></pre><pre class=''><code><span class='LineNumber'>44</span> 	wp_fix_server_vars();
</code></pre><pre class=''><code><span class='LineNumber'>45</span> 
</code></pre><pre class=''><code><span class='LineNumber'>46</span> 	require_once( ABSPATH . WPINC . '/functions.php' );
</code></pre><pre class=''><code><span class='LineNumber'>47</span> 
</code></pre><pre class=''><code><span class='LineNumber'>48</span> 	$path = wp_guess_url() . '/wp-admin/setup-config.php';
</code></pre><pre class=''><code><span class='LineNumber'>49</span> 
</code></pre><pre class=''><code><span class='LineNumber'>50</span> 	/*
</code></pre><pre class=''><code><span class='LineNumber'>51</span> 	 * We're going to redirect to setup-config.php. While this shouldn't result
</code></pre><pre class=''><code><span class='LineNumber'>52</span> 	 * in an infinite loop, that's a silly thing to assume, don't you think? If
</code></pre><pre class=''><code><span class='LineNumber'>53</span> 	 * we're traveling in circles, our last-ditch effort is &quot;Need more help?&quot;
</code></pre><pre class=''><code><span class='LineNumber'>54</span> 	 */
</code></pre><pre class=''><code><span class='LineNumber'>55</span> 	if ( false === strpos( $_SERVER['REQUEST_URI'], 'setup-config' ) ) {
</code></pre><pre class=''><code><span class='LineNumber'>56</span> 		header( 'Location: ' . $path );
</code></pre><pre class=''><code><span class='LineNumber'>57</span> 		exit;
</code></pre><pre class=''><code><span class='LineNumber'>58</span> 	}
</code></pre><pre class=''><code><span class='LineNumber'>59</span> 
</code></pre><pre class=''><code><span class='LineNumber'>60</span> 	define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );
</code></pre><pre class=''><code><span class='LineNumber'>61</span> 	require_once( ABSPATH . WPINC . '/version.php' );
</code></pre><pre class=''><code><span class='LineNumber'>62</span> 
</code></pre><pre class=''><code><span class='LineNumber'>63</span> 	wp_check_php_mysql_versions();
</code></pre><pre class=''><code><span class='LineNumber'>64</span> 	wp_load_translations_early();
</code></pre><pre class=''><code><span class='LineNumber'>65</span> 
</code></pre><pre class=''><code><span class='LineNumber'>66</span> 	// Die with an error message
</code></pre><pre class=''><code><span class='LineNumber'>67</span> 	$die  = __( &quot;There doesn't seem to be a &lt;code&gt;wp-config.php&lt;/code&gt; file. I need this before we can get started.&quot; ) . '&lt;/p&gt;';
</code></pre><pre class=''><code><span class='LineNumber'>68</span> 	$die .= '&lt;p&gt;' . __( &quot;Need more help? &lt;a href='http://codex.wordpress.org/Editing_wp-config.php'&gt;We got it&lt;/a&gt;.&quot; ) . '&lt;/p&gt;';
</code></pre><pre class=''><code><span class='LineNumber'>69</span> 	$die .= '&lt;p&gt;' . __( &quot;You can create a &lt;code&gt;wp-config.php&lt;/code&gt; file through a web interface, but this doesn't work for all server setups. The safest way is to manually create the file.&quot; ) . '&lt;/p&gt;';
</code></pre><pre class=''><code><span class='LineNumber'>70</span> 	$die .= '&lt;p&gt;&lt;a href=&quot;' . $path . '&quot; class=&quot;button button-large&quot;&gt;' . __( &quot;Create a Configuration File&quot; ) . '&lt;/a&gt;';
</code></pre><pre class=''><code><span class='LineNumber'>71</span> 
</code></pre><pre class=''><code><span class='LineNumber'>72</span> 	wp_die( $die, __( 'WordPress &amp;rsaquo; Error' ) );
</code></pre><pre class=''><code><span class='LineNumber'>73</span> }
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/_wp/wp-blog-header.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Loads the WordPress environment and template.
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>7</span> 
</code></pre><pre class=''><code><span class='LineNumber'>8</span> if ( !isset($wp_did_header) ) {
</code></pre><pre class=''><code><span class='LineNumber'>9</span> 
</code></pre><pre class=''><code><span class='LineNumber'>10</span> 	$wp_did_header = true;
</code></pre><pre class=''><code><span class='LineNumber'>11</span> 
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>12</span> 	require_once( dirname(__FILE__) . '/wp-load.php' );
</code></pre><pre class=''><code><span class='LineNumber'>13</span> 
</code></pre><pre class=''><code><span class='LineNumber'>14</span> 	wp();
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 
</code></pre><pre class=''><code><span class='LineNumber'>16</span> 	require_once( ABSPATH . WPINC . '/template-loader.php' );
</code></pre><pre class=''><code><span class='LineNumber'>17</span> 
</code></pre><pre class=''><code><span class='LineNumber'>18</span> }
</code></pre>	</div>
</div><div class="Backtrace Collapsed">
	<div class="File Button">
		<span>/Users/johannesbuvnas/Development/Sites/com/tutomvc/www/index.php</span>
	</div>
	<div class="Code">
		<pre class=''><code><span class='LineNumber'>1</span> &lt;?php
</code></pre><pre class=''><code><span class='LineNumber'>2</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>3</span>  * Front to the WordPress application. This file doesn't do anything, but loads
</code></pre><pre class=''><code><span class='LineNumber'>4</span>  * wp-blog-header.php which does and tells WordPress to load the theme.
</code></pre><pre class=''><code><span class='LineNumber'>5</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>6</span>  * @package WordPress
</code></pre><pre class=''><code><span class='LineNumber'>7</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>8</span> 
</code></pre><pre class=''><code><span class='LineNumber'>9</span> /**
</code></pre><pre class=''><code><span class='LineNumber'>10</span>  * Tells WordPress to load the WordPress theme and output it.
</code></pre><pre class=''><code><span class='LineNumber'>11</span>  *
</code></pre><pre class=''><code><span class='LineNumber'>12</span>  * @var bool
</code></pre><pre class=''><code><span class='LineNumber'>13</span>  */
</code></pre><pre class=''><code><span class='LineNumber'>14</span> define('WP_USE_THEMES', true);
</code></pre><pre class=''><code><span class='LineNumber'>15</span> 
</code></pre><pre class=''><code><span class='LineNumber'>16</span> /** Loads the WordPress Environment and Template */
</code></pre><pre class='ExceptionLine'><code><span class='LineNumber'>17</span> require( dirname( __FILE__ ) . '/_wp/wp-blog-header.php' );
</code></pre>	</div>
</div>	</div>
</div>		<script type="text/javascript">
			var els = document.getElementsByClassName( "Backtrace" );
			for(var i in els)
			{
				var element = els[i];
				if(element && element.getElementsByClassName)
				{
					element.id = "backtrace" + i;
					var header = element.getElementsByClassName( "File" );
					if(header && header.length)
					{
						header = header[0];
						header.setAttribute( "data-id", "backtrace" + i );
						header.onclick = function(e)
						{
							var element = document.getElementById( this.getAttribute( "data-id" ) );
							console.log(element.className.indexOf( "Collapsed" ));
							if(element.className.indexOf( "Collapsed" ) > -1)
							{
								element.className = "Backtrace";
							}
							else
							{
								element.className = "Backtrace Collapsed";
							}
						};
					}
				}
			}
		</script>
		